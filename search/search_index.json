{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"0_intro/","text":"Introduction \u00b6 This book contains a glossary of software architecture terminology . It can serve as a reference for preparation for the iSAQB e.V. examination Certified Professional for Software Architecture - Foundation Level \u00a9. Please be aware: This glossary is not intended to be a primer or course book on software architecture, just a collection of definitions (and links to further information). Furthermore, you find proposals for translations of the iSAQB terminology, currently between English and German (and vice-versa). Finally this book contains numerous references to books and other resources, many of which we quoted in the definitions. This book is work in progress. Errors or omissions can also be reported in our issue tracker on Github , where the authors maintain the original sources for this book. Personal Comments \u00b6 Several of the terms contained in this book have been commented by one or several authors: D> ###### Comment (Gernot Starke) D> Some terms might be especially important, or sometimes there are some subtle aspects involved. Comments like these give a personal opinion and do not necessarily reflect the iSAQB. D> {pagebreak} Terms Can Be Referenced \u00b6 All terms in the glossary have unique URLs to the (free) online version of the book, therefore they can be universally referenced, both from online- and print documentation. Our URL scheme is quite simple: The base URL is https://leanpub.com/isaqbglossary/read We just add the prefix #term- in front of the term to be referenced, then the term itself, with hyphens (\"-\") instead of blanks. For example our description of the term software architecture can be referenced (hyperlinked) with https://leanpub.com/isaqbglossary/read#term-software-architecture Nearly all terms are hyperlinked with their full names, with very few examples that are referenced by their (common) abbreviations, like UML or DDD. {pagebreak} License \u00b6 {float=inside,width=25%} This book is licensed under a Creative Commons Attribution 4.0 International License . The following is only a brief summary and no substitution for the real license. The cc-4.0-by license means that you might: Share \u2014 copy and redistribute the material in any medium or format Adapt \u2014 remix, transform, and build upon the material for any purpose, even commercially. The licensor cannot revoke these freedoms as long as you follow the license terms. You must: Give appropriate credit, Provide a link to the license (https://creativecommons.org/licenses/by/4.0/)), and Indicate if (and which) changes were made with respect to the original. {pagebreak} Acknowledgements \u00b6 Several parts of this glossary have been contributed by the following volunteers and sponsors: The definitions of about 120 terms have been donated by Gernot Starke, originally compiled for one of his books . A number of definitions in context of system improvement and evolution was contributed by the aim42 open source project. Contributing \u00b6 A>#### Contributions are welcome A> A>In case find errors, omissions or typos, or want to contribute additional content - A>please feel free to do this via one of the following ways: A> A>1. Open an issue in our Github repository A>2. Fork the repository and create a pull request. A>3. Discuss topics on the books' Leanpub feedback page A>4. Write an email to the authors, also from the books' website Your input is highly appreciated by the authors.","title":"Introduction"},{"location":"0_intro/#introduction","text":"This book contains a glossary of software architecture terminology . It can serve as a reference for preparation for the iSAQB e.V. examination Certified Professional for Software Architecture - Foundation Level \u00a9. Please be aware: This glossary is not intended to be a primer or course book on software architecture, just a collection of definitions (and links to further information). Furthermore, you find proposals for translations of the iSAQB terminology, currently between English and German (and vice-versa). Finally this book contains numerous references to books and other resources, many of which we quoted in the definitions. This book is work in progress. Errors or omissions can also be reported in our issue tracker on Github , where the authors maintain the original sources for this book.","title":"Introduction"},{"location":"0_intro/#personal-comments","text":"Several of the terms contained in this book have been commented by one or several authors: D> ###### Comment (Gernot Starke) D> Some terms might be especially important, or sometimes there are some subtle aspects involved. Comments like these give a personal opinion and do not necessarily reflect the iSAQB. D> {pagebreak}","title":"Personal Comments"},{"location":"0_intro/#terms-can-be-referenced","text":"All terms in the glossary have unique URLs to the (free) online version of the book, therefore they can be universally referenced, both from online- and print documentation. Our URL scheme is quite simple: The base URL is https://leanpub.com/isaqbglossary/read We just add the prefix #term- in front of the term to be referenced, then the term itself, with hyphens (\"-\") instead of blanks. For example our description of the term software architecture can be referenced (hyperlinked) with https://leanpub.com/isaqbglossary/read#term-software-architecture Nearly all terms are hyperlinked with their full names, with very few examples that are referenced by their (common) abbreviations, like UML or DDD. {pagebreak}","title":"Terms Can Be Referenced"},{"location":"0_intro/#license","text":"{float=inside,width=25%} This book is licensed under a Creative Commons Attribution 4.0 International License . The following is only a brief summary and no substitution for the real license. The cc-4.0-by license means that you might: Share \u2014 copy and redistribute the material in any medium or format Adapt \u2014 remix, transform, and build upon the material for any purpose, even commercially. The licensor cannot revoke these freedoms as long as you follow the license terms. You must: Give appropriate credit, Provide a link to the license (https://creativecommons.org/licenses/by/4.0/)), and Indicate if (and which) changes were made with respect to the original. {pagebreak}","title":"License"},{"location":"0_intro/#acknowledgements","text":"Several parts of this glossary have been contributed by the following volunteers and sponsors: The definitions of about 120 terms have been donated by Gernot Starke, originally compiled for one of his books . A number of definitions in context of system improvement and evolution was contributed by the aim42 open source project.","title":"Acknowledgements"},{"location":"0_intro/#contributing","text":"A>#### Contributions are welcome A> A>In case find errors, omissions or typos, or want to contribute additional content - A>please feel free to do this via one of the following ways: A> A>1. Open an issue in our Github repository A>2. Fork the repository and create a pull request. A>3. Discuss topics on the books' Leanpub feedback page A>4. Write an email to the authors, also from the books' website Your input is highly appreciated by the authors.","title":"Contributing"},{"location":"1-terms/","text":"{pagebreak} {#glossary} Glossary of Terms \u00b6","title":"1 terms"},{"location":"1-terms/#glossary-of-terms","text":"","title":"Glossary of Terms"},{"location":"42-translations-EN-DE/","text":"{pagebreak} {#section-translations} Translations \u00b6 Here you find translations of the terms between English and German (see below) and German-to-English (next section). Several of these terms are based in the legal and organizational foundations of the iSAQB association (and therefore not related to software architecture). The following translations are maintained[^generateTranslation] in a simple JSON input file, contained within this books' open source Github repository . [^generateTranslation]: The documentation found in https://github.com/isaqb-org/glossary contains all information required to generate the translation tables. Currently, only English and German are supported. The translation tables are maintained in JSON format, suggestions for improvements are highly welcome! {#section-translations-EN-DE} Translations English to German \u00b6 A>Please note: This translation table is not supposed to be complete, several English terms will not be translated but preferably used in their original language (e.g. many of the design pattern names).","title":"42 translations EN DE"},{"location":"42-translations-EN-DE/#translations","text":"Here you find translations of the terms between English and German (see below) and German-to-English (next section). Several of these terms are based in the legal and organizational foundations of the iSAQB association (and therefore not related to software architecture). The following translations are maintained[^generateTranslation] in a simple JSON input file, contained within this books' open source Github repository . [^generateTranslation]: The documentation found in https://github.com/isaqb-org/glossary contains all information required to generate the translation tables. Currently, only English and German are supported. The translation tables are maintained in JSON format, suggestions for improvements are highly welcome! {#section-translations-EN-DE}","title":"Translations"},{"location":"42-translations-EN-DE/#translations-english-to-german","text":"A>Please note: This translation table is not supposed to be complete, several English terms will not be translated but preferably used in their original language (e.g. many of the design pattern names).","title":"Translations English to German"},{"location":"43-translations-DE-EN/","text":"{pagebreak} {#section-translations-DE-EN} Translations German to English \u00b6 In this section we collect the iSAQB translation of the terms from German to English. A>Please note: This translation table is not supposed to be complete, several English terms will not be translated but preferably used in their original language (e.g. many of the design pattern names). %% %% the actual translation tables are generated from a JSON file %% in the /translations directory. %%","title":"43 translations DE EN"},{"location":"43-translations-DE-EN/#translations-german-to-english","text":"In this section we collect the iSAQB translation of the terms from German to English. A>Please note: This translation table is not supposed to be complete, several English terms will not be translated but preferably used in their original language (e.g. many of the design pattern names). %% %% the actual translation tables are generated from a JSON file %% in the /translations directory. %%","title":"Translations German to English"},{"location":"60-categories/","text":"Categories \u00b6 We use categories to add structure to the terms in the glossary. Every term might belong to zero or more of the following categories: Architecture-Pattern : Name of an architecture pattern or -style from e.g. [Buschmann+96], [Fowler2003], [Hohpe+2003], [Quian+2010] or other fundamental references. Communication : Used or needed to communicate information about arbitrary aspects of software architecture. DDD : Keyword from the CPSA-Advanced curriculum \"Domain Driven Design\" Design-Pattern : Name of a design pattern from e.g. [Gamma+95] or other fundamental sources. Design-Principle : Name of a fundamental design principle. Foundation : Terms required for or contained in the CPSA-Foundation curriculum. Fundamental : Fundamental term. Improve : Keyword from the CPSA-Advanced curriculum \"IMPROVE\". iSAQB : Official iSAQB terms, many of them used for contracts, association and other organizational stuff. Metric : Defined measure to what degree a software system (or related process) possesses some property. Examples: Size (e.g. Lines-of-Code, cyclomatic complexity, coupling, mean-time-between-failure) Security : Measures to reach basic principles like confidentiality, integrity, availability and non-repudation for data in an IT-system. ISO-IEC-IEEE-42010 : ISO/IEC/IEEE 42010:2011 Systems and software engineering Architecture description. Note, a new version of the standard was expected to be published till the end of 2016.","title":"Categories"},{"location":"60-categories/#categories","text":"We use categories to add structure to the terms in the glossary. Every term might belong to zero or more of the following categories: Architecture-Pattern : Name of an architecture pattern or -style from e.g. [Buschmann+96], [Fowler2003], [Hohpe+2003], [Quian+2010] or other fundamental references. Communication : Used or needed to communicate information about arbitrary aspects of software architecture. DDD : Keyword from the CPSA-Advanced curriculum \"Domain Driven Design\" Design-Pattern : Name of a design pattern from e.g. [Gamma+95] or other fundamental sources. Design-Principle : Name of a fundamental design principle. Foundation : Terms required for or contained in the CPSA-Foundation curriculum. Fundamental : Fundamental term. Improve : Keyword from the CPSA-Advanced curriculum \"IMPROVE\". iSAQB : Official iSAQB terms, many of them used for contracts, association and other organizational stuff. Metric : Defined measure to what degree a software system (or related process) possesses some property. Examples: Size (e.g. Lines-of-Code, cyclomatic complexity, coupling, mean-time-between-failure) Security : Measures to reach basic principles like confidentiality, integrity, availability and non-repudation for data in an IT-system. ISO-IEC-IEEE-42010 : ISO/IEC/IEEE 42010:2011 Systems and software engineering Architecture description. Note, a new version of the standard was expected to be published till the end of 2016.","title":"Categories"},{"location":"99-resources/","text":"{pagebreak} {#section-references} References and Resources \u00b6 {#ref-anderson-2008} Anderson-2008 \u00b6 Ross Anderson, Security Engineering - A Guide to Building Dependable Distributed Systems, 2nd edition 2008, John Wiley & Sons. One of the most comprehensive books about information security available. {#ref-bachmann-2000} Bachmann+2000 \u00b6 Bachmann, Felix/Bass, Len/Carriere, Jeromy/Clements, Paul/Garlan, David/Ivers, James/Nord, Robert/Little, Reed. Software Architecture Documentation in Practice , Special Report CMU/SEI-2000-SR-004, 2000. {#ref-bass-2012} Bass+2012 \u00b6 Bass, L/Clements, P/Kazman, R.: Software Architecture in Practice 3rd edition, Addison-Wesley, 2012. Although the title suggests otherwise, a quite fundamental (and sometimes abstract) book. The authors have a strong background in ultra-large scale (often military) systems - so their advice might sometimes conflicts with small or lean kinds of projects. {#ref-brown2015} Brown-2015 \u00b6 Brown, Simon: Software Architecture For Developers , https://leanpub.com/software-architecture-for-developers Leanpub Publishing. Very practical and pragmatic. {#ref-buschmann-1996} Buschmann+1996 \u00b6 Also known as POSA-1. Buschmann, Frank/Meunier, Regine/Rohnert, Hans/Sommerlad, Peter: A System of Patterns: Pattern-Oriented Software Architecture 1 , 1st edition, 1996, John Wiley & Sons. Most likely the most famous and groundbreaking book on architecture patterns. {#ref-buschmann-2007} Buschmann+2007 \u00b6 Also known as POSA-4. Buschmann, Frank/Henney, Kevlin/Schmidt, Douglas C.: Pattern-Oriented Software Architecture: A Pattern Language for Distributed Computing , Volume 4, 2007, John Wiley & Sons. Describes a pattern language for distributed computing that guides readers through the best practices and introduce them to key areas of building distributed software systems. The book connects hundreds of stand-alone patterns, pattern collections, and pattern languages from the existing body of literature found in the POSA series. {#ref-buschmann-2007b} Buschmann+2007b \u00b6 Also known as POSA-5. Buschmann, Frank/Henney, Kevlin/Schmidt, Douglas C.: Pattern-Oriented Software Architecture: On Patterns and Pattern Languages , Volume 5, 2007, John Wiley & Sons. A meta-explanation, addresses the question of what a pattern language is and compares various pattern paradigms. {#ref-clements-2002} Clements+2002 \u00b6 Clements, Paul/Kazman, Rick/Klein, Mark: Evaluating Software Architectures: Methods and Case Studies , Addison-Wesley, 2001. {#ref-clements-2010} Clements+2010 \u00b6 Clements, Paul/Bachmann, Felix/Bass, Len/Garlan, David/Ivers, James/Little, Reed/Merson, Paulo/Nord, Robert. Documenting Software Architectures: Views and Beyond , 2nd edition, Addison Wesley, 2010 {#ref-evans-2004} Evans-2004 \u00b6 Evans, Eric: Domain-Driven Design: Tackling Complexity in the Heart of Software, 1st edition, Addison-Wesley, 2004. {#ref-ford-2017} Ford+2017 \u00b6 Neil Ford, Rebecca Parsons, Patrick Kua: Building Evolutionary Architectures: Support Constant Change. OReilly 2017 {#ref-fowler-2003} Fowler-2003 \u00b6 Fowler, Martin: Patterns of Enterprise Application Architecture, Addison-Wesley, 2003. Great support for building information systems. {#ref-gamma-1994} Gamma+1994 \u00b6 Gamma, Erich/Helm, Richard/Johnson, Ralph/Vlissides, John M. Design Patterns: Elements of Reusable Object-Oriented Software, 1st edition, 1994, Addison-Wesley, 1994. A classic on design patterns. {#ref-gof} GoF (Gang of Four) \u00b6 See Gamma+1994 {#ref-gorton-2011} Gorton-2011 \u00b6 Gorton, I. Essential Software Architecture , 2nd edition, Springer, 2011 {#ref-hargis+2004} Hargis+2004 \u00b6 Hargis, Gretchen/Carey, Michelle/Hernandez, Ann: Developing Quality Technical Information: A Handbook for Writers and Editors, IBM Press, 2nd edition, Prentice Hall, 2004. If you need to write lots of documentation, you should have a look at this book. {#ref-hofmeister+2000} Hofmeister+2000 \u00b6 Hofmeister, Christine/Nord, Robert/Soni, Dilip: Applied Software Architecture, 1st edition, Addison-Wesley, 1999 {#ref-hohpe+2003} Hohpe+2003 \u00b6 Hohpe, G/Woolf, B: Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions , Addison Wesley, 2003. A very important book and timeless book for people creating integrated systems. {#ref-kazman-1996} Kazman+1996 \u00b6 Kazman, R., Abowd, G., Bass, L., & Clements, P.: Scenario-based analysis of software architecture , IEEE software, 13(6), 47-55, 1996. {#ref-kelly+2009} Kelly+2009 \u00b6 Steven Kelly and Risto Pohjonen: Worst Practices for Domain-Specific Modeling IEEE Software, volume 26, No. 4 July/August 2009, p22-30. Authors explain several bad practices of domain modeling and give advice how and why to avoid those. {#ref-kruchten-1995} Kruchten-1995 \u00b6 Kruchten, Philippe. The 4+1 View Model of Architecture , IEEE Software, volume 12 (6), pp 45-50, 1995. {#ref-lilienthal-2019} Lilienthal-2019 \u00b6 Lilienthal, Carola: Langlebige Software-Architekturen: Technische Schulden analysieren, begrenzen und abbauen 3rd edition, dpunkt.verlag, 2019 {#ref-martin-solid} Martin-SOLID \u00b6 Martin, Robert C: S.O.L.I.D. S.O.L.I.D is an acronym for the first five object-oriented design(OOD) principles by Robert C. Martin. Some of the original papers have been moved around onto various locations - see the following: Wikipedia on SOLID A nice Introduction by Samuel Oloruntoba {#ref-martin-2003} Martin-2003 \u00b6 Martin, Robert C: Agile Software Development: Principles, Patterns and Practices , Prentice Hall, 2002 {#ref-mcgraw-2006} McGraw-2006 \u00b6 Garry McGraw, \"Software Security - Building Security In\", Addison-Wesley 2006 Covering the whole process of software design from a security perspective by the means of risk management, code reviews, risk analysis, penetration testing, security testing nad abuse case development. {#ref-parnas-1972} Parnas-1972 \u00b6 Parnas, David: On the criteria to be used in decomposing systems into modules\" , Communications of the ACM, volume 15, issue 12, Dec 1972 One of the most influential articles ever written in software engineering, introducing encapsulation and modularity. {#ref-posa-1} POSA-1 \u00b6 Pattern-Oriented Software Architecture, Volume 1. See Buschmann+1996 . {#ref-posa-2} POSA-2 \u00b6 Pattern-Oriented Software Architecture, Volume 2. See Schmidt+2000 . {#ref-posa-4} POSA-4 \u00b6 Pattern-Oriented Software Architecture, Volume 4. See Buschmann+2007 . {#ref-posa-5} POSA-5 \u00b6 Pattern-Oriented Software Architecture, Volume 5. See Buschmann+2007b . {#ref-quian-2010} Quian+2010 \u00b6 Qian, K/Fu, X/Tao, L/Xu, C/Herrera, J: Software Architecture and Design Illuminated, 1st edition, Jones and Bartlett, 2010. Well-structure and readable collection of architecture styles and patterns. {#ref-rozanski-2011} Rozanski+2011 \u00b6 Rozanski, Nick/Woods, Eoin: Software Systems Architecture - Working with Stakeholders Using Viewpoints and Perspectives , 2nd Edition, Addison Wesley 2011. Presents a set of architectural viewpoints and perspectives. {#ref-rmias-2013} RMIAS-2013 \u00b6 Yulia Cherdantseva, Jeremy Hilton, A Reference Model of Information Assurance & Security, 2013 Eight International Conference on Availability, Reliability and Security (ARES), DOI: 10.1109/ARES.2013.72 , http://users.cs.cf.ac.uk/Y.V.Cherdantseva/RMIAS.pdf Conference Paper of Yulia Cherdantseva and Jeremy Hilton describing the RMIAS. {#ref-schmidt-2000} Schmidt+2000 \u00b6 Also known as POSA-2. Schmidt, Douglas C/Stal, Michael/Rohnert, Hans/Buschmann, Frank. Pattern-Oriented Software Architecture, volume 2: Patterns for Concurrent and Networked Objects, Wiley & Sons, 2000 {#ref-schneier-1996} Schneier-1996 \u00b6 Bruce Schneier, Applied Cryptography, 2nd Edition 1996, John Wiley & Sons Comprehensive suervey of modern cryptography. {#ref-shaw-1996} Shaw+1996 \u00b6 Shaw, Mary/Garlan, David: Software Architecture: Perspectives on an Emerging Discipline , Prentice Hall, 1996 {#ref-starke-esa-en} Starke-2018 \u00b6 Starke, Gernot: Effective Software Architectures: iSAQB CPSA-Foundation\u00a9\ufe0f Certification Study Guide Leanpub, 2018. Available online https://leanpub.com/esa42 . A study guide for the CPSA-Foundation examination. {#ref-tanenbaum-steen} Tanenbaum+2016 \u00b6 Andrew Tanenbaum, Maarten van Steen: Distributed Systems, Principles and Paradigms. https://www.distributed-systems.net/ {#ref-tornhill-crime-scene} Tornhill-2015 \u00b6 Adam Tornhill: Your Code as a Crime Scene. Use Forensic Techniques to Arrest Defects, Bottlenecks, and Bad Design in Your Programs. Pragmatic Programmers, 2015. https://www.adamtornhill.com","title":"99 resources"},{"location":"99-resources/#references-and-resources","text":"{#ref-anderson-2008}","title":"References and Resources"},{"location":"99-resources/#anderson-2008","text":"Ross Anderson, Security Engineering - A Guide to Building Dependable Distributed Systems, 2nd edition 2008, John Wiley & Sons. One of the most comprehensive books about information security available. {#ref-bachmann-2000}","title":"Anderson-2008"},{"location":"99-resources/#bachmann2000","text":"Bachmann, Felix/Bass, Len/Carriere, Jeromy/Clements, Paul/Garlan, David/Ivers, James/Nord, Robert/Little, Reed. Software Architecture Documentation in Practice , Special Report CMU/SEI-2000-SR-004, 2000. {#ref-bass-2012}","title":"Bachmann+2000"},{"location":"99-resources/#bass2012","text":"Bass, L/Clements, P/Kazman, R.: Software Architecture in Practice 3rd edition, Addison-Wesley, 2012. Although the title suggests otherwise, a quite fundamental (and sometimes abstract) book. The authors have a strong background in ultra-large scale (often military) systems - so their advice might sometimes conflicts with small or lean kinds of projects. {#ref-brown2015}","title":"Bass+2012"},{"location":"99-resources/#brown-2015","text":"Brown, Simon: Software Architecture For Developers , https://leanpub.com/software-architecture-for-developers Leanpub Publishing. Very practical and pragmatic. {#ref-buschmann-1996}","title":"Brown-2015"},{"location":"99-resources/#buschmann1996","text":"Also known as POSA-1. Buschmann, Frank/Meunier, Regine/Rohnert, Hans/Sommerlad, Peter: A System of Patterns: Pattern-Oriented Software Architecture 1 , 1st edition, 1996, John Wiley & Sons. Most likely the most famous and groundbreaking book on architecture patterns. {#ref-buschmann-2007}","title":"Buschmann+1996"},{"location":"99-resources/#buschmann2007","text":"Also known as POSA-4. Buschmann, Frank/Henney, Kevlin/Schmidt, Douglas C.: Pattern-Oriented Software Architecture: A Pattern Language for Distributed Computing , Volume 4, 2007, John Wiley & Sons. Describes a pattern language for distributed computing that guides readers through the best practices and introduce them to key areas of building distributed software systems. The book connects hundreds of stand-alone patterns, pattern collections, and pattern languages from the existing body of literature found in the POSA series. {#ref-buschmann-2007b}","title":"Buschmann+2007"},{"location":"99-resources/#buschmann2007b","text":"Also known as POSA-5. Buschmann, Frank/Henney, Kevlin/Schmidt, Douglas C.: Pattern-Oriented Software Architecture: On Patterns and Pattern Languages , Volume 5, 2007, John Wiley & Sons. A meta-explanation, addresses the question of what a pattern language is and compares various pattern paradigms. {#ref-clements-2002}","title":"Buschmann+2007b"},{"location":"99-resources/#clements2002","text":"Clements, Paul/Kazman, Rick/Klein, Mark: Evaluating Software Architectures: Methods and Case Studies , Addison-Wesley, 2001. {#ref-clements-2010}","title":"Clements+2002"},{"location":"99-resources/#clements2010","text":"Clements, Paul/Bachmann, Felix/Bass, Len/Garlan, David/Ivers, James/Little, Reed/Merson, Paulo/Nord, Robert. Documenting Software Architectures: Views and Beyond , 2nd edition, Addison Wesley, 2010 {#ref-evans-2004}","title":"Clements+2010"},{"location":"99-resources/#evans-2004","text":"Evans, Eric: Domain-Driven Design: Tackling Complexity in the Heart of Software, 1st edition, Addison-Wesley, 2004. {#ref-ford-2017}","title":"Evans-2004"},{"location":"99-resources/#ford2017","text":"Neil Ford, Rebecca Parsons, Patrick Kua: Building Evolutionary Architectures: Support Constant Change. OReilly 2017 {#ref-fowler-2003}","title":"Ford+2017"},{"location":"99-resources/#fowler-2003","text":"Fowler, Martin: Patterns of Enterprise Application Architecture, Addison-Wesley, 2003. Great support for building information systems. {#ref-gamma-1994}","title":"Fowler-2003"},{"location":"99-resources/#gamma1994","text":"Gamma, Erich/Helm, Richard/Johnson, Ralph/Vlissides, John M. Design Patterns: Elements of Reusable Object-Oriented Software, 1st edition, 1994, Addison-Wesley, 1994. A classic on design patterns. {#ref-gof}","title":"Gamma+1994"},{"location":"99-resources/#gof-gang-of-four","text":"See Gamma+1994 {#ref-gorton-2011}","title":"GoF (Gang of Four)"},{"location":"99-resources/#gorton-2011","text":"Gorton, I. Essential Software Architecture , 2nd edition, Springer, 2011 {#ref-hargis+2004}","title":"Gorton-2011"},{"location":"99-resources/#hargis2004","text":"Hargis, Gretchen/Carey, Michelle/Hernandez, Ann: Developing Quality Technical Information: A Handbook for Writers and Editors, IBM Press, 2nd edition, Prentice Hall, 2004. If you need to write lots of documentation, you should have a look at this book. {#ref-hofmeister+2000}","title":"Hargis+2004"},{"location":"99-resources/#hofmeister2000","text":"Hofmeister, Christine/Nord, Robert/Soni, Dilip: Applied Software Architecture, 1st edition, Addison-Wesley, 1999 {#ref-hohpe+2003}","title":"Hofmeister+2000"},{"location":"99-resources/#hohpe2003","text":"Hohpe, G/Woolf, B: Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions , Addison Wesley, 2003. A very important book and timeless book for people creating integrated systems. {#ref-kazman-1996}","title":"Hohpe+2003"},{"location":"99-resources/#kazman1996","text":"Kazman, R., Abowd, G., Bass, L., & Clements, P.: Scenario-based analysis of software architecture , IEEE software, 13(6), 47-55, 1996. {#ref-kelly+2009}","title":"Kazman+1996"},{"location":"99-resources/#kelly2009","text":"Steven Kelly and Risto Pohjonen: Worst Practices for Domain-Specific Modeling IEEE Software, volume 26, No. 4 July/August 2009, p22-30. Authors explain several bad practices of domain modeling and give advice how and why to avoid those. {#ref-kruchten-1995}","title":"Kelly+2009"},{"location":"99-resources/#kruchten-1995","text":"Kruchten, Philippe. The 4+1 View Model of Architecture , IEEE Software, volume 12 (6), pp 45-50, 1995. {#ref-lilienthal-2019}","title":"Kruchten-1995"},{"location":"99-resources/#lilienthal-2019","text":"Lilienthal, Carola: Langlebige Software-Architekturen: Technische Schulden analysieren, begrenzen und abbauen 3rd edition, dpunkt.verlag, 2019 {#ref-martin-solid}","title":"Lilienthal-2019"},{"location":"99-resources/#martin-solid","text":"Martin, Robert C: S.O.L.I.D. S.O.L.I.D is an acronym for the first five object-oriented design(OOD) principles by Robert C. Martin. Some of the original papers have been moved around onto various locations - see the following: Wikipedia on SOLID A nice Introduction by Samuel Oloruntoba {#ref-martin-2003}","title":"Martin-SOLID"},{"location":"99-resources/#martin-2003","text":"Martin, Robert C: Agile Software Development: Principles, Patterns and Practices , Prentice Hall, 2002 {#ref-mcgraw-2006}","title":"Martin-2003"},{"location":"99-resources/#mcgraw-2006","text":"Garry McGraw, \"Software Security - Building Security In\", Addison-Wesley 2006 Covering the whole process of software design from a security perspective by the means of risk management, code reviews, risk analysis, penetration testing, security testing nad abuse case development. {#ref-parnas-1972}","title":"McGraw-2006"},{"location":"99-resources/#parnas-1972","text":"Parnas, David: On the criteria to be used in decomposing systems into modules\" , Communications of the ACM, volume 15, issue 12, Dec 1972 One of the most influential articles ever written in software engineering, introducing encapsulation and modularity. {#ref-posa-1}","title":"Parnas-1972"},{"location":"99-resources/#posa-1","text":"Pattern-Oriented Software Architecture, Volume 1. See Buschmann+1996 . {#ref-posa-2}","title":"POSA-1"},{"location":"99-resources/#posa-2","text":"Pattern-Oriented Software Architecture, Volume 2. See Schmidt+2000 . {#ref-posa-4}","title":"POSA-2"},{"location":"99-resources/#posa-4","text":"Pattern-Oriented Software Architecture, Volume 4. See Buschmann+2007 . {#ref-posa-5}","title":"POSA-4"},{"location":"99-resources/#posa-5","text":"Pattern-Oriented Software Architecture, Volume 5. See Buschmann+2007b . {#ref-quian-2010}","title":"POSA-5"},{"location":"99-resources/#quian2010","text":"Qian, K/Fu, X/Tao, L/Xu, C/Herrera, J: Software Architecture and Design Illuminated, 1st edition, Jones and Bartlett, 2010. Well-structure and readable collection of architecture styles and patterns. {#ref-rozanski-2011}","title":"Quian+2010"},{"location":"99-resources/#rozanski2011","text":"Rozanski, Nick/Woods, Eoin: Software Systems Architecture - Working with Stakeholders Using Viewpoints and Perspectives , 2nd Edition, Addison Wesley 2011. Presents a set of architectural viewpoints and perspectives. {#ref-rmias-2013}","title":"Rozanski+2011"},{"location":"99-resources/#rmias-2013","text":"Yulia Cherdantseva, Jeremy Hilton, A Reference Model of Information Assurance & Security, 2013 Eight International Conference on Availability, Reliability and Security (ARES), DOI: 10.1109/ARES.2013.72 , http://users.cs.cf.ac.uk/Y.V.Cherdantseva/RMIAS.pdf Conference Paper of Yulia Cherdantseva and Jeremy Hilton describing the RMIAS. {#ref-schmidt-2000}","title":"RMIAS-2013"},{"location":"99-resources/#schmidt2000","text":"Also known as POSA-2. Schmidt, Douglas C/Stal, Michael/Rohnert, Hans/Buschmann, Frank. Pattern-Oriented Software Architecture, volume 2: Patterns for Concurrent and Networked Objects, Wiley & Sons, 2000 {#ref-schneier-1996}","title":"Schmidt+2000"},{"location":"99-resources/#schneier-1996","text":"Bruce Schneier, Applied Cryptography, 2nd Edition 1996, John Wiley & Sons Comprehensive suervey of modern cryptography. {#ref-shaw-1996}","title":"Schneier-1996"},{"location":"99-resources/#shaw1996","text":"Shaw, Mary/Garlan, David: Software Architecture: Perspectives on an Emerging Discipline , Prentice Hall, 1996 {#ref-starke-esa-en}","title":"Shaw+1996"},{"location":"99-resources/#starke-2018","text":"Starke, Gernot: Effective Software Architectures: iSAQB CPSA-Foundation\u00a9\ufe0f Certification Study Guide Leanpub, 2018. Available online https://leanpub.com/esa42 . A study guide for the CPSA-Foundation examination. {#ref-tanenbaum-steen}","title":"Starke-2018"},{"location":"99-resources/#tanenbaum2016","text":"Andrew Tanenbaum, Maarten van Steen: Distributed Systems, Principles and Paradigms. https://www.distributed-systems.net/ {#ref-tornhill-crime-scene}","title":"Tanenbaum+2016"},{"location":"99-resources/#tornhill-2015","text":"Adam Tornhill: Your Code as a Crime Scene. Use Forensic Techniques to Arrest Defects, Bottlenecks, and Bad Design in Your Programs. Pragmatic Programmers, 2015. https://www.adamtornhill.com","title":"Tornhill-2015"},{"location":"revision-history/","text":"Revision History \u00b6 (NOT part of the book, just \"for the records\") Date Changes 2016-Jun-04 GS, Initial book structure 2016-Jun-08 GS, Added section on iSAQB 2016-Jun-10 GS, Added initial version of translation table, corrected numerous tiny issues 2016-Jun-17 GS, added several terms to en-de translation, added categories and translation tables 2016-Aug-22 GS, removed revision history from generated book 2017-Dec-20 GS, numerous additional translations from IMPROVE 2019-Feb RR, numerous additions for terms around Quality","title":"Revision history"},{"location":"revision-history/#revision-history","text":"(NOT part of the book, just \"for the records\") Date Changes 2016-Jun-04 GS, Initial book structure 2016-Jun-08 GS, Added section on iSAQB 2016-Jun-10 GS, Added initial version of translation table, corrected numerous tiny issues 2016-Jun-17 GS, added several terms to en-de translation, added categories and translation tables 2016-Aug-22 GS, removed revision history from generated book 2017-Dec-20 GS, numerous additional translations from IMPROVE 2019-Feb RR, numerous additions for terms around Quality","title":"Revision History"},{"location":"appendix/1-about-isaqb/","text":"{pagebreak} {#section-about-isaqb} Appendix A: The iSAQB e.V. Association \u00b6 {width=20%,float=inside} The International Software Architecture Qualification Board (iSAQB e.V., http://isaqb.org) is a non-profit organization with members from industry, development and consulting firms, education, academia and other organizations. It is established as an association (e.V.) according to German law with the following objectives: Creating and maintaining consistent curricula for software architects. Defining certification examinations based upon the various CPSA curricula Ensuring high quality of teaching for software architects Ensuring a high quality of its software architecture certifications iSAQB defines and prescribes training and examination regulations, but does not carry out any training or examinations itself. iSAQB trainings are carried out by (licensed) training and examination organizations. iSAQB monitors and audits the quality of these trainings and all associated processes (e.g. certification procedures).","title":"1 about isaqb"},{"location":"appendix/1-about-isaqb/#appendix-a-the-isaqb-ev-association","text":"{width=20%,float=inside} The International Software Architecture Qualification Board (iSAQB e.V., http://isaqb.org) is a non-profit organization with members from industry, development and consulting firms, education, academia and other organizations. It is established as an association (e.V.) according to German law with the following objectives: Creating and maintaining consistent curricula for software architects. Defining certification examinations based upon the various CPSA curricula Ensuring high quality of teaching for software architects Ensuring a high quality of its software architecture certifications iSAQB defines and prescribes training and examination regulations, but does not carry out any training or examinations itself. iSAQB trainings are carried out by (licensed) training and examination organizations. iSAQB monitors and audits the quality of these trainings and all associated processes (e.g. certification procedures).","title":"Appendix A: The iSAQB e.V. Association"},{"location":"appendix/2-about-the-authors/","text":"Appendix B: About the Authors \u00b6 Gernot Starke \u00b6 Dr. Gernot Starke ( INNOQ Fellow) is co-founder and avid user of the (open source) arc42 documentation template. For more than 20 years he works as software architect, coach and consultant, conquering the challenges of creating effective software architectures for clients from various industries. In 2008 Gernot co-founded the International Software Architecture Qualification Board ( iSAQB e.V. ) and since then supports it as an active member. Gernot has authored several (German) books on software architecture and related topics and initiated this glossary. He lives in Cologne with his wife ( Cheffe Uli ). Ulrich Becker \u00b6 Ulrich Becker works as principal consultant at Method Park , focussing on software architecture and application lifecycle management. Ulrich studied computer science at the University of Hamburg and the University of Erlangen-N\u00fcrnberg. He received his PhD from the University of Erlangen-N\u00fcrnberg in 2003 for his work on model-based distribution configuration. He then became group leader for the adaptive system software group at Fraunhofer IIS . Since 2005 Ulrich works as a trainer, consultant and coach at Method Park where he supports his clients in improving their development processes and methods. Most of his clients are from the automotive industry or other heavily regulated industries. Ulrich is a founding member of iSAQB e.V. where he contributes to the foundation level and advanced level working groups. He lives in Erlangen with his family. Matthias Bohlen \u00b6 Matthias Bohlen, independent expert for effective product development, started his career as a software developer in 1980. He wrote compilers for the MC68020 processor by Motorola which was quite a revolutionary device in those days where there was no IBM PC, yet. And the compilers really sold well. Since then, Matthias has worked with countless software teams, helping them to get working software out the door without losing their mind. This is what he still does today. Matthias is an active member of the International Software Architecture Qualification Board , writes a blog , is being known in the Lean/Agile field, and speaks at conferences for software development. Phillip Ghadir \u00b6 Member of the board of INNOQ Deutschland GmbH. Since many years, Phillip consults clients from various industries in topics around software-architecture, technology and development. He co-founded the iSAQB and regularly conducts trainings on software architecture. Carola Lilienthal \u00b6 Dr. Carola Lilienthal is software architect at and co-founder of the WPS Workplace-Solutions . For 20 years she has been working as a developer, project manager, coach, consultant and architect. Carola was an early adopter of Domain-Driven Design and agile movement and has successfully worked for numerous clients from various domains, mainly finance, insurance and logistics. Since 2003, she has been analyzing software systems in Java, C++, C#, PHP, ABAP and gives advice to development teams how to improve the sustainability of their code. Carola speaks regularly on conferences and has written various articles as well as a book on sustainable software architecture. Since 2008 Carola has been supporting the International Software Architecture Qualification Board ( iSAQB e.V. ) as an active member. Mahbouba Gharbi \u00b6 Mahbouba Gharbi is CIO of iTech Progress, book author and conference speaker. Several years ago Mahbouba became president of the iSAQB. She lives in Mannheim with her family. Mirko Hillert \u00b6 Mirko is chairman and CEO of the iSAQB GmbH, the commercial branch of the iSAQB association. He contributed the majority of the more formal terms, concerning accreditation and the like. Simon K\u00f6lsch \u00b6 Simon K\u00f6lsch works as a senior consultant at INNOQ with a focus on web architecture and security. Simon is enthusiastic about solutions beyond the classical monolithic enterprise application, covering the architecture of distributed systems and their infrastructure, logging and monitoring. He is not committed to one specific technology or programming language, but has a strong JVM background. Alexander Lorz \u00b6 Dr.-Ing. Alexander Lorz is a freelance software architecture trainer, IT consultant and developer. His first contact with IT systems dates back to the mid-1980s, and since then he has refused to give up his fascination for the science and craftsmanship of developing complex systems. As an active member of the International Software Architecture Qualification Board ( iSAQB e.V. ) and the Foundation Level Working Group he contributes to the evolution of the foundation curriculum. Michael Mahlberg \u00b6 Michael Mahlberg runs his own method consultancy in Germany and spends most of his time supporting clients in their quest for more effective ways to work. Mostly by applying lean and agile concepts. Running his own computer and software related companies since he was 18, he quickly came to realize that software architecture and (development) processes are in a way timeless aspects of the craft. Nowadays a lot of his work focuses on processes and human interactions \u2013 a field in which he engages both professionally as well as pro bono (for example he is one of the people who started and run the Limited WIP Society Cologne ). Michael's architectural work therefore tends to be dealing with the impact(s) and implications of architectural and process decisions on each other and the relative optimization strategies. Andreas Rausch \u00b6 Prof. Dr. Andreas Rausch is head of the chair for Software Systems Engineering at Clausthal University of Technology. He received his doctorate in 2001 at the Technical University of Munich, at the chair of Prof. Dr. Manfred Broy. His main research interests in the field of software systems engineering are software architectures, model-based software development and process models. He has published more than 70 international papers in these areas. Roger Rhoades \u00b6 Roger Rhoades is founder of Albion , a training and consulting company in Germany. Roger has over 25 years of practical experience in the field of enterprise, business, and software architecture as well as management of international teams and projects. This practical experience is integrated into his training courses to ensure that class participants not only understand the theoretical content, but also the real-world challenges of its implementation. Since 2012, Roger regularly presents at international conferences (e.g. EAMKon, Lean42 EAM, IT Strategy and Governance). Since 2014, Roger has been an active member of the International Software Architecture Qualification Board ( iSAQB e.V. ). He actively supports the evolution of the foundation and advanced curricula, exam questions, and case studies in addition to the iSAQB glossary. Sebastian Fichtner \u00b6 Founder of flowtoolz.com . App engineer and consultant. Started coding in 1995. Passionate about architecture ever since. Does original apps, open source and projects for various clients. Loves Apple platforms and the language Swift.","title":"Appendix B: About the Authors"},{"location":"appendix/2-about-the-authors/#appendix-b-about-the-authors","text":"","title":"Appendix B: About the Authors"},{"location":"appendix/2-about-the-authors/#gernot-starke","text":"Dr. Gernot Starke ( INNOQ Fellow) is co-founder and avid user of the (open source) arc42 documentation template. For more than 20 years he works as software architect, coach and consultant, conquering the challenges of creating effective software architectures for clients from various industries. In 2008 Gernot co-founded the International Software Architecture Qualification Board ( iSAQB e.V. ) and since then supports it as an active member. Gernot has authored several (German) books on software architecture and related topics and initiated this glossary. He lives in Cologne with his wife ( Cheffe Uli ).","title":"Gernot Starke"},{"location":"appendix/2-about-the-authors/#ulrich-becker","text":"Ulrich Becker works as principal consultant at Method Park , focussing on software architecture and application lifecycle management. Ulrich studied computer science at the University of Hamburg and the University of Erlangen-N\u00fcrnberg. He received his PhD from the University of Erlangen-N\u00fcrnberg in 2003 for his work on model-based distribution configuration. He then became group leader for the adaptive system software group at Fraunhofer IIS . Since 2005 Ulrich works as a trainer, consultant and coach at Method Park where he supports his clients in improving their development processes and methods. Most of his clients are from the automotive industry or other heavily regulated industries. Ulrich is a founding member of iSAQB e.V. where he contributes to the foundation level and advanced level working groups. He lives in Erlangen with his family.","title":"Ulrich Becker"},{"location":"appendix/2-about-the-authors/#matthias-bohlen","text":"Matthias Bohlen, independent expert for effective product development, started his career as a software developer in 1980. He wrote compilers for the MC68020 processor by Motorola which was quite a revolutionary device in those days where there was no IBM PC, yet. And the compilers really sold well. Since then, Matthias has worked with countless software teams, helping them to get working software out the door without losing their mind. This is what he still does today. Matthias is an active member of the International Software Architecture Qualification Board , writes a blog , is being known in the Lean/Agile field, and speaks at conferences for software development.","title":"Matthias Bohlen"},{"location":"appendix/2-about-the-authors/#phillip-ghadir","text":"Member of the board of INNOQ Deutschland GmbH. Since many years, Phillip consults clients from various industries in topics around software-architecture, technology and development. He co-founded the iSAQB and regularly conducts trainings on software architecture.","title":"Phillip Ghadir"},{"location":"appendix/2-about-the-authors/#carola-lilienthal","text":"Dr. Carola Lilienthal is software architect at and co-founder of the WPS Workplace-Solutions . For 20 years she has been working as a developer, project manager, coach, consultant and architect. Carola was an early adopter of Domain-Driven Design and agile movement and has successfully worked for numerous clients from various domains, mainly finance, insurance and logistics. Since 2003, she has been analyzing software systems in Java, C++, C#, PHP, ABAP and gives advice to development teams how to improve the sustainability of their code. Carola speaks regularly on conferences and has written various articles as well as a book on sustainable software architecture. Since 2008 Carola has been supporting the International Software Architecture Qualification Board ( iSAQB e.V. ) as an active member.","title":"Carola Lilienthal"},{"location":"appendix/2-about-the-authors/#mahbouba-gharbi","text":"Mahbouba Gharbi is CIO of iTech Progress, book author and conference speaker. Several years ago Mahbouba became president of the iSAQB. She lives in Mannheim with her family.","title":"Mahbouba Gharbi"},{"location":"appendix/2-about-the-authors/#mirko-hillert","text":"Mirko is chairman and CEO of the iSAQB GmbH, the commercial branch of the iSAQB association. He contributed the majority of the more formal terms, concerning accreditation and the like.","title":"Mirko Hillert"},{"location":"appendix/2-about-the-authors/#simon-kolsch","text":"Simon K\u00f6lsch works as a senior consultant at INNOQ with a focus on web architecture and security. Simon is enthusiastic about solutions beyond the classical monolithic enterprise application, covering the architecture of distributed systems and their infrastructure, logging and monitoring. He is not committed to one specific technology or programming language, but has a strong JVM background.","title":"Simon K\u00f6lsch"},{"location":"appendix/2-about-the-authors/#alexander-lorz","text":"Dr.-Ing. Alexander Lorz is a freelance software architecture trainer, IT consultant and developer. His first contact with IT systems dates back to the mid-1980s, and since then he has refused to give up his fascination for the science and craftsmanship of developing complex systems. As an active member of the International Software Architecture Qualification Board ( iSAQB e.V. ) and the Foundation Level Working Group he contributes to the evolution of the foundation curriculum.","title":"Alexander Lorz"},{"location":"appendix/2-about-the-authors/#michael-mahlberg","text":"Michael Mahlberg runs his own method consultancy in Germany and spends most of his time supporting clients in their quest for more effective ways to work. Mostly by applying lean and agile concepts. Running his own computer and software related companies since he was 18, he quickly came to realize that software architecture and (development) processes are in a way timeless aspects of the craft. Nowadays a lot of his work focuses on processes and human interactions \u2013 a field in which he engages both professionally as well as pro bono (for example he is one of the people who started and run the Limited WIP Society Cologne ). Michael's architectural work therefore tends to be dealing with the impact(s) and implications of architectural and process decisions on each other and the relative optimization strategies.","title":"Michael Mahlberg"},{"location":"appendix/2-about-the-authors/#andreas-rausch","text":"Prof. Dr. Andreas Rausch is head of the chair for Software Systems Engineering at Clausthal University of Technology. He received his doctorate in 2001 at the Technical University of Munich, at the chair of Prof. Dr. Manfred Broy. His main research interests in the field of software systems engineering are software architectures, model-based software development and process models. He has published more than 70 international papers in these areas.","title":"Andreas Rausch"},{"location":"appendix/2-about-the-authors/#roger-rhoades","text":"Roger Rhoades is founder of Albion , a training and consulting company in Germany. Roger has over 25 years of practical experience in the field of enterprise, business, and software architecture as well as management of international teams and projects. This practical experience is integrated into his training courses to ensure that class participants not only understand the theoretical content, but also the real-world challenges of its implementation. Since 2012, Roger regularly presents at international conferences (e.g. EAMKon, Lean42 EAM, IT Strategy and Governance). Since 2014, Roger has been an active member of the International Software Architecture Qualification Board ( iSAQB e.V. ). He actively supports the evolution of the foundation and advanced curricula, exam questions, and case studies in addition to the iSAQB glossary.","title":"Roger Rhoades"},{"location":"appendix/2-about-the-authors/#sebastian-fichtner","text":"Founder of flowtoolz.com . App engineer and consultant. Started coding in 1995. Passionate about architecture ever since. Does original apps, open source and projects for various clients. Loves Apple platforms and the language Swift.","title":"Sebastian Fichtner"},{"location":"appendix/3-also-from-the-authors/","text":"Appendix C: Also From The Authors \u00b6 Communicating Software Architectures \u00b6 This practical guide shows how you can effectively apply the practical and well-proven arc42 template to design, develop and document your software architecture. {width=20%,float=inside} It contains more than 200 practical tips how to improve your architecture communication and documentation: immediately actionable tips arc42 for practical software development effective communication and documentation of software architectures arc42 to construct, design and implement new systems arc42 to document existing system arc42 for { large | medium | small } systems tools for arc42: wikis, asciidoc, modeling tools an others frequently asked questions around arc42 You find it on https://leanpub.com/arc42inpractice . arc42 by Example \u00b6 {width=20%,float=inside} It contains the (arc42-based) documentation of several practical, real-life software architectures: A large scale CRM system with incredibly flexible configuration options. An (open source) web-based system to track all kinds of biking activities. A chess engine, optimized for understandability. Supports the full FIDE chess rules. A small (open source) HTML semantic checker and some more... You find it on https://leanpub.com/arc42byexample .","title":"Appendix C: Also From The Authors"},{"location":"appendix/3-also-from-the-authors/#appendix-c-also-from-the-authors","text":"","title":"Appendix C: Also From The Authors"},{"location":"appendix/3-also-from-the-authors/#communicating-software-architectures","text":"This practical guide shows how you can effectively apply the practical and well-proven arc42 template to design, develop and document your software architecture. {width=20%,float=inside} It contains more than 200 practical tips how to improve your architecture communication and documentation: immediately actionable tips arc42 for practical software development effective communication and documentation of software architectures arc42 to construct, design and implement new systems arc42 to document existing system arc42 for { large | medium | small } systems tools for arc42: wikis, asciidoc, modeling tools an others frequently asked questions around arc42 You find it on https://leanpub.com/arc42inpractice .","title":"Communicating Software Architectures"},{"location":"appendix/3-also-from-the-authors/#arc42-by-example","text":"{width=20%,float=inside} It contains the (arc42-based) documentation of several practical, real-life software architectures: A large scale CRM system with incredibly flexible configuration options. An (open source) web-based system to track all kinds of biking activities. A chess engine, optimized for understandability. Supports the full FIDE chess rules. A small (open source) HTML semantic checker and some more... You find it on https://leanpub.com/arc42byexample .","title":"arc42 by Example"},{"location":"appendix/4-about-our-cause/","text":"Appendix C: About our Cause \u00b6 All royalties of this book are donated to the EFF. By paying for this book, you support their cause: \"The Electronic Frontier Foundation is the leading nonprofit organization defending civil liberties in the digital world. Founded in 1990, EFF champions user privacy, free expression, and innovation through impact litigation, policy analysis, grassroots activism, and technology development. We work to ensure that rights and freedoms are enhanced and protected as our use of technology grows. Even in the fledgling days of the Internet, EFF understood that protecting access to developing technology was central to advancing freedom for all. In the years that followed, EFF used our fiercely independent voice to clear the way for open source software, encryption, security research, file sharing tools, and a world of emerging technologies. Today, EFF uses the unique expertise of leading technologists, activists, and attorneys in our efforts to defend free speech online, fight illegal surveillance, advocate for users and innovators, and support freedom-enhancing technologies. Together, we forged a vast network of concerned members and partner organizations spanning the globe. EFF advises policymakers and educates the press and the public through comprehensive analysis, educational guides, activist workshops, and more. EFF empowers hundreds of thousands of individuals through our Action Center and has become a leading voice in online rights debates. EFF is a donor-funded US 501(c)(3) nonprofit organization that depends on your support to continue fighting for users.\" (Quote from eff.org/about )","title":"Appendix C: About our Cause"},{"location":"appendix/4-about-our-cause/#appendix-c-about-our-cause","text":"All royalties of this book are donated to the EFF. By paying for this book, you support their cause: \"The Electronic Frontier Foundation is the leading nonprofit organization defending civil liberties in the digital world. Founded in 1990, EFF champions user privacy, free expression, and innovation through impact litigation, policy analysis, grassroots activism, and technology development. We work to ensure that rights and freedoms are enhanced and protected as our use of technology grows. Even in the fledgling days of the Internet, EFF understood that protecting access to developing technology was central to advancing freedom for all. In the years that followed, EFF used our fiercely independent voice to clear the way for open source software, encryption, security research, file sharing tools, and a world of emerging technologies. Today, EFF uses the unique expertise of leading technologists, activists, and attorneys in our efforts to defend free speech online, fight illegal surveillance, advocate for users and innovators, and support freedom-enhancing technologies. Together, we forged a vast network of concerned members and partner organizations spanning the globe. EFF advises policymakers and educates the press and the public through comprehensive analysis, educational guides, activist workshops, and more. EFF empowers hundreds of thousands of individuals through our Action Center and has become a leading voice in online rights debates. EFF is a donor-funded US 501(c)(3) nonprofit organization that depends on your support to continue fighting for users.\" (Quote from eff.org/about )","title":"Appendix C: About our Cause"},{"location":"generated-dont-edit/gen-terms-EN/","text":"Abstraction {#term-abstraction} \u00b6 The process of removing details to focus attention on aspects of greater importance. Similar in nature to the process of generalization. A view of an element that focuses on the information relevant to a particular purpose, ignoring additional or other information. A design construct as in \"Building blocks should depend on abstractions rather than on implementations.\" Category: Design-Principle Abstractness {#term-abstractness} \u00b6 Metric for the source code of object oriented systems: The number of abstract types (interfaces and abstract classes) divided by the total number of types. Category: Metric Accessibility Quality Attribute {#term-accessibility-quality-attribute} \u00b6 Degree to which a product or system can be used by people with the widest range of characteristics and capabilities to achieve a specified goal in a specified context of use. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010 Accountability Quality Attribute {#term-accountability-quality-attribute} \u00b6 Degree to which the actions of an entity can be traced uniquely to the entity. Is a sub-characteristic of: security . Refer to ISO 25010 website. Category: Quality, ISO 25010 Accreditation {#term-accreditation} \u00b6 Determination procedure and certification by an authorised accreditation body (here the iSAQB^(R)^) confirming that the applicant meets the organizational, technical and qualitative requirements as a training provider . Accreditation Body {#term-accreditation-body} \u00b6 The application for accreditation must be submitted through the accreditation body designated by the iSAQB. The accreditation body is the contact point for all questions of the training provider during the accreditation . It coordinates the accreditation procedure, carries out the formal assessment of the documents submitted and organises the technical assessment in the AUDIT WORKING GROUP . Accredited Training Provider {#term-accredited-training-provider} \u00b6 Training Provider with valid accreditation issued by the iSAQB(R). ACL {#term-acl} \u00b6 Access Control Lists control authorization of a principal to access a specific entity . An ACL attached to an entity lists principals along with their access permissions. Many file systems - among them Windows and POSIX file systems - support ACLs to control access. Since ACLs don't scale well on a large base it is common to model access control based on roles ( RBAC ). Category: Security Acyclic Dependencies Principle {#term-acyclic-dependencies-principle} \u00b6 A fundamental principle for designing the structure of software systems (also see Package Principles ). It demands that there be no cycles in the dependence graph of a system, which is also a necessity for hierarchical decomposition . Avoiding dependence cycles is essential for low coupling and maintainability , as all components in a dependence cycle effectively (even if indirectly) depend on each other, which makes it hard to understand, change or replace any part of the cycle in isolation (also see Lilienthal-2019 ). Although Robert C. Martin ( Martin-2003 ) expressed it in terms of large components of object-oriented software, the ADP is a universal principle. It goes back (at least) to one of the origins of software architecture, the classic 1972 paper \"On the Criteria To Be Used in Decomposing Systems into Modules\" ( Parnas-1972 ), which concludes that hierarchical structure along with \"clean\" decomposition are desirable properties of any system. It can be argued that a dependence cycle, even before considering its various practical problems, is logically already as flawed as a circular argument or circular definition . As a structural contradiction, a cycle can neither be an appropriate nor meaningful model of the inherent nature and purpose of a system. And this conceptual divergence alone virtually guarantees for (unpredictable) problems to arise, which is exactly what a principled approach guards against. Category: Design-Principle Adaptability Quality Attribute {#term-adaptability-quality-attribute} \u00b6 Degree to which a product or system can effectively and efficiently be adapted for different or evolving hardware, software or other operational or usage environments. Is a sub-characteristic of: portability . Refer to ISO 25010 website. Category: Quality, ISO 25010 Adapter {#term-adapter} \u00b6 The adapter is a design pattern that allows the interface of an existing component to be used from another interface. It is often used to make existing components cooperate with others without modifying their source code. Category: Design-Pattern, Foundation. Aggregate {#term-aggregate} \u00b6 Aggregate is a building block of Domain-Driven Design . Aggregates are complex object structures that are made of entities and value objects . Each aggregate has a root entity and is regarded as one unit when it comes to changes. An aggregate ensure consistency and integrity of its contained entities with invariants. Category: DDD Aggregation {#term-aggregation} \u00b6 A form of object composition in object-oriented programming. It differs from composition, as aggregation does not imply ownership. When the element is destroyed, the contained elements remain intact. Category: Foundation Analysability Quality Attribute {#term-analysability-quality-attribute} \u00b6 Degree of effectiveness and efficiency with which it is possible to assess the impact on a product or system of an intended change to one or more of its parts, or to diagnose a product for deficiencies or causes of failures, or to identify parts to be modified. Is a sub-characteristic of: maintainability . Refer to ISO 25010 website. Category: Quality, ISO 25010 Appropriateness {#term-appropriateness} \u00b6 (syn: adequacy) Suitability for a particular purpose. Appropriateness Recognizability Quality Attribute {#term-appropriateness-recognizability-quality-attribute} \u00b6 Degree to which users can recognize whether a product or system is appropriate for their needs. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010 arc42 {#term-arc42} \u00b6 Free template for communication and documentation of software architectures. arc42 consists of 12 (optional) parts or sections. See https://arc42.org for details. Category: Communication, Documentation Architecture \u00b6 See Software Architecture Category: ISO-IEC-IEEE-42010 Architectural (Architecture) Pattern {#term-architecture-pattern} \u00b6 \u201cAn architectural pattern expresses a fundamental structural organization schema for software systems. It provides a set of predefined sub-systems, specifies their responsibilities, and includes rules and guidelines for organizing the relationships between them\u201d (Buschmann+1996, page 12). Similar to architecture style . Examples include: Layers Pipes-and-Filter Microservices CQRS Architectural Decision {#term-architectural-decision} \u00b6 Decision, which has an sustainable or essential effect on the architecture. Example: Decision about database technology or technical basics of the user interface. Following ISO/IEC/IEEE 42010 an architectural decision pertain to system concerns. However, there is often no simple mapping between the two. A decision can affect the architecture in several ways. These can be reflected in the architecture description (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 Architectural Tactic {#term-architectural-tactic} \u00b6 A technique, strategy, approach or decision helping to achieve one or several quality requirements. The term was coined by Bass+2012 . Category: Foundation Architecture Description {#term-architecture-description} \u00b6 Work product used to express an architecture (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 Architecture Description Element {#term-architecture-description-element} \u00b6 An architecture description element is any construct in an architecture description. architecture description elements are the most primitive constructs discussed in ISO/IEC/IEEE 42010. All terms defined in ISO/IEC/IEEE 42010 are a specialization of the concept of an architecture description element (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 Architecture Description Language {#term-architecture-description-language} \u00b6 An architecture description language (ADL) is any form of expression for use in architecture descriptions (as defined in ISO/IEC/IEEE 42010). Examples are Rapide, Wright, SysML, ArchiMate and the viewpoint languages of RM-ODP [ISO 10746]. Category: ISO-IEC-IEEE-42010 Architecture Evaluation {#term-architecture-evaluation} \u00b6 Quantitative or qualitative assessment of a (software or system) architecture. Determine if an architecture can achieve its target qualities or quality attributes See Assessment D> ###### Comment (Gernot Starke) D> In my opinion the terms architecture analysis or architecture assessment are more appropriate, as evaluation contains value , implying numerical assessment or metrics, which is usually only part of what you should do in architecture analysis. D> Architecture Framework {#term-architecture-framework} \u00b6 Conventions, principles and practices for the description of architectures established within a specific domain of application and/or community of stakeholders (as defined in ISO/IEC/IEEE 42010). Examples are: Generalised Enterprise Reference Architecture and Methodologies (GERAM) [ISO 15704] is an architecture framework. Reference Model of Open Distributed Processing (RM-ODP) [ISO/IEC 10746] is an architecture framework. Category: ISO-IEC-IEEE-42010 Architecture Goal {#term-architecture-goal} \u00b6 (syn: Architectural quality goal, Architectural quality requirement): A quality attribute that the system needs to achieve and the quality attribute is understood to be an architectural issue. Hence, the architecture needs to be designed in a way to fulfill this architectural goal. These goals often have long term character in contrast to (short term) project goals. Category: Foundation Architecture Model {#term-architecture-model} \u00b6 An architecture view is composed of one or more architecture models. An architecture model uses modelling conventions appropriate to the concerns to be addressed. These conventions are specified by the model kind governing that model. Within an architecture description, an architecture model can be a part of more than one architecture view (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 Architecture Objective {#term-architecture-objective} \u00b6 See architecture goal . Architecture Quality Requirement {#term-architecture-quality-requirement} \u00b6 See architecture goal . Architecture Rationale {#term-architecture-rational} \u00b6 Architecture rationale records explanation, justification or reasoning about architecture decisions that have been made. The rationale for a decision can include the basis for a decision, alternatives and trade-offs considered, potential consequences of the decision and citations to sources of additional information (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 Architecture Style {#term-architecture-style} \u00b6 Description of element and relation types, together with constraints on how they can be used. Often called architecture pattern . Examples: Pipes-and-Filter, Model-View-Controller, Layers. D> ###### Comment (Alexander Lorz) D> Depending on who you ask, some might consider architecture styles a generalization of architecture patterns. D> That is, \"distributed system\" is a style while \"client-server, CQRS, broker and peer-to-peer\" are more specific patterns that belong to this style. D> However, from a practical point of view this distinction is not essential. Architecture View {#term-architecture-view} \u00b6 A representation of a system from a specific perspective. Important and well-known views are: Context view , Building block view Runtime view Deployment view [Bass+2012] and [Rozanski+11] extensively discuss this concept. Following ISO/IEC/IEEE 42010, an architecture view is a work product expressing the architecture of a system from the perspective of specific system concerns (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 Architecture Viewpoint {#term-architecture-viewpoint} \u00b6 Work product establishing the conventions for the construction, interpretation and use of architecture views to frame specific system concerns (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 Artifact {#term-artifact} \u00b6 Tangible by-product created or generated during development of software. Examples of artifacts are use cases, all kinds of diagrams, UML models, requirements and design documents, source code, test cases, class-files, archives. Assessment {#term-assessment} \u00b6 See also Evaluation . Gathering information about status, risks or vulnerabilities of a system. Assessment might concerning potentially all aspects (development, organization, architecture, code etc.) Beurteilung \u00b6 Siehe auch Bewertung . Zusammenstellung von Informationen \u00fcber Status, Risiken oder Schw\u00e4chen eines Systems. Die Beurteilung kann potenziell alle Aspekte (Entwicklung, Organisation, Architektur, Code usw.) betreffen. \u00b9\u2075 https://en.wikipedia.org/w/index.php?title=Asset_(computer_security)&oldid=694606042 Asset {#term-asset} \u00b6 \"In information security, computer security and network security an Asset is any data, device, or other component of the environment that supports information-related activities. Assets generally include hardware (e.g. servers and switches), software (e.g. mission critical applications and support systems) and confidential information\" (quoted from Wikipedia ) Category: Security Association {#term-association} \u00b6 Defines a relationship between objects (in general: between components). Each association can be described in detail by cardinalities and (role-)names. See coupling , dependency and relationship Category: Foundation Asymmetric Cryptography {#term-asymmetric-cryptography} \u00b6 Asymmetric cryptography algorithms are designed that the key which is used for encryption is different from the key used for decryption. The key for encryption is called \"public-key\" the key for decryption is called \"private-key\". The public key can be published and used by anyone to encrypt information only readable by the party owning the private-key for decryption. See Schneier, Public-Key Algorithms, page 17 . Asymmetric cryptography is fundamental for PKI and digital signatures. Category: Security ATAM {#term-atam} \u00b6 Architecture Tradeoff Analysis Method . Qualitative architecture evaluation method, based upon a (hierarchical) quality tree and concrete quality scenarios. Basic idea: Compare fine-grained quality scenarios (\"quality-requirements\") with the corresponding architectural approaches to identify risks and trade-offs. Attack Tree {#term-attack-tree} \u00b6 Formal way to describe different approaches of an attacker to reach certain goals. The tree is usally structured with the attack goal on top and different approaches as child nodes. Each approach is likely to have dependencies which are again listed as child nodes. The possibiliy of a certain way to attack an IT-system can be analyzed by assigning additional attributes to each node. Examples could be the estimated costs of an attack or if an attack approach is possible or not by referencing countermeasures. See Bruce Schneier on \"Modeling security threats\" . Category: Security Audit Working Group: {#term-audit-working-group} \u00b6 The audit working group is responsible for the technical evaluation of training materials as well as for the monitoring and evaluation of training courses. The members of the audit working group, authorized by the iSAQB(R), are independent of the training provider . The result of the assessments (the respective accreditation recommendation of the AUDIT WORKING GROUP) will be communicated to the training provider by the accreditation body . Authentication {#term-authentication} \u00b6 Authentication is the process of confirming the claim of an identity by a given entity. Usually this is done by verifying at least one of the authentication factors which is known by the system: knowledge (e.g. password) ownership (e.g. security token) inherence (e.g. biometrics) For a stronger authentication multiple factors can be requested or at least factors of two categories. Category: Security Authenticity Quality Attribute {#term-authenticity-quality-attribute} \u00b6 Degree to which the identity of a subject or resource can be proved to be the one claimed. Is a sub-characteristic of: security . Refer to ISO 25010 website. Category: Quality, ISO 25010 Authorization {#term-authorization} \u00b6 \"Authorization or authorisation is the function of specifying access rights to resources related to information security and computer security in general and to access control in particular. More formally, \"to authorize\" is to define an access policy.\" (quoted from Wikipedia ) Category: Security Availability {#term-availability} \u00b6 One of the basic Security Goals describing a system that can provide desired information when its needed. From a security perspective for example denial-of-service-attacks may prevent availability. Category: Security Availability Quality Attribute {#term-availability-quality-attribute} \u00b6 Degree to which a system, product or component is operational and accessible when required for use. Is a sub-characteristic of: reliability . Refer to ISO 25010 website. Category: Quality, ISO 25010, Security Black Box {#term-blackbox} \u00b6 View on a building block (or component ) that hides the internal structure. Blackboxes respect the information hiding principle . They shall have clearly defined input- and output interfaces plus a precisely formulated responsibility or objective . Optionally a blackbox defines some quality attributes, for example timing behavior, throughput or security aspects. Category: Foundation Bottom-Up Approach {#term-bottom-up} \u00b6 Direction of work (or strategy of processing) for modeling and design. Starting with something detailed or concrete, working towards something more general or abstract. \"In a bottom-up approach the individual base elements of the system are first specified in great detail. These elements are then linked together to form larger subsystems.\" (quote from Wikipedia ) Bounded Context {#term-bounded-context} \u00b6 Bounded Context is principle of the strategy design of Domain-Driven Design . \"A bounded context explicitly defines the context within which a domain model for a software system applies. Ideally, it would be preferable to have a single, unified model for all software systems in the same domain. While this is a noble goal, in reality it typically fragments into multiple models. It is useful to recognize this fact of life and work with it.\" (quote from Wikipedia) \"Multiple domain models are in play on any large project. Yet when code based on distinct models is combined, software becomes buggy, unreliable, and difficult to understand. Communication among team members becomes confusing. It is often unclear in what context a model should not be applied. Therefore: Explicitly set boundaries in terms of team organization, usage within specific parts of the application, and physical manifestations such as code bases and database schemas. Keep the model strictly consistent within these bounds, but don\u2019t be distracted or confused by issues outside.\" (quote from Wikipedia) Category: DDD Bridge {#term-bridge} \u00b6 Design pattern in which an abstraction is decoupled from its implementation, so that the two can vary independently. In case you find that incomprehensible (as most people) - have a look here Category: Design-Pattern Broker {#term-broker} \u00b6 An architecture pattern used to structure distributed software systems with decoupled components that interact by (usually remote) service invocations. A broker is responsible for coordinating communication, such as forwarding requests, as well as for transmitting results and exceptions. Category: Architecture-Pattern Building Block {#term-building-block} \u00b6 General or abstract term for all kinds of artifacts from which software is constructed. Part of the statical structure ( Building Block View ) of software architecture. Building blocks can be hierarchically structured - they may contain other (smaller) building blocks. Some examples of alternative (concrete) names for building blocks: Component, module, package, namespace, class, file, program, subsystem, function, configuration, data-definition. Building Block View {#term-building-block-view} \u00b6 Shows the statical structure of the system, how its source code is organized. Usually a hierarchical manner, starting from the context view . Complemented by one or several runtime scenarios . Business Architecture {#term-business-architecture} \u00b6 A blueprint of the enterprise that provides a common understanding of the organization and is used to align strategic objectives and tactical demands. C4 Model {#term-c4-model} \u00b6 The C4 Model for Software Architecture Documentation was developed by Simon Brown. It consists of a hierarchical set of software architecture diagrams for context, containers, components, and code. The hierarchy of the C4 diagrams provides different levels of abstraction, each of which is relevant to a different audience. CA {#term-ca} \u00b6 A C ertificate Authority issues digital certificates to a given subject in a PKI . Usually there is a trust established to this authority which results in the same trust level to the issued certificates. An example is the widely used TLS-PKI where every browser includes the root-certificates of a defined list of CAs. These CAs then check the identity of a given internet domain owner and digitally sign his certificate for the use with TLS . Category: Security Capacity Quality Attribute {#term-capacity-quality-attribute} \u00b6 Degree to which the maximum limits of a product or system parameter meet requirements. Is a sub-characteristic of: performance efficiency . Refer to ISO 25010 website. Category: Quality, ISO 25010 Cardinality {#term-cardinality} \u00b6 Describes the quantitative rating of an association or relationship. It specifies the number of participants (objects, instances, modules etc) of the association. Certification Program {#term-certification-program} \u00b6 The iSAQB(R) CPSA(R) certification program, including its organizational components, documents (training documents, contracts) and processes. The copyrighted abbreviation and term CPSA(R) means Certified Professional for Software Architecture . CIA Triad {#term-cia-triad} \u00b6 See Security Goals Category: Security Cloud {#term-cloud} \u00b6 \"Cloud computing is a model for enabling ubiquitous, convenient, on-demand network access to a shared pool of configurable computing resources (e.g., networks, servers, storage, applications, and services) that can be rapidly provisioned and released with minimal management effort or service provider interaction.\" Definition quoted from NIST (National Institute of Standards and Technology). The NIST definition contains the following five characteristics (quoted but abbreviated from the aforementioned NIST source too): On-demand self service: A consumer can unilaterally provision computing capabilities, such as server time and network storage, without requiring human interaction with each service provider. Broad network access: Capabilities are available over the network and accessed through standard mechanisms that promote use by heterogeneous client platforms. Resource pooling: The provider\u2019s computing resources are pooled to serve multiple consumers using a multi-tenant model, with different physical and virtual resources dynamically assigned and reassigned according to consumer demand. There is location independence in that the customer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction (e.g., country, state, or datacenter). Examples of resources include storage, processing, memory, and network bandwidth. Rapid elasticity: Capabilities can be elastically provisioned and released, in some cases automatically, to scale rapidly commensurate with demand. To the consumer, the capabilities available for provisioning often appear to be unlimited and can be appropriated in any quantity at any time. Measured service: Cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service (e.g., storage, processing, bandwidth, and active user accounts). Resource usage can be monitored, controlled, and reported, providing transparency for both the provider and consumer of the utilized service. Co-Existence Quality Attribute {#term-co-existence-quality-attribute} \u00b6 Degree to which a product can perform its required functions efficiently while sharing a common environment and resources with other products, without detrimental impact on any other product. Is a sub-characteristic of: compatibility . Refer to ISO 25010 website. Category: Quality, ISO 25010 Cohesion {#term-cohesion} \u00b6 The degree to which elements of a building block, component or module belong together is called cohesion . It measures the strength of relationship between pieces of functionality within a given component. In cohesive systems, functionality is strongly related. It is usually characterized as high cohesion or low cohesion . Strive for high cohesion, because high cohesion often implies reusability, low coupling and understandability. Command {#term-command} \u00b6 Design pattern in which an object is used to encapsulate an action. This action might be invoked or executed at a later time. Common Closure Principle {#term-common-closure-principle} \u00b6 A fundamental principle for designing the structure of software systems (also see Package Principles ). It directly and explicitly restates the Single Responsibility Principle for larger components. The subcomponents of a component should ideally have the exact same reasons to change. A change request that effects one of them should effect all of them, but it should not effect anything else outside their enclosing component. Thereby, each expected change request would effect a minimal number of components. Or put another way: Each component would be closed to a maximum number of expected change requests. The term expected here signifies a few important implications: The inherent concepts/responsibilities of a system run deeper than a surface-level description of its behaviour. The deeper concepts/responsibilities of a system are not entirely objective but can be modeled in different ways. Determining the concepts/responsibilities of a system is not just passive describing but also active strategizing . This principle leads to highly cohesive components. It also implies loosely coupled components because related concepts that do change together do get bundled up in the same component. When each single concept is expressed by a single component, there are no unnecessary couplings between components. Category: Design-Principle Common Reuse Principle {#term-common-reuse-principle} \u00b6 A fundamental principle for designing the structure of software systems (also see Package Principles ). The subcomponents (classes) of a component should be exactly the ones that are being (re)used together. Or the other way around: Components that are being (re)used together should be packaged into a larger component. This also implies that subcomponents that are not frequently used in conjunction with the other subcomponents should not be in the respective component. This perspective helps in deciding what belongs into a component and what doesn't. It aims at a system decomposition of loosely coupled and highly cohesive components. This obviously echoes the Single Responsibility Principle . It also echoes the Interface Segregation Principle , as it ensures that clients aren't forced to depend on concepts they don't care about. Category: Design-Principle Compatibility Quality Attribute {#term-compatibility-quality-attribute} \u00b6 Degree to which a product, system or component can exchange information with other products, systems or components, and/or perform its required functions, while sharing the same hardware or software environment. Is composed of the following sub-characteristics: co-existence , interoperabilty . Refer to ISO 25010 website. Category: Quality, ISO 25010 Complexity {#term-complexity} \u00b6 \"Complexity is generally used to characterize something with many parts where those parts interact with each other in multiple ways.\" (quoted from Wikipedia.) Essential complexity is the core of the problem we have to solve, and it consists of the parts of the software that are legitimately difficult problems. Most software problems contain some complexity. Accidental complexity is all the stuff that doesn\u2019t necessarily relate directly to the solution, but that we have to deal with anyway. (quoted from Mark Needham ) Architects shall strive to reduce accidental complexity. Component {#term-component} \u00b6 See Building block . Structural element of an architecture. Composition {#term-composition} \u00b6 Combine simpler elements (e.g. functions, data types, building blocks) to build more complicated, powerful or more responsible ones. In UML: When the owning element is destroyed, so are the contained elements. Concept {#term-concept} \u00b6 Plan, principle(s) or rule(s) how to solve a specific problem. Concepts are often cross-cutting in a sense that multiple architectural elements might be affected by a single concept. That means that implementors of e.g. implementation units (building blocks) should adhere to the corresponding concept. Concepts form the basis for conceptual integrity . Conceptual Integrity {#term-conceptual-integrity} \u00b6 Concepts, rules, patterns and similar solution approaches are applied in a consistent (homogeneous, similar) way throughout the system. Similar problems are solved in similar or identical ways. Concern {#term-concern} \u00b6 \"A concern about an architecture is a requirement, an objective, a constraint, an intention, or an aspiration a stakeholder has for that architecture.\" (quoted from [Rozanski+11], chapter 8) Following ISO/IEC/IEEE 42010 a concern is defined as (system) interest in a system relevant to one or more of its stakeholders (as defined in ISO/IEC/IEEE 42010). Note, a concern pertains to any influence on a system in its environment, including developmental, technological, business, operational, organizational, political, economic, legal, regulatory, ecological and social influences. Category: ISO-IEC-IEEE-42010 Confidentiality {#term-confidentiality} \u00b6 One of the basic Security Goals describing a system to disclose and make information only available to authorized parties. Category: Security Confidentiality Quality Attribute {#term-confidentiality-quality-attribute} \u00b6 Degree to which a product or system ensures that data are accessible only to those authorized to have access. Is a sub-characteristic of: security . Refer to ISO 25010 website. Category: Quality, ISO 25010 Consistency {#term-consistency} \u00b6 A consistent systems does not contain contradictions. Identical problems are solved with identical (or at least similar) approaches. Degree, to which data and their relations comply to validation rules. Clients (of a database) get identical results for identical queries (e.g. Monotonic-Read-Consistency, Montonic-Write-Consistency, Read-Your-Writes-Consistency etc.) With respect to behavior: Degree, to which a system behaves coherent, replicable and reasonable. Constraint {#term-constraint} \u00b6 A restriction on the degree of freedom you have in creating, designing, implementing or otherwise providing a solution. Constraints are often global requirements , such as limited development resources or a decision by senior management that restricts the way you plan, design, develop or operate a system. Based upon a definition from Scott Ambler Context (of a System) {#term-context} \u00b6 \"Defines the relationships, dependencies, and interactions between the system and its environment: People, systems, and external entities with which it interacts.\" (quoted from Rozanski-Woods ) Another definition from arc42: \"System scope and context - as the name suggests - delimits your system (i.e. your scope) from all its communication partners (neighboring systems and users, i.e. the context of your system). It thereby specifies the external interfaces.\" (quoted from docs.arc42.org ) Distinguish between business and technical context: The business context (formerly called logical context) shows the external relationships from a business- or non-technical perspective. It abstracts from technical, hardware or implementation details. Input-/Output relationships are named by their business meaning instead of their technical properties. The technical context shows technical details, like transmission channel, technical protocoll, IP-address, bus or similar hardware details. Embedded systems, for example, often care for hardware-related information very early in development. Context View {#term-context-view} \u00b6 Shows the complete system as one blackbox within its environment, either from a business perspective ( business context ) or from a technical or deployment perspective ( technical context ). The context view (or context diagram) shows the boundary between a system and its environment, showing the entities in its environment (its neighbors) with which it interacts. Neighbors can either be other software, hardware (like sensors), humans, user-roles or even organizations using the system. See Context . Correspondence {#term-correspondence} \u00b6 A correspondence defines a relation between architectural description elements. Correspondences are used to express architecture relations of interest within an architecture description (or between architecture descriptions) (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 Correspondence Rule {#term-correspondence-rule} \u00b6 Correspondences can be governed by correspondence rules. Correspondence rules are used to enforce relations within an architecture description (or between architecture descriptions) (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 Synonym: Integrity , homogeneity, conceptual integrity. Coupling {#term-coupling} \u00b6 Coupling is the kind and degree of interdependence between building blocks of software; a measure of how closely connected two components are. You should always aim for low coupling. Coupling is usually contrasted with cohesion . Low coupling often correlates with high cohesion, and vice versa. Low coupling is often a sign of a well-structured system. When combined with high cohesion, it supports understandability and maintainability. Kopplung \u00b6 Kopplung ist die Art und der Grad der Interdependenz zwischen Software-Bausteinen; ein Ma\u00df daf\u00fcr, wie eng zwei Komponenten verbunden sind.\\ Ziel sollte immer eine lose Kopplung sein. Kopplung steht in der Regel im Gegensatz zu Koh\u00e4sion . Lose Kopplung korreliert h\u00e4ufig mit starker Koh\u00e4sion. Lose Kopplung ist oft ein Zeichen f\u00fcr ein gut strukturiertes System. Zusammen mit starker Koh\u00e4sion unterst\u00fctzt sie Verst\u00e4ndlichkeit und Wartbarkeit. CPSA(R) {#term-cpsa} \u00b6 Certified Professional for Software Architecture(R) \u2013 the common name for different levels of certification issued by the iSAQB . The most common known certifications are the foundation level (CPSA-F) and the advanced level (CPSA-A). CQRS {#term-cqrs} \u00b6 (command query responsibility segregation): Separate the elements manipulating ( command ) data from those just reading ( query ). This separation enables different optimization strategies for reading and writing data (for example, it's much easier to cache data that's read-only than to cache data that's also altered.) There's an interesting eBook by Mark Nijhof on this subject. Cross-Cutting Concept {#term-cross-cutting-concept} \u00b6 See concept . Synonym: principle, rule. Cross-Cutting Concern {#term-cross-cutting-concern} \u00b6 Functionality of the architecture or system that affects several elements. Examples of such concerns are logging, transactions, security, exception handling, caching etc. Often these concerns will be addressed in systems via concepts . Curriculum {#term-curriculum} \u00b6 The learning process provided by a school (here: iSAQB as the institution governing software architecture education). It includes the content of courses (the syllabus), the methods employed, and other aspects, like norms and values, which relate to the way the education including certification and examination is organized. Cyclomatic Complexity {#term-cyclomatic-complexity} \u00b6 Quantitative measure, number of independent paths through a program's source code. It roughly correlates to the number of conditional statements ( if , while ) in the code +1. A linear sequence of statements without if or while has the cyclomatic complexity of 1. Many software engineers believe that higher complexity correlates to the number of defects. Category: Metric. Decomposition {#term-decomposition} \u00b6 (syn: factoring) Breaking or dividing a complex system or problem into several smaller parts that are easier to understand, implement or maintain. Dependency {#term-dependency} \u00b6 See coupling . Dependency Injection (DI) {#term-dependency-injection} \u00b6 Instead of having your objects or a factory creating a dependency, you pass the needed dependencies to the constructor or via property setters. You therefore make the creation of specific dependencies somebody else's problem . Dependency Inversion Principle {#term-dependency-inversion} \u00b6 High level (abstract) elements should not depend upon low level (specific) elements. \"Details should depend upon abstractions\" ( Martin-2003 ). One of the SOLID principles , nicely explained by Brett Schuchert , and closely related to the SDP and SAP . Deployment {#term-deployment} \u00b6 Bring software onto its execution environment (hardware, processor etc). Put software into operation. Deployment View {#term-deployment-view} \u00b6 Architectural view showing the technical infrastructure where a system or artifacts will be deployed and executed. \"This view defines the physical environment in which the system is intended to run, including the hardware environment your system needs (e.g., processing nodes, network interconnections, and disk storage facilities), the technical environment requirements for each node (or node type) in the system, and the mapping of your software elements to the runtime environment that will execute them.\" (as defined by Rozanski+2011 ) Design Pattern {#term-design-pattern} \u00b6 General or generic reusable solution to a commonly occurring problem within a given context in design. Initially conceived by the famous architect Christopher Alexander , the concept of design patterns was taken up by software engineers. In our opinion, every serious software developer should know at least some patterns from the pioneering Gang-of-Four book by Erich Gamma ( Gamma+1994 ) and his three allies. Design Principle {#term-design-principle} \u00b6 Set of guidelines that helps software developers to design and implement better solutions, where \"better\" could, for example, mean one or more of the following: low coupling . high cohesion . separation of concerns or adherence to the Single Responsibility Principle . adherence to the Information Hiding principle. avoid Rigidity : A system or element is difficult to change because every change potentially affects many other elements. avoid Fragility : When elements are changed, unexpected results, defects or otherwise negative consequences occur at other elements. avoid Immobility : An element is difficult to reuse because it cannot be disentagled from the rest of the system. Design Rationale {#term-design-rationale} \u00b6 An explicit documentation of the reasons behind decisions made when designing any architectural element. Document {#term-document} \u00b6 A (usually written) artifact conveying information. Documentation {#term-documentation} \u00b6 A systematically ordered collection of documents and other material of any kind that makes usage or evaluation easier. Examples for \"other material\": presentation, video, audio, web page, image, etc. Documentation Build {#term-documentation-build} \u00b6 Automatic build process that collects artifacts into a consistent documentation. Domain Model {#term-domain-model} \u00b6 The domain model is a concept of Domain-Driven Design . I provides a system of abstractions that describes selected aspects of a domain and can be used to solve problems related to that domain. Domain-Driven Design (DDD) {#term-DDD} \u00b6 \"Domain-driven design (DDD) is an approach to developing software for complex needs by deeply connecting the implementation to an evolving model of the core business concepts.\" (quoted from DDDCommunity ). See Evans-2004 . See also: Entity Value Object Aggregate Service Factory Repository Ubiquitous Language Drawing Tool {#term-drawing-tool} \u00b6 A tool to create drawings that can be used in architecture documentation. Example: Visio, OmniGraffle, PowerPoint, etc. Drawing tools treat each drawing as a separate thing, this causes maintenance overhead when updating an element of the architecture that is shown in several diagrams (as opposed to a Modeling Tool ). Economicalness {#term-economicalness} \u00b6 Being economical, simple, lean or achievable with relatively low effort. Embedded System {#term-embedded-systems} \u00b6 System embedded within a larger mechanical or electrical system. Embedded systems often have real-time computing constraints. Typical properties of embedded systems are low power consumption, limited memory and processing resources, small size. Encapsulation {#term-encapsulation} \u00b6 Encapsulation has two slightly distinct notions, and sometimes to the combination thereof: restricting access to some of the object's components bundling of data with the methods or functions operating on that data Encapsulation is a mechanism for information hiding . Enterprise IT Architecture {#term-enterprise-it-architecture} \u00b6 Synonym: Enterprise Architecture. Structures and concepts for the IT support of an entire company. Atomic subject matters of the enterprise architecture are single software systems also referred to as \"applications\". Entity {#term-entity} \u00b6 Category: DDD Entity is a building block of Domain-Driven Design . An entity is a core object of a business domain with unchangeable identity and a clearly defined lifecycle. Entities map their state to value objects and are almost always persistent. Entropy {#term-entropy} \u00b6 In information theory defined as \"amount of information\" a message has or \"unpredictability of information content\". The entropy of a cryptosystem is measured by the size of the keyspace. Larger keyspaces have an increased entropy and if not flawed by the algorithm itself, harder to break than smaller ones. For secure cryptographic operations it is mandatory to not only use random values as input, they should have also a high entropy. The creation of high entropy on a computer system is non-trivial and can affect the performance of a system. See 11.1 Information Theory of Schneier-1996 and Whitewood Inc. on \"Understanding and Managing Entropy\" or SANS \"Randomness and Entropy - An Introduction\" . Category: Security Environment {#term-environment} \u00b6 (System) Context determining the setting and circumstances of all influences upon a system (as defined in ISO/IEC/IEEE 42010). Note, the environment of a system includes developmental, technological, business, operational, organizational, political, economic, legal, regulatory, ecological and social influences. Category: ISO-IEC-IEEE-42010 Facade {#term-facade} \u00b6 Structural design pattern. A Facade offers a simplified interface to a complex or complicated building block (the provider ) without any modifications to the provider. Factory {#term-factory} \u00b6 (Design pattern) In class-based or object-oriented programming, the factory method pattern is a creational design pattern that uses factory methods or factory components for creating objects, without having to specify the exact class of the object that will be created. In Domain-Driven Design : A factory encapsulates the creation of aggregates , entities , and value objects . Factories work exclusively in the domain and have no access to technical building blocks (e.g. a database). Fault Tolerance Quality Attribute {#term-fault-tolerance-quality-attribute} \u00b6 Degree to which a system, product or component operates as intended despite the presence of hardware or software faults. Is a sub-characteristic of: reliability . Refer to ISO 25010 website. Category: Quality, ISO 25010 Filter {#term-filter} \u00b6 Part of the pipe-and-filter architectural style that creates or transforms data. Filters are typically executed independently from other filters. Fitness Function {#term-fitness-function} \u00b6 \"An architectural fitness function provides an objective integrity assessment of some architectural characteristics.\" ( Ford+2017 ). A fitness function is derived from manual evaluations and automated tests and shows to which extent architectural or quality requirements are met. Function Signature {#term-function-signature} \u00b6 (Synonym: type or method signature) defines input and output of functions or methods. A signature can include: parameters and their types return value and type exception thrown or errors raised Functional Appropriateness Quality Attribute {#term-functional-appropriateness-quality-attribute} \u00b6 Degree to which the functions facilitate the accomplishment of specified tasks and objectives. Is a sub-characteristic of: functional suitability . Refer to ISO 25010 website. Category: Quality, ISO 25010 Functional Completeness Quality Attribute {#term-functional-completeness-quality-attribute} \u00b6 Degree to which the set of functions covers all the specified tasks and user objectives. Is a sub-characteristic of: functional suitability . Refer to ISO 25010 website. Category: Quality, ISO 25010 Functional Correctness Quality Attribute {#term-functional-correctness-quality-attribute} \u00b6 Degree to which a product or system provides the correct results with the needed degree of precision. Is a sub-characteristic of: functional suitability . Refer to ISO 25010 website. Category: Quality, ISO 25010 Functional Suitability Quality Attribute {#term-functional-suitability-quality-attribute} \u00b6 Degree to which a product or system provides functions that meet stated and implied needs when used under specified conditions. Is composed of the following sub-characteristics: functional completeness , functional correctness , functional appropriateness . Refer to ISO 25010 website. Category: Quality, ISO 25010 Fundamental Modeling Concepts (FMC) {#term-fmc} \u00b6 Fundamental Modeling Concepts is a graphical notation for modeling and documenting software systems. From their website: \"FMC provide a framework for the comprehensive description of software-intensive systems. It is based on a precise terminology and supported by a graphical notation which can be easily understood\". Gateway {#term-gateway} \u00b6 A (design or architecture) pattern: An element of that encapsulates access to a (usually external) system or resource. See also wrapper , adapter . Global Analysis {#term-global-analysis} \u00b6 Systematic approach to achieve desired quality attributes. Developed and documented by Christine Hofmeister (Siemens Corporate Research). Global analysis is described in [Hofmeister+2000]. Heterogeneous Architectural Style {#term-heterogeneous-architectural-style} \u00b6 see hybrid architecture style . Heuristic {#term-heuristic} \u00b6 Informal rule, rule-of-thumb. Any way of problem solving not guaranteed to be optimal, but somehow sufficient. Examples from Object-Oriented Design or User Interface Design . Hybrid Architecture Style {#term-hybrid-architecture-style} \u00b6 Combination of two or more existing architecture styles or patterns. For example, an MVC construct embedded in a layer structure. IEEE-1471 {#term-ieee-1471} \u00b6 Standard Recommended Practice for Architectural Description of Software-Intensive Systems , defined as ISO/IEC 42010:2007. Defines a (abstract) framework for the description of software architectures. Incremental Development {#term-incremental-development} \u00b6 see iterative and incremental development . Information Hiding {#term-information-hiding} \u00b6 A fundamental principle in software design: Keep those design or implementation decisions hidden that are likely to change, thus protecting other parts of the system from modification if these decisions or implementations are changed. Is one important attributes of blackboxes . Separates interface from implementation. The term encapsulation is often used interchangeably with information hiding. Installability Quality Attribute {#term-installability-quality-attribute} \u00b6 Degree of effectiveness and efficiency with which a product or system can be successfully installed and/or uninstalled in a specified environment. Is a sub-characteristic of: portability . Refer to ISO 25010 website. Category: Quality, ISO 25010 Integrity {#term-integrity} \u00b6 Various meanings: Category: Security One of the basic Security Goals which means maintaining and assuring accuracy and completeness of data. Usually this is achieved by the usage of cryptographic algorithms to create a digital signature. Category: Foundation Data or behavioral integrity: Degree to which clients (of a database) get identical results for identical queries (e.g. Monotonic-Read-Consistency, Montonic-Write-Consistency, Read-Your-Writes-Consistency etc.) Degree, to which a system behaves coherent, replicable and reasonable. See also consistency . Integrity Quality Attribute {#term-integrity-quality-attribute} \u00b6 Degree to which a system, product or component prevents unauthorized access to, or modification of, computer programs or data. Is a sub-characteristic of: security . Refer to ISO 25010 website. Category: Quality, ISO 25010, Security Interface {#term-interface} \u00b6 Multiple meanings, depending on context: Boundary across which two building blocks interact or communicate with each other. Design construct that provides an abstraction of the behavior of concrete components, declares possible interactions with these components and constraints for these interactions. An example for the second meaning is the programming language construct from the object-oriented language Java(tm): Interface Segregation Principle (ISP) {#term-interface-segregation-principle} \u00b6 Building blocks (classes, components) should not be forced to depend on methods they don't use. ISP splits larger interfaces into smaller and more (client) specific ones so that clients will only need to know about methods that they actually use. Interoperability Quality Attribute {#term-interoperability-quality-attribute} \u00b6 Degree to which two or more systems, products or components can exchange information and use the information that has been exchanged. Is a sub-characteristic of: compatibility . Refer to ISO 25010 website. Category: Quality, ISO 25010 iSAQB {#term-isaqb} \u00b6 international Software Architecture Qualification Board \u2013 an internationally active organization fostering the development of software architecture education. See also the discussion in the appendix . ISO 25010 {#term-iso-25010} \u00b6 Standards to describe (and evaluate) software product quality . \"The quality model determines which quality characteristics will be taken into account when evaluating the properties of a software product.\" (quote from the ISO website ) For a list of quality attributes defined by the ISO 25010 standard, refer to ISO 25010 ISO 9126 {#term-iso-9126} \u00b6 (Deprecated) standard to describe (and evaluate) software product quality . Has been superseded by ISO 25010 , see below. Iterative and Incremental Development {#term-iterative-and-incremental-development} \u00b6 Combination of iterative and incremental approaches for software development. These are essential parts of the various agile development approaches, e.g. Scrum and XP. Iterative Development {#term-iterative-development} \u00b6 \"Development approach that cycles through development phases, from gathering requirements to delivering functionality in a working release.\" (quoted from c2-wiki ) Such cycles are repeated to improve either functionality, quality or both. Contrast to the Waterfall Development . Kerckhoffs' Principle {#term-kerckhoffs-principle} \u00b6 One of the six cryptographic axioms described 1883 in an article \"La cryptographie militaire\" by the dutch cryptographer and linguist Auguste Kerckhoffs. This axiom is still relevant today and therefore refered to as \"Kerckhoffs' Principle\". It describes that a cryptographic method must not need to be kept secret in order to achive the security of the encrypted messages. \"The enemy knows the system\" is another expression coined by the mathematician Claude Shannon as Shannon's Maxim. See Bruce Schneiers Crypto-Gram, May 15, 2002 Category: Security Latency {#term-latency} \u00b6 Latency is the time delay between the cause and the effect of some change in a system. In computer networks, latency describes the time it takes for an amount of data ( packet ) to get from one specific location to another. In interactive systems, latency is the time interval between some input to the system and the audio-visual response. Often a delay exists, often caused by network delays. Layer {#term-layer} \u00b6 Grouping of building blocks or components that (together) offer a cohesive set of services to other layers. Layers are related to each other by the ordered relation allowed to use . Learnability Quality Attribute {#term-learnability-quality-attribute} \u00b6 Degree to which a product or system can be used by specified users to achieve specified goals of learning to use the product or system with effectiveness, efficiency, freedom from risk and satisfaction in a specified context of use. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010 Liskov Substitution Principle {#term-liskov-substitution-principle} \u00b6 Refers to object oriented programming: If you use inheritance, do it right: Instances of derived types (subclasses) must be completely substitutable for their base types. If code uses a base class, these references can be replaced with any instance of a derived class without affecting the functionality of that code. Maintainability Quality Attribute {#term-maintainability-quality-attribute} \u00b6 Degree of effectiveness and efficiency with which a product or system can be modified to improve it, correct it or adapt it to changes in environment, and in requirements. Is composed of the following sub-characteristics: modularity , reusability , analysability , modifiability , testability . Refer to ISO 25010 website. Category: Quality, ISO 25010 Maturity Quality Attribute {#term-maturity-quality-attribute} \u00b6 Degree to which a system, product or component meets needs for reliability under normal operation. Is a sub-characteristic of: reliability . Refer to ISO 25010 website. Category: Quality, ISO 25010 MFA {#term-MFA} \u00b6 For Multi-Factor-Authentication see Authentication . Category: Security Microservice {#term-microservice} \u00b6 An architectural style, proposing to divide large systems into small units. \"Microservices have to be implemented as virtual machines, as more light-weight alternatives such as Docker containers or as individual processes. Thereby they can easily be brought into production individually.\" (quoted from the (free) LeanPub booklet on Microservices by Eberhard Wolff ) Model Driven Architecture (MDA) {#term-model-driven-architecture} \u00b6 Model Driven Architecture (MDA) is an OMG-Standard for model based software development. Definition: \"An approach to IT system specification that separates the specification of functionality from the specification of the implementation of that functionality on a specific technology platform.\" Model Kind {#term-model-kind} \u00b6 Conventions for a type of modeling (as defined in ISO/IEC/IEEE 42010). Note, examples of model kinds include data flow diagrams, class diagrams, Petri nets, balance sheets, organization charts and state transition models. Category: ISO-IEC-IEEE-42010 Model-Driven Software Development (MDSD) {#term-model-driven-software-development} \u00b6 The underlying idea is to generate code from more abstract models of requirements or the domain. Model-View-Controller {#term-model-view-controller} \u00b6 Architecture pattern, often used to implement user interfaces. It divides a system into three interconnected parts (model, view and controller) to separate the following responsibilities: Model manages data and logic of the system. The \"truth\" that will be shown or displayed by one or many views. Model does not know (depend on) its views. View can be any number of (arbitrary) output representation of (model) information. Multiple views of the same model are possible. Controller accepts (user) input and converts those to commands for the model or view. Modeling Tool {#term-modeling-tool} \u00b6 A tool that creates models (e.g. UML or BPMN models). Can be used to create consistent diagrams for documentation because it has the advantage that each model element exists only once but can be consistently displayed in many diagrams (as opposed to a mere Drawing Tool ). Modifiability Quality Attribute {#term-modifiability-quality-attribute} \u00b6 Degree to which a product or system can be effectively and efficiently modified without introducing defects or degrading existing product quality. Is a sub-characteristic of: maintainability . Refer to ISO 25010 website. Category: Quality, ISO 25010 Modular Programming {#term-modular-programming} \u00b6 \"Software design technique that separates the functionality of a program into independent, interchangeable modules , so that each module contains everything necessary to execute only one aspect of the desired functionality. Modules have interfaces expressing the elements provided and required by the module. The elements defined in the interface are detectable by other modules.\" (quoted from Wikipedia ) Modularity Quality Attribute {#term-modularity-quality-attribute} \u00b6 Degree to which a system or computer program is composed of discrete components such that a change to one component has minimal impact on other components. Is a sub-characteristic of: maintainability . Refer to ISO 25010 website. Category: Quality, ISO 25010 Module {#term-module} \u00b6 (see also Modular programming ) structural element or building block, usually regarded as a black box with a clearly defined responsibility. It encapsulates data and code and provides public interfaces, so clients can access its functionality. This meaning has first been described in a groundbreaking and fundamental paper from David L. Parnas: On the Criteria to be Used in Decomposing Software into Modules In several programming languages, module is a construct for aggregating smaller programming units, e.g. in Python. In other languages (like Java), modules are called packages . The CPSA(R)-Advanced Level is currently divided into several modules, which can be learned or taught separately and in any order. The exact relationships between these modules and the contents of these modules are defined in the respective curricula. Node (in UML) {#term-node-uml} \u00b6 A processing resource (execution environment, processor, machine, virtual machine, application server) where artifacts can be deployed and executed. Node (Node.js) {#term-node-js} \u00b6 In modern web development: Short form for the open source JavaScript runtime Node.js\u00ae , which is built on Chrome's V8 JavaScript engine. Node.js is famous for its an event-driven, non-blocking I/O model and its vast ecosystem of supporting libraries. Non Functional Requirement (NFR) {#term-non-functional-requirement} \u00b6 Requirements that constrain the solution . Nonfunctional requirements are also known as quality attribute requirements or quality requirements . The term NFR is actually misleading, as many of the attributes involved directly relate to specific system functions (so modern requirements engineering likes to call these things required constraints ). Non-repudiation Quality Attribute {#term-non-repudiation-quality-attribute} \u00b6 Degree to which actions or events can be proven to have taken place, so that the events or actions cannot be repudiated later. Is a sub-characteristic of: security . Refer to ISO 25010 website. Category: Quality, ISO 25010 Notation {#term-notation} \u00b6 A system of marks, signs, figures, or characters that is used to represent information. Examples: prose, table, bullet point list, numbered list, UML, BPMN. Observer {#term-observer} \u00b6 (Design pattern) \"... in which an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods.\" (quoted from Wikipedia ) The Observer pattern is a key pattern to complement the model\u2013view\u2013controller (MVC) architectural pattern. Open-Close-Principle (OCP) {#term-open-close-principle} \u00b6 \"Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification\" (Bertrand Meyer, 1998). In plain words: To add functionality (extension) to a system, you should not need to modify existing code. Part of Robin Martins \"SOLID\" principles for object-oriented systems. Can be implemented in object oriented languages by interface inheritance, in a more general way as plugins . Operability Quality Attribute {#term-operability-quality-attribute} \u00b6 Degree to which a product or system has attributes that make it easy to operate and control. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010 OWASP {#term-owasp} \u00b6 The Open Web Application Security Project is a worldwide non-profit online organization founded 2001 for improving the security of software. It is a rich source for information and best practices in the field of web security. See https://www.owasp.org/ . The OWASP-Top-10 is a frequently referenced list of attack categories based on the projects data survey. Category: Security Package Principles {#term-package-principles} \u00b6 Fundamental principles for designing the structure of software systems ( Martin-2003 ): Reuse/Release Equivalence Principle (REP) Common Reuse Principle (CRP) Common Closure Principle (CCP) Acyclic Dependencies Principle (ADP) Stable Dependencies Principle (SDP) Stable Abstractions Principle (SAP) Robert C. Martin, who coined the \" SOLID \" acronym, also introduced the Package Principles and frequently reiterated both in conjunction. Whereas the SOLID Principles target the level of classes, the Package Principles target the level of larger components that contain multiple classes and might get deployed independently. Package- and SOLID Principles share the explicit goal of keeping software maintainable and avoiding the symptoms of degraded design: rigidity, fragility, immobility, and viscosity. While Martin expressed the Package Principles in terms of large-scale components, they apply at other scales as well. Their core are universal principles like low coupling, high cohesion, single responsibility, hierarchical (acyclic) decomposition, and the insight that meaningful dependencies go from specific/unstable concepts to more abstract/stable ones (which echoes the DIP ). Category: Design-Principle Pattern {#term-pattern} \u00b6 A reusable or repeatable solution to a common problem in software design or architecture. See architecture pattern or design pattern . Perfect Forward Secrecy {#term-perfect-forward-secrecy} \u00b6 Property of a cryptographic protocol were an attacker can't gain any information about short-term session keys by compromising long-term keys. Examples for protocols with perfect forward secrecy are TLS and OTR. If this feature is enabled for TLS and an attacker gains access to a servers private key, previously recorded communication sessions can still not be decrypted. Category: Security Performance Efficiency Quality Attribute {#term-performance-efficiency-quality-attribute} \u00b6 Performance relative to the amount of resources used under stated conditions. Resources can include other software products, the software and hardware configuration of the system, and materials (e.g. print paper, storage media). Is composed of the following sub-characteristics: time behaviour , resource utilization , capacity . Refer to ISO 25010 website. Category: Quality, ISO 25010 Perspective {#term-perspective} \u00b6 A perspective is used to consider a set of related quality properties and concerns of a system. Architects apply perspectives iteratively to the system's architectural views in order to assess the effects of architectural design decisions across multiple viewpoints and architectural views . Rozanski+11 associates with the term perspective also activities, tactics, and guidelines that must be considered if a system should provide a set of related quality properties and suggests the following perspectives: Accessibility Availability and Resilience Development Resource Evolution Internationalization Location Performance and Scalability Regulation Security Usability Pikachu {#term-pikachu} \u00b6 A yellowish mouse-like character from the (quite famous) Pok\u00e9mon world . Actually, you don't need to know that. But it does not hurt either - and you might impress your kids with this knowledge... Pipe {#term-pipe} \u00b6 Connector in the pipes-and-filters architectural style that transfers streams or chunks of data from the output of one filter to the input of another filter without modifying values or order of data. PKI {#term-pki} \u00b6 Short for Public-Key-Infrastructure . A concept of managing digital certificates usually involving asymmetric cryptography . The term \"public\" refers most of the time to the used type of cryptographic key and not necessarily to infrastructure open to a public audience. To prevent semantic confusion the terms \"open PKI\" or \"closed PKI\" can be used, see Anderson, Chapter 21.4.5.7 PKI, page 672 . PKI is usually based on a CA or a Web-of-Trust . Category: Security Port {#term-port} \u00b6 UML construct, used in component diagrams. An interface, defining a point of interaction of a component with its environment. Portability Quality Attribute {#term-portability-quality-attribute} \u00b6 Degree of effectiveness and efficiency with which a system, product or component can be transferred from one hardware, software or other operational or usage environment to another. Is composed of the following sub-characteristics: adaptability , installability , replaceability . Refer to ISO 25010 website. Category: Quality, ISO 25010 POSA {#term-posa} \u00b6 Pattern-oriented Software Architecture. Series of books on software architecture patterns. Principal {#term-principal} \u00b6 Principals in a security context are entities which have been authenticated and can be assigned permissions to. A principal can be a user but for example also other services or a process running on a system. The term is used in the Java environment and throughout different authentication protocols (see GSSAPI RFC2744 or Kerberos RFC4121 ). Category: Security Proxy {#term-proxy} \u00b6 (Design pattern) \"A wrapper or agent object that is being called by the client to access the real serving object behind the scenes. Use of the proxy can simply be forwarding to the real object, or can provide additional logic. In the proxy extra functionality can be provided, for example caching when operations on the real object are resource intensive, or checking preconditions before operations on the real object are invoked. For the client, usage of a proxy object is similar to using the real object, because both implement the same interface.\" (quoted from Wikipedia ) Pseudo-Randomness {#term-pseudo-randomness} \u00b6 Often used in conjunction with pseudo-random-number-generators. Gathering randomness with a high entropy is resource intensive and usually not required by many applications, cryptography left aside. To address this issue pseudo-random-generators are initialized with a seed of data and create random values based on this seed. The data will be generated by random, but will always be the same if the generator is initialized with an identical seed. This is called pseudo-randomness and is less performance intensive. Category: Security Qualitative Evaluation {#term-qualitative-evaluation} \u00b6 Finding risks concerning the desired quality attributes of a system. Analyzing or assessing if a system or its architecture can meet the desired or required quality goals. Instead of calculating or measuring certain characteristics of systems or architectures, qualitative evaluation is concerned with risks, trade-offs and sensitivity points. See also assessment . Quality {#term-quality} \u00b6 see software quality and quality attributes . Quality Attribute {#term-quality-attribute} \u00b6 Software quality is the degree to which a system possesses the desired combination of attributes (see: software quality ). The Standard ISO-25010 defines the following quality attributes: Functional suitability Functional completeness Functional correctness Functional appropriateness Performance efficiency Time behaviour Resource utilization Capacity Compatibility Co-existence Interoperability Usability Appropriateness recognizability Learnability Operability User error protection User interface aesthetics Accessibility Reliability Availability Fault tolerance Recoverability Security Confidentiality Integrity Non-repudiation Accountability Authenticity Maintainability Modularity Reusability Analysability Modifiability Testability Portability Adaptability Installability Replaceability It's helpful to distinguish between: runtime quality attributes (which can be observed at execution time of the system), non-runtime quality attributes_ (which cannot be observed as the system executes) and business quality attributes (cost, schedule, marketability, appropriateness for organization) Examples of runtime quality attributes are functional suitability, performance efficiency, security, reliability, usability and interoperability. Examples of non-runtime quality attributes are modifiability, portability, reusability, integratability, and testability. Quality Characteristic {#term-quality-characteristic} \u00b6 synonym: quality attribute . Quality Model {#term-quality-model} \u00b6 (from ISO 25010) A model that defines quality characteristics that relate to static properties of software and dynamic properties of the computer system and software products. The quality model provides consistent terminology for specifying, measuring and evaluating system and software product quality. The scope of application of the quality models includes supporting specification and evaluation of software and software-intensive computer systems from different perspectives by those associated with their acquisition, requirements, development, use, evaluation, support, maintenance, quality assurance and control, and audit. Quality Requirement {#term-quality-requirement} \u00b6 Characteristic or attribute of a component of a system. Examples include runtime performance, safety, security, reliability or maintainability. See also software quality . Quality Tree {#term-quality-tree} \u00b6 (syn: quality attribute utility tree). A hierarchical model to describe product quality: The root \"quality\" is hierarchically refined in areas or topics, which itself are refined again. Quality scenarios form the leaves of this tree. Standards for product quality, like ISO 25010 , propose generic quality trees. The quality of a specific system can be described by a specific quality tree (see the example below). {width=60%} Quantitative Evaluation {#term-quantative-evaluation} \u00b6 (syn: quantative analysis): Measure or count values of software artifacts, e.g. coupling , cyclomatic complexity, size, test coverage. Metrics like these can help to identify critical parts or elements of systems. Randomness {#term-randomness} \u00b6 See Entropy or Pseudo-Randomness . Category: Security Rationale {#term-rationale} \u00b6 Explanation of the reasoning or arguments that lie behind an architecture decision. RBAC (Role Based Access Control) {#term-rbac} \u00b6 A role is a fixed set of permissions usually assigned to a group of principals . This allows a Role-Based-Access-Control usually to be implemented more efficient than an ACL based system and makes for example deputy arrangements possible. Category: Security Recoverability Quality Attribute {#term-recoverability-quality-attribute} \u00b6 Degree to which, in the event of an interruption or a failure, a product or system can recover the data directly affected and re-establish the desired state of the system. Is a sub-characteristic of: reliability . Refer to ISO 25010 website. Category: Quality, ISO 25010 Redesign {#term-redesign} \u00b6 The alteration of software units in such a way that they fulfill a similar purpose as before, but in a different manner and possibly by different means. Often mistakenly called refactoring. Refactoring {#term-refactoring} \u00b6 A term denoting the improvement of software units by changing their internal structure without changing the behavior. (see \u201cRefactoring is the process of changing a software system in such a way that it does not alter the external behavior of the code yet improves the internal structure.\u201d Refactoring, Martin Fowler, 1999 Not to be confused with re design Registry {#term-registry} \u00b6 \"A well-known object that other objects can use to find common objects and services.\" (quoted from PoEAA ). Often implemented as a Singleton (also a well-known design pattern.) Relationship {#term-relationship} \u00b6 Generic term denoting some kind of dependency between elements of an architecture. Different types of relationship are used within architectures, e.g. call, notification, ownership, containment, creation or inheritance. Reliability Quality Attribute {#term-reliability-quality-attribute} \u00b6 Degree to which a system, product or component performs specified functions under specified conditions for a specified period of time. Is composed of the following sub-characteristics: maturity , availability , fault tolerance , recoverability . Refer to ISO 25010 website. Category: Quality, ISO 25010 Replaceability Quality Attribute {#term-replaceability-quality-attribute} \u00b6 Degree to which a product can replace another specified software product for the same purpose in the same environment. Is a sub-characteristic of: portability . Refer to ISO 25010 website. Category: Quality, ISO 25010 Repository {#term-repository} \u00b6 In architecture documentation: A place where artifacts are stored before an automatic build process collects them into one consistent document. In Domain-Driven Design : Repository is a building block of Domain-Driven Design . A repository hides technical details of the infrastructure layer to the domain layer. Repositories return entities that are persisted in the database. Resource Utilization Quality Attribute {#term-resource-utilization-quality-attribute} \u00b6 Degree to which the amounts and types of resources used by a product or system, when performing its functions, meet requirements. Is a sub-characteristic of: performance efficiency . Refer to ISO 25010 website. Category: Quality, ISO 25010 Reusability Quality Attribute {#term-reusability-quality-attribute} \u00b6 Degree to which an asset can be used in more than one system, or in building other assets. Is a sub-characteristic of: maintainability . Refer to ISO 25010 website. Category: Quality, ISO 25010 Reuse/Release Equivalence Principle {#term-reuse-release-equivalence-principle} \u00b6 A fundamental principle for designing the structure of software systems (also see Package Principles ). It demands that large components are \"released\" and under version control, in particular if the system uses them from multiple points. Even if we don't release them publicly, we should extract such components from the system and provide them through an external dependency manager with proper version control. The REP contains two different insights: On the large scale, modularity and low coupling require more than type separation. Reusability of components (even if all \"reuse\" is internal) translates to overall maintainability . Category: Design-Principle Risk {#term-risk} \u00b6 Simply said, a risk is the possibility that a problem occurs. A risk involves uncertainty about the effects, consequences or implications of an activity or decision, usually with a negative connotation concerning a certain value (such as health, money, or qualities of a system like availability or security). RM/ODP {#term-rm-odp} \u00b6 The Reference Model for Open Distributed Processing is an (abstract) metamodel for documentation of information systems. Defined in ISO/IEC 10746. Round-trip Engineering {#term-round-trip-engineering} \u00b6 \"Concept of being able to make any kind of change to a model as well as to the code generated from that model. The changes always propagate bidirectional and both artifacts are always consistent.\" (quoted from Wikipedia ) D> ###### Comment (Gernot Starke) D> In my personal opinion, it does not work in practical situations, only in hello-world-like scenarios, as the inverse abstraction (from low-level sourcecode to higher-level architectural elements) usually involves design-decisions and cannot realistically be automated. D> D> ###### Comment (Matthias Bohlen) D>Recently I have seen code that originated from DDD where reverse engineering did indeed work. Ruby {#term-ruby} \u00b6 A wonderful programming language. Category: Programming Runtime View {#term-runtime-view} \u00b6 Shows the cooperation or collaboration of building blocks (respectively their instances) at runtime in concrete scenarios. Should refer to elements of the Building Block View . Could for example (but doesn't need to) be expressed in UML sequence or activity diagrams. S.O.L.I.D. principles {#term-solid-principles} \u00b6 SOLID (single responsibility, open-closed, Liskov substitution, interface segregation and dependency inversion) is an acronym for some principles (named by Robert C. Martin ) to improve object-oriented programming and design. The principles make it more likely that a developer will write code that is easy to maintain and extend over time. For some additional sources, see Martin-SOLID . Scenario {#term-scenario} \u00b6 Quality scenarios document required quality attributes. They \"... are brief narratives of expected or anticipated use of a system from both development and end-user viewpoints.\" ( Kazman+1996 ) Thus, they help to describe required or desired qualities of a system in pragmatic and informal manner, yet making the abstract notion of \u201cquality\u201d concrete and tangible. {width=50%} Event/stimulus: Any condition or event arriving at the system System (or part of the system) is stimulated by the event. Response: The activity undertaken after the arrival of the stimulus. Metric (response measure): The response should be measurable in some fashion. Usually scenarios are differentiated into: Usage scenarios (application scenarios) Change scenarios (modification or growth scenarios) Failure scenarios (boundary, stress, or exploratory scenarios) SDL {#term-sdl} \u00b6 A Secure-Development-Lifecycle is a companies usual software development process with additional practices of engineering secure software. This involves for example code reviews, architectural risk analyses, black/whitebox and penetration testing and many more additions. The whole lifecycle of an application should be covered by the SDL, beginning with the first requirements engineering tasks and ending with feedback from operating the released software by fixing security issues. See McGraw \"An Enterprise Software Security Program\", page 239 . Category: Security Security Goals {#term-security-goals} \u00b6 The goals are the key point of information security. They are a basic set of information attributes which can be fulfilled or not depending on a systems architecture and processes. The most common agreed set of security goals is the so called \"CIA triad\": Confidentiality Integrity Availability The \"Reference Model of Information Assuarance and Security\" (RIMAS) extends this list by Accountability, Auditability, Authenticity/Trustworthiness, Non-repudiation and Privacy. These are typical examples for non-functional requirements related to security. See \"What is Security Engineering - Definitions\", page 11 or RMIAS . Category: Security Security Quality Attribute {#term-security-quality-attribute} \u00b6 Degree to which a product or system protects information and data so that persons or other products or systems have the degree of data access appropriate to their types and levels of authorization. Is composed of the following sub-characteristics: confidentiality , integrity , non-repudiation , accountability , authenticity . Refer to ISO 25010 website. Category: Quality, ISO 25010 Self Contained System (SCS) {#term-self-contained-system} \u00b6 An architectural style, similar to Microservices . To quote from the site scs-architecture.org : \"The Self-contained System (SCS) approach is an architecture that focuses on a separation of the functionality into many independent systems, making the complete system a collaboration of many smaller software systems. This avoids the problem of large monoliths that grow constantly and eventually become unmaintainable\" Sensitivity Point {#term-sensitivity-point} \u00b6 (in qualitative evaluation like ATAM): Element of the architecture or system influencing several quality attributes. For example, if one component is responsible for both runtime performance and robustness, that component is a sensitivity point. Casually said, if you mess up a sensitivity point, you will most often have more than one problem. Separation of Concerns (SoC) {#term-separation-of-concern} \u00b6 Any element of an architecture should have exclusivity and singularity of responsibility and purpose: No element should share the responsibilities of another element or contain unrelated responsibilities. Another definition is \"breaking down a system into elements that overlap as little as possible.\" Famous Edgar Dijkstra said in 1974: \u201cSeparation of concerns ... even if not perfectly possible, is the only available technique for effective ordering of one\u2019s thoughts\u201d. Similar to the Single Responsibility Principle . Sequence Diagram {#term-sequence-diagram} \u00b6 Type of diagram to illustrate how elements of an architecture interact to achieve a certain scenario. It shows the sequence (flow) of messages between elements. As parallel vertical lines it shows the lifespan of objects or components, horizontal lines depict interactions between these components. See the following example. Service {#term-service} \u00b6 t.b.d. Service (DDD) {#term-service-ddd} \u00b6 Service is a building block of Domain-Driven Design . Services implement logic or processes of the business domain that are not executed by entities alone. A service is stateless and the parameters and return values of its operations are entities , aggregates and value objects . Signature {#term-signature} \u00b6 Signature of function or method: See function signature Digital signature: Method for verifying the authenticity of data or documents. Single Responsibility Principle (SRP) {#term-single-responsibility-principle} \u00b6 Each element within a system or architecture should have a single responsibility, and that all its functions or services should be aligned with that responsibility. Cohesion is sometimes considered to be associated with the SRP. Singleton {#term-singleton} \u00b6 \"Design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system.\" (quoted from Wikipedia . Software Architecture {#term-software-architecture} \u00b6 There exist several (!) valid and plausible definitions of the term Software Architecture . The following definition has been proposed by the IEEE 1471 standard: A>Software Architecture: the fundamental organization of a system A>embodied in its components, their relationships to each A>other and to the environment and the principles guiding A>its design and evolution. The new standard ISO/IEC/IEEE 42010:2011 has adopted and revised the definition as follows: A>Architecture: (system) fundamental concepts or properties of a system A>in its environment embodied in its elements, relationships, and in A>the principles of its design and evolution. The key terms in this definition require some explanation: Components: Subsystems, modules, classes, functions or the more general term building blocks : structural elements of software: Components are usually implemented in a programming language, but can also be other artifacts that (together) make up the system . Relationships: Interfaces, dependencies, associations - different names for the same feature: Components need to interact with other components to enable separation of concerns . Environment: Every system has some relationships to its environment: data, control flow or events are transferred to and from maybe different kinds of neighbours. Principles: Rules or conventions that hold for a system or several parts of it. Decision or definition, usually valid for several elements of the system. Often called concepts or even solution patterns . Principles (concepts) are the foundation for conceptual integrity . The Software Engineering Institure maintains a collection of further definitions Although the term often refers to the software architecture of an IT system , it is also used to refer to software architecture as an engineering science . Category: ISO-IEC-IEEE-42010 Software Quality {#term-software-quality} \u00b6 (from IEEE Standard 1061): Software quality is the degree to which software possesses a desired combination of attributes. This desired combination of attributes need to be clearly defined; otherwise, assessment of quality is left to intuition. (from ISO/IEC Standard 25010): The quality of a system is the degree to which the system satisfies the stated and implied needs of its various stakeholders, and thus provides value. These stated and implied needs are represented in the ISO 25000 quality models that categorize product quality into characteristics, which in some cases are further subdivided into subcharacteristics. Stable Abstractions Principle {#term-stable-abstractions-principle} \u00b6 A fundamental principle for designing the structure of software systems (also see Package Principles ). It demands that the abstractness of components is proportional to their stability. The closely related SDP also explains the notion of stability in this context. We want components that represent abstract concepts and responsibilities to require little or no modification because many conceptually more specific (concrete) components depend on them. And we want components that should or could not easily change to be at least abstract enough so we can extend them. This relates to the OCP . The SAP can sound like a circular argument until the underlying idea shines through: Concrete things and concepts are naturally more volatile, specific, arbitrary and numerous than abstract ones. The component structure of a system simply should reflect that. General logic, the system's physical artifacts as well as its functional and technical concepts should all be in congruence. The SAP is closely related to the SDP . Their combination amounts to a more general and arguably more profound version of the DIP : Specific concepts naturally depend on more abstract ones because they are composed or derived from more general-purpose building blocks. And dependent concepts are naturally more specific because they are defined by more information than their dependencies (assuming there are no dependence cycles ). Category: Design-Principle Stable Dependencies Principle {#term-stable-dependencies-principle} \u00b6 A fundamental principle for designing the structure of software systems (also see Package Principles ). It demands that frequently changing components depend on more stable ones. Part of the volatility of a component is expected and naturally implied by its particular responsibility. But stability in this context is also a function of incoming and outgoing dependencies. A component that is heavily depended on by others is harder to change and condsidered to be more stable. A component that heavily depends on others has more reasons to change and is considered to be less stable. So in regards to dependence, a component with many clients should not depend on one with many dependencies. A single component with both of these properties is also a red flag. Such a component has many reasons to change but is at the same time hard to change. Original definitions of the SDP (like Martin-2003 ) involve a metric I of instability . Unfortunately, that metric doesn't capture intended/inherent volatility, transitive dependence or cases like the red flag mentioned above. But we value the idea of the SDP regardless of how it can be measured. The SDP is closely related to the SAP . Their combination amounts to a version of the DIP (more on this under SAP ). Category: Design-Principle Stakeholder {#term-stakeholder} \u00b6 Person or organization that can be affected by or have in interest ( stake ) in a system, its development or execution. Examples include users, employees, owners, administrators, developers, designers, project- or product-managers, product-owner, project manager, requirements engineers, business-analysts, government agencies, enterprise architects etc. Following ISO/IEC/IEEE 42010 a stakeholder is a (system) individual, team, organization, or classes thereof, having an interest in a system (as defined in ISO/IEC/IEEE 42010). Such interest can be positive (e.g. stakeholder wants to benefit from the system), neutral (stakeholder has to test or verify the system) or negative (stakeholder is competing with the system or wants it to fail). Category: ISO-IEC-IEEE-42010 Structural Element {#term-structural-element} \u00b6 see [Building Block(#term-building-block) or Component Structure {#term-structure} \u00b6 An arrangement, order or organization of interrelated elements in a system. Structures consist of building blocks (structural elements) and their relationships (dependencies). Structures in software architecture are often used in architecture views , e.g. the building block view . A documentation template (e.g. arc42 ) is a kind of structure too. Symmetric Cryptography {#term-symmetric-cryptography} \u00b6 Symmetric cryptography is based on an identical key for encryption and decryption of data. Sender and receiver have to agree on a key for communication. See Schneier, Symmetric Algorithms, page 17 . Category: Security System {#term-system} \u00b6 Collection of elements (building blocks, components etc) organized for a common purpose. In ISO/IEC/IEEE Standards a couple of system definitions are available: systems as described in [ISO/IEC 15288]: \u201csystems that are man-made and may be configured with one or more of the following: hardware, software, data, humans, processes (e.g., processes for providing service to users), procedures (e.g. operator instructions), facilities, materials and naturally occurring entities\u201d. software products and services as described in [ISO/IEC 12207]. software-intensive systems as described in [IEEE Std 1471:2000]: \u201cany system where software contributes essential influences to the design, construction, deployment, and evolution of the system as a whole\u201d to encompass \u201cindividual applications, systems in the traditional sense, subsystems, systems of systems, product lines, product families, whole enterprises, and other aggregations of interest\u201d. Category: ISO-IEC-IEEE-42010 System-of-Interest {#term-system-of-interest} \u00b6 System-of-Interest (or simply, system) refers to the system whose architecture is under consideration in the preparation of an architecture description (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 Template (for Documentation) {#term-template} \u00b6 Standardized order of artifacts used in software development. It can help base other files, especially documents in a predefines structure without prescribing the content of these single files. A well known example of such templates is arc42 Temporal Coupling {#term-temporal-coupling} \u00b6 Different interpretations exist from various sources. Temporal coupling: means that processes that are communicating will both have to be up and running. See Tanenbaum+2016 . when you often commit ( modify ) different components at the same time. See Tornhill-2015 . when there's an implicit relationship between two, or more, members of a class requiring clients to invoke one member before the other. Mark Seemann, see https://blog.ploeh.dk/2011/05/24/DesignSmellTemporalCoupling/ means that one system needs to wait for the response of another system before it can continue processing. See https://www.beeworks.be/blog/2017/rest-antipattern.html Testability Quality Attribute {#term-testability-quality-attribute} \u00b6 Degree of effectiveness and efficiency with which test criteria can be established for a system, product or component and tests can be performed to determine whether those criteria have been met. Is a sub-characteristic of: maintainability . Refer to ISO 25010 website. Category: Quality, ISO 25010 Time Behaviour Quality Attribute {#term-time-behaviour-quality-attribute} \u00b6 Degree to which the response and processing times and throughput rates of a product or system, when performing its functions, meet requirements. Is a sub-characteristic of: performance efficiency . Refer to ISO 25010 website. Category: Quality, ISO 25010 TLS {#term-tls} \u00b6 T ransport- L ayer- S ecurity is a set of protocols to cryptographically secure the communication of two partys by the means of the CIA-triad . It is widely used for secure communication on the internet and the foundation for HTTPS. TLS started as an update to its predecessor SSL (Secure Socket Layer) Version 3.0 and should be used now instead of SSL see RFC7568 \"Deprecating Secure Sockets Layer Version 3.0\" . Category: Security TOGAF {#term-togaf} \u00b6 The Open Group Architecture Framework is a conceptual framework for planning and maintenance of enterprise IT architectures. Tools-and-material-approach {#term-tools-and-material-approach} \u00b6 t.b.d. Top-Down {#term-top-down} \u00b6 \"Direction of work\" or \"order of communication\": Starting from an abstract or general construct working towards more concrete, special or detailed representation. Traceability {#term-traceability} \u00b6 (more precisely: requirements traceability): Document that all requirements are addressed by elements of the system (forward traceability) and all elements of the system are justified by at least one requirement (backward traceability) My personal opinion: If you can, you should avoid traceabiltiy, as it creates a lot of documentation overhead. Trade-Off {#term-tradeoff} \u00b6 (syn: compromise). A balance achieved or negotiated between two desired or required but usually incompatible or contradicting features. For example, software development usually has to tradeoff memory consumption and runtime speed. More colloquially, if one thing increases, some other thing must decrease. Even more colloquially: There is no free lunch. Every quality attribute has a price among other quality attributes. Trainer {#term-trainer} \u00b6 A trainer is a person who conducts a training course himself, provided that this is carried out within the framework of a accreditation granted to an accredited training provider . Accordingly, accredited training providers may only organise and conduct CPSA training courses with accredited trainers. Only accredited training providers can apply for trainer accreditations . Training Level {#term-training-level} \u00b6 The iSAQB\u00ae CPSA education programme is divided into (currently) two Training Levels: Foundation Level and Advanced Level . The Training Levels should contain knowledge that builds upon one another. The exact relationships between each other and the contents of the Training Level are defined in the respective curricula ( syllabi ). Training Provider {#term-training-provider} \u00b6 An organisation or person who holds the rights of use to accredited training materials or who has purchased accreditation for training materials, provides trainers and infrastructure and conducts training courses. Ubiquitous Language {#term-ubiquitous-language} \u00b6 A concept of Domain-Driven Design : The ubiquitous language is a language that is structured around the domain model . It is used by all team members to connect all the activities of the team with the software. The ubiquitous language is a living thing that is evolving during a project and will be changed during the whole live cycle of the software. Unified Modeling Language (UML) {#term-uml} \u00b6 (UML) is a graphical language for visualizing, specifying and documenting the artifacts and structures of a software system. For building block views or the context view, use component diagrams, with either components, packages or classes to denote building blocks. For runtime views, use sequence- or activity diagrams (with swimlanes). Object diagrams can theoretically be used, but are practically not adviced, as they become cluttered even for small scenarios. For Deployment views, use deployment diagrams with node symbols. Unit Test {#term-unit-test} \u00b6 Test of the smallest testable parts of system to determine whether they are fit for use. Depending on implementation technology, a unit might be a method, function, interface or similar element. Usability Quality Attribute {#term-usability-quality-attribute} \u00b6 Degree to which a product or system can be used by specified users to achieve specified goals with effectiveness, efficiency and satisfaction in a specified context of use. Is composed of the following sub-characteristics: appropriateness recognizability , learnability , operability , user error protection , user interface aesthetics , accessibility . Refer to ISO 25010 website. Category: Quality, ISO 25010 User Error Protection Quality Attribute {#term-user-error-protection-quality-attribute} \u00b6 Degree to which a system protects users against making errors. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010 User Interface Aesthetics Quality Attribute {#term-user-interface-aesthetics-quality-attribute} \u00b6 Degree to which a user interface enables pleasing and satisfying interaction for the user. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010 Uses Relationship {#term-uses-relationship} \u00b6 Dependency that exists between two building blocks. If A uses B than execution of A depends on the presence of a correct implementation of B. Value Object {#term-value-object} \u00b6 Value Object is a building block of Domain-Driven Design . ValueObjects do not have a conceptual identity of their own and should be treated as immutable. They are used to describe the state of entities and may be composed of other value objects but never of entities . View {#term-view} \u00b6 see: architecture view Waterfall Development {#term-waterfall-development} \u00b6 Development approach \"where you gather all the requirements up front, do all necessary design, down to a detailed level, then hand the specs to the coders, who write the code; then you do testing (possibly with a side trip to IntegrationHell) and deliver the whole thing in one big end-all release. Everything is big including the risk of failure.\" (quoted from the C2 wiki ) Contrast to iterative development . Web of Trust {#term-web-of-trust} \u00b6 Since a single CA could be an easy target for an attacker the web of trust delegates the establishment of trust to the user. Each user decides which other users proof of identity he trusts, usually by verifying a fingerprint of a given key. This trust is expressed by signing the key of the other user who can then publish it with the additional signature. A third user can then verify this signature and decide to trust the identity or not. The email encryption PGP is an example for a PKI based on a web of trust. Category: Security White Box {#term-whitebox} \u00b6 Shows the internal structure of a system or building block, made up from blackboxes and the internal/external relationships and interfaces. See also Black Box . Workflow Management System (WFMS) {#term-workflow-management-system} \u00b6 Provides an infrastructure for the set-up, performance and monitoring of a defined sequence of tasks, arranged as a workflow. (quoted from Wikipedia) Wrapper {#term-wrapper} \u00b6 (syn: Decorator, Adapter, Gateway) Patterns to abstract away the concrete interface or implementation of a component. Attach additional responsibilities to an object dynamically. Depending on the sources, the semantics of the term wrapper may vary. D> ###### Comment (Gernot Starke) D> The tiny differences found in literature regarding this term often don't matter in real-life. Wrapping a component or building-block shall have a clear semantics within a single software system.","title":"gen terms EN"},{"location":"generated-dont-edit/gen-terms-EN/#abstraction-term-abstraction","text":"The process of removing details to focus attention on aspects of greater importance. Similar in nature to the process of generalization. A view of an element that focuses on the information relevant to a particular purpose, ignoring additional or other information. A design construct as in \"Building blocks should depend on abstractions rather than on implementations.\" Category: Design-Principle","title":"Abstraction {#term-abstraction}"},{"location":"generated-dont-edit/gen-terms-EN/#abstractness-term-abstractness","text":"Metric for the source code of object oriented systems: The number of abstract types (interfaces and abstract classes) divided by the total number of types. Category: Metric","title":"Abstractness {#term-abstractness}"},{"location":"generated-dont-edit/gen-terms-EN/#accessibility-quality-attribute-term-accessibility-quality-attribute","text":"Degree to which a product or system can be used by people with the widest range of characteristics and capabilities to achieve a specified goal in a specified context of use. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Accessibility Quality Attribute {#term-accessibility-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#accountability-quality-attribute-term-accountability-quality-attribute","text":"Degree to which the actions of an entity can be traced uniquely to the entity. Is a sub-characteristic of: security . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Accountability Quality Attribute {#term-accountability-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#accreditation-term-accreditation","text":"Determination procedure and certification by an authorised accreditation body (here the iSAQB^(R)^) confirming that the applicant meets the organizational, technical and qualitative requirements as a training provider .","title":"Accreditation {#term-accreditation}"},{"location":"generated-dont-edit/gen-terms-EN/#accreditation-body-term-accreditation-body","text":"The application for accreditation must be submitted through the accreditation body designated by the iSAQB. The accreditation body is the contact point for all questions of the training provider during the accreditation . It coordinates the accreditation procedure, carries out the formal assessment of the documents submitted and organises the technical assessment in the AUDIT WORKING GROUP .","title":"Accreditation Body {#term-accreditation-body}"},{"location":"generated-dont-edit/gen-terms-EN/#accredited-training-provider-term-accredited-training-provider","text":"Training Provider with valid accreditation issued by the iSAQB(R).","title":"Accredited Training Provider {#term-accredited-training-provider}"},{"location":"generated-dont-edit/gen-terms-EN/#acl-term-acl","text":"Access Control Lists control authorization of a principal to access a specific entity . An ACL attached to an entity lists principals along with their access permissions. Many file systems - among them Windows and POSIX file systems - support ACLs to control access. Since ACLs don't scale well on a large base it is common to model access control based on roles ( RBAC ). Category: Security","title":"ACL {#term-acl}"},{"location":"generated-dont-edit/gen-terms-EN/#acyclic-dependencies-principle-term-acyclic-dependencies-principle","text":"A fundamental principle for designing the structure of software systems (also see Package Principles ). It demands that there be no cycles in the dependence graph of a system, which is also a necessity for hierarchical decomposition . Avoiding dependence cycles is essential for low coupling and maintainability , as all components in a dependence cycle effectively (even if indirectly) depend on each other, which makes it hard to understand, change or replace any part of the cycle in isolation (also see Lilienthal-2019 ). Although Robert C. Martin ( Martin-2003 ) expressed it in terms of large components of object-oriented software, the ADP is a universal principle. It goes back (at least) to one of the origins of software architecture, the classic 1972 paper \"On the Criteria To Be Used in Decomposing Systems into Modules\" ( Parnas-1972 ), which concludes that hierarchical structure along with \"clean\" decomposition are desirable properties of any system. It can be argued that a dependence cycle, even before considering its various practical problems, is logically already as flawed as a circular argument or circular definition . As a structural contradiction, a cycle can neither be an appropriate nor meaningful model of the inherent nature and purpose of a system. And this conceptual divergence alone virtually guarantees for (unpredictable) problems to arise, which is exactly what a principled approach guards against. Category: Design-Principle","title":"Acyclic Dependencies Principle {#term-acyclic-dependencies-principle}"},{"location":"generated-dont-edit/gen-terms-EN/#adaptability-quality-attribute-term-adaptability-quality-attribute","text":"Degree to which a product or system can effectively and efficiently be adapted for different or evolving hardware, software or other operational or usage environments. Is a sub-characteristic of: portability . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Adaptability Quality Attribute {#term-adaptability-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#adapter-term-adapter","text":"The adapter is a design pattern that allows the interface of an existing component to be used from another interface. It is often used to make existing components cooperate with others without modifying their source code. Category: Design-Pattern, Foundation.","title":"Adapter {#term-adapter}"},{"location":"generated-dont-edit/gen-terms-EN/#aggregate-term-aggregate","text":"Aggregate is a building block of Domain-Driven Design . Aggregates are complex object structures that are made of entities and value objects . Each aggregate has a root entity and is regarded as one unit when it comes to changes. An aggregate ensure consistency and integrity of its contained entities with invariants. Category: DDD","title":"Aggregate {#term-aggregate}"},{"location":"generated-dont-edit/gen-terms-EN/#aggregation-term-aggregation","text":"A form of object composition in object-oriented programming. It differs from composition, as aggregation does not imply ownership. When the element is destroyed, the contained elements remain intact. Category: Foundation","title":"Aggregation {#term-aggregation}"},{"location":"generated-dont-edit/gen-terms-EN/#analysability-quality-attribute-term-analysability-quality-attribute","text":"Degree of effectiveness and efficiency with which it is possible to assess the impact on a product or system of an intended change to one or more of its parts, or to diagnose a product for deficiencies or causes of failures, or to identify parts to be modified. Is a sub-characteristic of: maintainability . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Analysability Quality Attribute {#term-analysability-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#appropriateness-term-appropriateness","text":"(syn: adequacy) Suitability for a particular purpose.","title":"Appropriateness {#term-appropriateness}"},{"location":"generated-dont-edit/gen-terms-EN/#appropriateness-recognizability-quality-attribute-term-appropriateness-recognizability-quality-attribute","text":"Degree to which users can recognize whether a product or system is appropriate for their needs. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Appropriateness Recognizability Quality Attribute {#term-appropriateness-recognizability-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#arc42-term-arc42","text":"Free template for communication and documentation of software architectures. arc42 consists of 12 (optional) parts or sections. See https://arc42.org for details. Category: Communication, Documentation","title":"arc42 {#term-arc42}"},{"location":"generated-dont-edit/gen-terms-EN/#architecture","text":"See Software Architecture Category: ISO-IEC-IEEE-42010","title":"Architecture"},{"location":"generated-dont-edit/gen-terms-EN/#architectural-architecture-pattern-term-architecture-pattern","text":"\u201cAn architectural pattern expresses a fundamental structural organization schema for software systems. It provides a set of predefined sub-systems, specifies their responsibilities, and includes rules and guidelines for organizing the relationships between them\u201d (Buschmann+1996, page 12). Similar to architecture style . Examples include: Layers Pipes-and-Filter Microservices CQRS","title":"Architectural (Architecture) Pattern {#term-architecture-pattern}"},{"location":"generated-dont-edit/gen-terms-EN/#architectural-decision-term-architectural-decision","text":"Decision, which has an sustainable or essential effect on the architecture. Example: Decision about database technology or technical basics of the user interface. Following ISO/IEC/IEEE 42010 an architectural decision pertain to system concerns. However, there is often no simple mapping between the two. A decision can affect the architecture in several ways. These can be reflected in the architecture description (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010","title":"Architectural Decision {#term-architectural-decision}"},{"location":"generated-dont-edit/gen-terms-EN/#architectural-tactic-term-architectural-tactic","text":"A technique, strategy, approach or decision helping to achieve one or several quality requirements. The term was coined by Bass+2012 . Category: Foundation","title":"Architectural Tactic {#term-architectural-tactic}"},{"location":"generated-dont-edit/gen-terms-EN/#architecture-description-term-architecture-description","text":"Work product used to express an architecture (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010","title":"Architecture Description {#term-architecture-description}"},{"location":"generated-dont-edit/gen-terms-EN/#architecture-description-element-term-architecture-description-element","text":"An architecture description element is any construct in an architecture description. architecture description elements are the most primitive constructs discussed in ISO/IEC/IEEE 42010. All terms defined in ISO/IEC/IEEE 42010 are a specialization of the concept of an architecture description element (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010","title":"Architecture Description Element {#term-architecture-description-element}"},{"location":"generated-dont-edit/gen-terms-EN/#architecture-description-language-term-architecture-description-language","text":"An architecture description language (ADL) is any form of expression for use in architecture descriptions (as defined in ISO/IEC/IEEE 42010). Examples are Rapide, Wright, SysML, ArchiMate and the viewpoint languages of RM-ODP [ISO 10746]. Category: ISO-IEC-IEEE-42010","title":"Architecture Description Language {#term-architecture-description-language}"},{"location":"generated-dont-edit/gen-terms-EN/#architecture-evaluation-term-architecture-evaluation","text":"Quantitative or qualitative assessment of a (software or system) architecture. Determine if an architecture can achieve its target qualities or quality attributes See Assessment D> ###### Comment (Gernot Starke) D> In my opinion the terms architecture analysis or architecture assessment are more appropriate, as evaluation contains value , implying numerical assessment or metrics, which is usually only part of what you should do in architecture analysis. D>","title":"Architecture Evaluation {#term-architecture-evaluation}"},{"location":"generated-dont-edit/gen-terms-EN/#architecture-framework-term-architecture-framework","text":"Conventions, principles and practices for the description of architectures established within a specific domain of application and/or community of stakeholders (as defined in ISO/IEC/IEEE 42010). Examples are: Generalised Enterprise Reference Architecture and Methodologies (GERAM) [ISO 15704] is an architecture framework. Reference Model of Open Distributed Processing (RM-ODP) [ISO/IEC 10746] is an architecture framework. Category: ISO-IEC-IEEE-42010","title":"Architecture Framework {#term-architecture-framework}"},{"location":"generated-dont-edit/gen-terms-EN/#architecture-goal-term-architecture-goal","text":"(syn: Architectural quality goal, Architectural quality requirement): A quality attribute that the system needs to achieve and the quality attribute is understood to be an architectural issue. Hence, the architecture needs to be designed in a way to fulfill this architectural goal. These goals often have long term character in contrast to (short term) project goals. Category: Foundation","title":"Architecture Goal {#term-architecture-goal}"},{"location":"generated-dont-edit/gen-terms-EN/#architecture-model-term-architecture-model","text":"An architecture view is composed of one or more architecture models. An architecture model uses modelling conventions appropriate to the concerns to be addressed. These conventions are specified by the model kind governing that model. Within an architecture description, an architecture model can be a part of more than one architecture view (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010","title":"Architecture Model {#term-architecture-model}"},{"location":"generated-dont-edit/gen-terms-EN/#architecture-objective-term-architecture-objective","text":"See architecture goal .","title":"Architecture Objective {#term-architecture-objective}"},{"location":"generated-dont-edit/gen-terms-EN/#architecture-quality-requirement-term-architecture-quality-requirement","text":"See architecture goal .","title":"Architecture Quality Requirement {#term-architecture-quality-requirement}"},{"location":"generated-dont-edit/gen-terms-EN/#architecture-rationale-term-architecture-rational","text":"Architecture rationale records explanation, justification or reasoning about architecture decisions that have been made. The rationale for a decision can include the basis for a decision, alternatives and trade-offs considered, potential consequences of the decision and citations to sources of additional information (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010","title":"Architecture Rationale {#term-architecture-rational}"},{"location":"generated-dont-edit/gen-terms-EN/#architecture-style-term-architecture-style","text":"Description of element and relation types, together with constraints on how they can be used. Often called architecture pattern . Examples: Pipes-and-Filter, Model-View-Controller, Layers. D> ###### Comment (Alexander Lorz) D> Depending on who you ask, some might consider architecture styles a generalization of architecture patterns. D> That is, \"distributed system\" is a style while \"client-server, CQRS, broker and peer-to-peer\" are more specific patterns that belong to this style. D> However, from a practical point of view this distinction is not essential.","title":"Architecture Style {#term-architecture-style}"},{"location":"generated-dont-edit/gen-terms-EN/#architecture-view-term-architecture-view","text":"A representation of a system from a specific perspective. Important and well-known views are: Context view , Building block view Runtime view Deployment view [Bass+2012] and [Rozanski+11] extensively discuss this concept. Following ISO/IEC/IEEE 42010, an architecture view is a work product expressing the architecture of a system from the perspective of specific system concerns (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010","title":"Architecture View {#term-architecture-view}"},{"location":"generated-dont-edit/gen-terms-EN/#architecture-viewpoint-term-architecture-viewpoint","text":"Work product establishing the conventions for the construction, interpretation and use of architecture views to frame specific system concerns (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010","title":"Architecture Viewpoint {#term-architecture-viewpoint}"},{"location":"generated-dont-edit/gen-terms-EN/#artifact-term-artifact","text":"Tangible by-product created or generated during development of software. Examples of artifacts are use cases, all kinds of diagrams, UML models, requirements and design documents, source code, test cases, class-files, archives.","title":"Artifact {#term-artifact}"},{"location":"generated-dont-edit/gen-terms-EN/#assessment-term-assessment","text":"See also Evaluation . Gathering information about status, risks or vulnerabilities of a system. Assessment might concerning potentially all aspects (development, organization, architecture, code etc.)","title":"Assessment {#term-assessment}"},{"location":"generated-dont-edit/gen-terms-EN/#beurteilung","text":"Siehe auch Bewertung . Zusammenstellung von Informationen \u00fcber Status, Risiken oder Schw\u00e4chen eines Systems. Die Beurteilung kann potenziell alle Aspekte (Entwicklung, Organisation, Architektur, Code usw.) betreffen. \u00b9\u2075 https://en.wikipedia.org/w/index.php?title=Asset_(computer_security)&oldid=694606042","title":"Beurteilung"},{"location":"generated-dont-edit/gen-terms-EN/#asset-term-asset","text":"\"In information security, computer security and network security an Asset is any data, device, or other component of the environment that supports information-related activities. Assets generally include hardware (e.g. servers and switches), software (e.g. mission critical applications and support systems) and confidential information\" (quoted from Wikipedia ) Category: Security","title":"Asset {#term-asset}"},{"location":"generated-dont-edit/gen-terms-EN/#association-term-association","text":"Defines a relationship between objects (in general: between components). Each association can be described in detail by cardinalities and (role-)names. See coupling , dependency and relationship Category: Foundation","title":"Association {#term-association}"},{"location":"generated-dont-edit/gen-terms-EN/#asymmetric-cryptography-term-asymmetric-cryptography","text":"Asymmetric cryptography algorithms are designed that the key which is used for encryption is different from the key used for decryption. The key for encryption is called \"public-key\" the key for decryption is called \"private-key\". The public key can be published and used by anyone to encrypt information only readable by the party owning the private-key for decryption. See Schneier, Public-Key Algorithms, page 17 . Asymmetric cryptography is fundamental for PKI and digital signatures. Category: Security","title":"Asymmetric Cryptography {#term-asymmetric-cryptography}"},{"location":"generated-dont-edit/gen-terms-EN/#atam-term-atam","text":"Architecture Tradeoff Analysis Method . Qualitative architecture evaluation method, based upon a (hierarchical) quality tree and concrete quality scenarios. Basic idea: Compare fine-grained quality scenarios (\"quality-requirements\") with the corresponding architectural approaches to identify risks and trade-offs.","title":"ATAM {#term-atam}"},{"location":"generated-dont-edit/gen-terms-EN/#attack-tree-term-attack-tree","text":"Formal way to describe different approaches of an attacker to reach certain goals. The tree is usally structured with the attack goal on top and different approaches as child nodes. Each approach is likely to have dependencies which are again listed as child nodes. The possibiliy of a certain way to attack an IT-system can be analyzed by assigning additional attributes to each node. Examples could be the estimated costs of an attack or if an attack approach is possible or not by referencing countermeasures. See Bruce Schneier on \"Modeling security threats\" . Category: Security","title":"Attack Tree {#term-attack-tree}"},{"location":"generated-dont-edit/gen-terms-EN/#audit-working-group-term-audit-working-group","text":"The audit working group is responsible for the technical evaluation of training materials as well as for the monitoring and evaluation of training courses. The members of the audit working group, authorized by the iSAQB(R), are independent of the training provider . The result of the assessments (the respective accreditation recommendation of the AUDIT WORKING GROUP) will be communicated to the training provider by the accreditation body .","title":"Audit Working Group:  {#term-audit-working-group}"},{"location":"generated-dont-edit/gen-terms-EN/#authentication-term-authentication","text":"Authentication is the process of confirming the claim of an identity by a given entity. Usually this is done by verifying at least one of the authentication factors which is known by the system: knowledge (e.g. password) ownership (e.g. security token) inherence (e.g. biometrics) For a stronger authentication multiple factors can be requested or at least factors of two categories. Category: Security","title":"Authentication {#term-authentication}"},{"location":"generated-dont-edit/gen-terms-EN/#authenticity-quality-attribute-term-authenticity-quality-attribute","text":"Degree to which the identity of a subject or resource can be proved to be the one claimed. Is a sub-characteristic of: security . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Authenticity Quality Attribute {#term-authenticity-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#authorization-term-authorization","text":"\"Authorization or authorisation is the function of specifying access rights to resources related to information security and computer security in general and to access control in particular. More formally, \"to authorize\" is to define an access policy.\" (quoted from Wikipedia ) Category: Security","title":"Authorization {#term-authorization}"},{"location":"generated-dont-edit/gen-terms-EN/#availability-term-availability","text":"One of the basic Security Goals describing a system that can provide desired information when its needed. From a security perspective for example denial-of-service-attacks may prevent availability. Category: Security","title":"Availability {#term-availability}"},{"location":"generated-dont-edit/gen-terms-EN/#availability-quality-attribute-term-availability-quality-attribute","text":"Degree to which a system, product or component is operational and accessible when required for use. Is a sub-characteristic of: reliability . Refer to ISO 25010 website. Category: Quality, ISO 25010, Security","title":"Availability Quality Attribute {#term-availability-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#black-box-term-blackbox","text":"View on a building block (or component ) that hides the internal structure. Blackboxes respect the information hiding principle . They shall have clearly defined input- and output interfaces plus a precisely formulated responsibility or objective . Optionally a blackbox defines some quality attributes, for example timing behavior, throughput or security aspects. Category: Foundation","title":"Black Box {#term-blackbox}"},{"location":"generated-dont-edit/gen-terms-EN/#bottom-up-approach-term-bottom-up","text":"Direction of work (or strategy of processing) for modeling and design. Starting with something detailed or concrete, working towards something more general or abstract. \"In a bottom-up approach the individual base elements of the system are first specified in great detail. These elements are then linked together to form larger subsystems.\" (quote from Wikipedia )","title":"Bottom-Up Approach {#term-bottom-up}"},{"location":"generated-dont-edit/gen-terms-EN/#bounded-context-term-bounded-context","text":"Bounded Context is principle of the strategy design of Domain-Driven Design . \"A bounded context explicitly defines the context within which a domain model for a software system applies. Ideally, it would be preferable to have a single, unified model for all software systems in the same domain. While this is a noble goal, in reality it typically fragments into multiple models. It is useful to recognize this fact of life and work with it.\" (quote from Wikipedia) \"Multiple domain models are in play on any large project. Yet when code based on distinct models is combined, software becomes buggy, unreliable, and difficult to understand. Communication among team members becomes confusing. It is often unclear in what context a model should not be applied. Therefore: Explicitly set boundaries in terms of team organization, usage within specific parts of the application, and physical manifestations such as code bases and database schemas. Keep the model strictly consistent within these bounds, but don\u2019t be distracted or confused by issues outside.\" (quote from Wikipedia) Category: DDD","title":"Bounded Context {#term-bounded-context}"},{"location":"generated-dont-edit/gen-terms-EN/#bridge-term-bridge","text":"Design pattern in which an abstraction is decoupled from its implementation, so that the two can vary independently. In case you find that incomprehensible (as most people) - have a look here Category: Design-Pattern","title":"Bridge {#term-bridge}"},{"location":"generated-dont-edit/gen-terms-EN/#broker-term-broker","text":"An architecture pattern used to structure distributed software systems with decoupled components that interact by (usually remote) service invocations. A broker is responsible for coordinating communication, such as forwarding requests, as well as for transmitting results and exceptions. Category: Architecture-Pattern","title":"Broker {#term-broker}"},{"location":"generated-dont-edit/gen-terms-EN/#building-block-term-building-block","text":"General or abstract term for all kinds of artifacts from which software is constructed. Part of the statical structure ( Building Block View ) of software architecture. Building blocks can be hierarchically structured - they may contain other (smaller) building blocks. Some examples of alternative (concrete) names for building blocks: Component, module, package, namespace, class, file, program, subsystem, function, configuration, data-definition.","title":"Building Block {#term-building-block}"},{"location":"generated-dont-edit/gen-terms-EN/#building-block-view-term-building-block-view","text":"Shows the statical structure of the system, how its source code is organized. Usually a hierarchical manner, starting from the context view . Complemented by one or several runtime scenarios .","title":"Building Block View {#term-building-block-view}"},{"location":"generated-dont-edit/gen-terms-EN/#business-architecture-term-business-architecture","text":"A blueprint of the enterprise that provides a common understanding of the organization and is used to align strategic objectives and tactical demands.","title":"Business Architecture {#term-business-architecture}"},{"location":"generated-dont-edit/gen-terms-EN/#c4-model-term-c4-model","text":"The C4 Model for Software Architecture Documentation was developed by Simon Brown. It consists of a hierarchical set of software architecture diagrams for context, containers, components, and code. The hierarchy of the C4 diagrams provides different levels of abstraction, each of which is relevant to a different audience.","title":"C4 Model {#term-c4-model}"},{"location":"generated-dont-edit/gen-terms-EN/#ca-term-ca","text":"A C ertificate Authority issues digital certificates to a given subject in a PKI . Usually there is a trust established to this authority which results in the same trust level to the issued certificates. An example is the widely used TLS-PKI where every browser includes the root-certificates of a defined list of CAs. These CAs then check the identity of a given internet domain owner and digitally sign his certificate for the use with TLS . Category: Security","title":"CA {#term-ca}"},{"location":"generated-dont-edit/gen-terms-EN/#capacity-quality-attribute-term-capacity-quality-attribute","text":"Degree to which the maximum limits of a product or system parameter meet requirements. Is a sub-characteristic of: performance efficiency . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Capacity Quality Attribute {#term-capacity-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#cardinality-term-cardinality","text":"Describes the quantitative rating of an association or relationship. It specifies the number of participants (objects, instances, modules etc) of the association.","title":"Cardinality {#term-cardinality}"},{"location":"generated-dont-edit/gen-terms-EN/#certification-program-term-certification-program","text":"The iSAQB(R) CPSA(R) certification program, including its organizational components, documents (training documents, contracts) and processes. The copyrighted abbreviation and term CPSA(R) means Certified Professional for Software Architecture .","title":"Certification Program  {#term-certification-program}"},{"location":"generated-dont-edit/gen-terms-EN/#cia-triad-term-cia-triad","text":"See Security Goals Category: Security","title":"CIA Triad {#term-cia-triad}"},{"location":"generated-dont-edit/gen-terms-EN/#cloud-term-cloud","text":"\"Cloud computing is a model for enabling ubiquitous, convenient, on-demand network access to a shared pool of configurable computing resources (e.g., networks, servers, storage, applications, and services) that can be rapidly provisioned and released with minimal management effort or service provider interaction.\" Definition quoted from NIST (National Institute of Standards and Technology). The NIST definition contains the following five characteristics (quoted but abbreviated from the aforementioned NIST source too): On-demand self service: A consumer can unilaterally provision computing capabilities, such as server time and network storage, without requiring human interaction with each service provider. Broad network access: Capabilities are available over the network and accessed through standard mechanisms that promote use by heterogeneous client platforms. Resource pooling: The provider\u2019s computing resources are pooled to serve multiple consumers using a multi-tenant model, with different physical and virtual resources dynamically assigned and reassigned according to consumer demand. There is location independence in that the customer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction (e.g., country, state, or datacenter). Examples of resources include storage, processing, memory, and network bandwidth. Rapid elasticity: Capabilities can be elastically provisioned and released, in some cases automatically, to scale rapidly commensurate with demand. To the consumer, the capabilities available for provisioning often appear to be unlimited and can be appropriated in any quantity at any time. Measured service: Cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service (e.g., storage, processing, bandwidth, and active user accounts). Resource usage can be monitored, controlled, and reported, providing transparency for both the provider and consumer of the utilized service.","title":"Cloud {#term-cloud}"},{"location":"generated-dont-edit/gen-terms-EN/#co-existence-quality-attribute-term-co-existence-quality-attribute","text":"Degree to which a product can perform its required functions efficiently while sharing a common environment and resources with other products, without detrimental impact on any other product. Is a sub-characteristic of: compatibility . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Co-Existence Quality Attribute {#term-co-existence-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#cohesion-term-cohesion","text":"The degree to which elements of a building block, component or module belong together is called cohesion . It measures the strength of relationship between pieces of functionality within a given component. In cohesive systems, functionality is strongly related. It is usually characterized as high cohesion or low cohesion . Strive for high cohesion, because high cohesion often implies reusability, low coupling and understandability.","title":"Cohesion {#term-cohesion}"},{"location":"generated-dont-edit/gen-terms-EN/#command-term-command","text":"Design pattern in which an object is used to encapsulate an action. This action might be invoked or executed at a later time.","title":"Command {#term-command}"},{"location":"generated-dont-edit/gen-terms-EN/#common-closure-principle-term-common-closure-principle","text":"A fundamental principle for designing the structure of software systems (also see Package Principles ). It directly and explicitly restates the Single Responsibility Principle for larger components. The subcomponents of a component should ideally have the exact same reasons to change. A change request that effects one of them should effect all of them, but it should not effect anything else outside their enclosing component. Thereby, each expected change request would effect a minimal number of components. Or put another way: Each component would be closed to a maximum number of expected change requests. The term expected here signifies a few important implications: The inherent concepts/responsibilities of a system run deeper than a surface-level description of its behaviour. The deeper concepts/responsibilities of a system are not entirely objective but can be modeled in different ways. Determining the concepts/responsibilities of a system is not just passive describing but also active strategizing . This principle leads to highly cohesive components. It also implies loosely coupled components because related concepts that do change together do get bundled up in the same component. When each single concept is expressed by a single component, there are no unnecessary couplings between components. Category: Design-Principle","title":"Common Closure Principle {#term-common-closure-principle}"},{"location":"generated-dont-edit/gen-terms-EN/#common-reuse-principle-term-common-reuse-principle","text":"A fundamental principle for designing the structure of software systems (also see Package Principles ). The subcomponents (classes) of a component should be exactly the ones that are being (re)used together. Or the other way around: Components that are being (re)used together should be packaged into a larger component. This also implies that subcomponents that are not frequently used in conjunction with the other subcomponents should not be in the respective component. This perspective helps in deciding what belongs into a component and what doesn't. It aims at a system decomposition of loosely coupled and highly cohesive components. This obviously echoes the Single Responsibility Principle . It also echoes the Interface Segregation Principle , as it ensures that clients aren't forced to depend on concepts they don't care about. Category: Design-Principle","title":"Common Reuse Principle {#term-common-reuse-principle}"},{"location":"generated-dont-edit/gen-terms-EN/#compatibility-quality-attribute-term-compatibility-quality-attribute","text":"Degree to which a product, system or component can exchange information with other products, systems or components, and/or perform its required functions, while sharing the same hardware or software environment. Is composed of the following sub-characteristics: co-existence , interoperabilty . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Compatibility Quality Attribute {#term-compatibility-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#complexity-term-complexity","text":"\"Complexity is generally used to characterize something with many parts where those parts interact with each other in multiple ways.\" (quoted from Wikipedia.) Essential complexity is the core of the problem we have to solve, and it consists of the parts of the software that are legitimately difficult problems. Most software problems contain some complexity. Accidental complexity is all the stuff that doesn\u2019t necessarily relate directly to the solution, but that we have to deal with anyway. (quoted from Mark Needham ) Architects shall strive to reduce accidental complexity.","title":"Complexity {#term-complexity}"},{"location":"generated-dont-edit/gen-terms-EN/#component-term-component","text":"See Building block . Structural element of an architecture.","title":"Component {#term-component}"},{"location":"generated-dont-edit/gen-terms-EN/#composition-term-composition","text":"Combine simpler elements (e.g. functions, data types, building blocks) to build more complicated, powerful or more responsible ones. In UML: When the owning element is destroyed, so are the contained elements.","title":"Composition {#term-composition}"},{"location":"generated-dont-edit/gen-terms-EN/#concept-term-concept","text":"Plan, principle(s) or rule(s) how to solve a specific problem. Concepts are often cross-cutting in a sense that multiple architectural elements might be affected by a single concept. That means that implementors of e.g. implementation units (building blocks) should adhere to the corresponding concept. Concepts form the basis for conceptual integrity .","title":"Concept {#term-concept}"},{"location":"generated-dont-edit/gen-terms-EN/#conceptual-integrity-term-conceptual-integrity","text":"Concepts, rules, patterns and similar solution approaches are applied in a consistent (homogeneous, similar) way throughout the system. Similar problems are solved in similar or identical ways.","title":"Conceptual Integrity {#term-conceptual-integrity}"},{"location":"generated-dont-edit/gen-terms-EN/#concern-term-concern","text":"\"A concern about an architecture is a requirement, an objective, a constraint, an intention, or an aspiration a stakeholder has for that architecture.\" (quoted from [Rozanski+11], chapter 8) Following ISO/IEC/IEEE 42010 a concern is defined as (system) interest in a system relevant to one or more of its stakeholders (as defined in ISO/IEC/IEEE 42010). Note, a concern pertains to any influence on a system in its environment, including developmental, technological, business, operational, organizational, political, economic, legal, regulatory, ecological and social influences. Category: ISO-IEC-IEEE-42010","title":"Concern {#term-concern}"},{"location":"generated-dont-edit/gen-terms-EN/#confidentiality-term-confidentiality","text":"One of the basic Security Goals describing a system to disclose and make information only available to authorized parties. Category: Security","title":"Confidentiality {#term-confidentiality}"},{"location":"generated-dont-edit/gen-terms-EN/#confidentiality-quality-attribute-term-confidentiality-quality-attribute","text":"Degree to which a product or system ensures that data are accessible only to those authorized to have access. Is a sub-characteristic of: security . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Confidentiality Quality Attribute {#term-confidentiality-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#consistency-term-consistency","text":"A consistent systems does not contain contradictions. Identical problems are solved with identical (or at least similar) approaches. Degree, to which data and their relations comply to validation rules. Clients (of a database) get identical results for identical queries (e.g. Monotonic-Read-Consistency, Montonic-Write-Consistency, Read-Your-Writes-Consistency etc.) With respect to behavior: Degree, to which a system behaves coherent, replicable and reasonable.","title":"Consistency {#term-consistency}"},{"location":"generated-dont-edit/gen-terms-EN/#constraint-term-constraint","text":"A restriction on the degree of freedom you have in creating, designing, implementing or otherwise providing a solution. Constraints are often global requirements , such as limited development resources or a decision by senior management that restricts the way you plan, design, develop or operate a system. Based upon a definition from Scott Ambler","title":"Constraint {#term-constraint}"},{"location":"generated-dont-edit/gen-terms-EN/#context-of-a-system-term-context","text":"\"Defines the relationships, dependencies, and interactions between the system and its environment: People, systems, and external entities with which it interacts.\" (quoted from Rozanski-Woods ) Another definition from arc42: \"System scope and context - as the name suggests - delimits your system (i.e. your scope) from all its communication partners (neighboring systems and users, i.e. the context of your system). It thereby specifies the external interfaces.\" (quoted from docs.arc42.org ) Distinguish between business and technical context: The business context (formerly called logical context) shows the external relationships from a business- or non-technical perspective. It abstracts from technical, hardware or implementation details. Input-/Output relationships are named by their business meaning instead of their technical properties. The technical context shows technical details, like transmission channel, technical protocoll, IP-address, bus or similar hardware details. Embedded systems, for example, often care for hardware-related information very early in development.","title":"Context (of a System) {#term-context}"},{"location":"generated-dont-edit/gen-terms-EN/#context-view-term-context-view","text":"Shows the complete system as one blackbox within its environment, either from a business perspective ( business context ) or from a technical or deployment perspective ( technical context ). The context view (or context diagram) shows the boundary between a system and its environment, showing the entities in its environment (its neighbors) with which it interacts. Neighbors can either be other software, hardware (like sensors), humans, user-roles or even organizations using the system. See Context .","title":"Context View {#term-context-view}"},{"location":"generated-dont-edit/gen-terms-EN/#correspondence-term-correspondence","text":"A correspondence defines a relation between architectural description elements. Correspondences are used to express architecture relations of interest within an architecture description (or between architecture descriptions) (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010","title":"Correspondence {#term-correspondence}"},{"location":"generated-dont-edit/gen-terms-EN/#correspondence-rule-term-correspondence-rule","text":"Correspondences can be governed by correspondence rules. Correspondence rules are used to enforce relations within an architecture description (or between architecture descriptions) (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 Synonym: Integrity , homogeneity, conceptual integrity.","title":"Correspondence Rule {#term-correspondence-rule}"},{"location":"generated-dont-edit/gen-terms-EN/#coupling-term-coupling","text":"Coupling is the kind and degree of interdependence between building blocks of software; a measure of how closely connected two components are. You should always aim for low coupling. Coupling is usually contrasted with cohesion . Low coupling often correlates with high cohesion, and vice versa. Low coupling is often a sign of a well-structured system. When combined with high cohesion, it supports understandability and maintainability.","title":"Coupling {#term-coupling}"},{"location":"generated-dont-edit/gen-terms-EN/#kopplung","text":"Kopplung ist die Art und der Grad der Interdependenz zwischen Software-Bausteinen; ein Ma\u00df daf\u00fcr, wie eng zwei Komponenten verbunden sind.\\ Ziel sollte immer eine lose Kopplung sein. Kopplung steht in der Regel im Gegensatz zu Koh\u00e4sion . Lose Kopplung korreliert h\u00e4ufig mit starker Koh\u00e4sion. Lose Kopplung ist oft ein Zeichen f\u00fcr ein gut strukturiertes System. Zusammen mit starker Koh\u00e4sion unterst\u00fctzt sie Verst\u00e4ndlichkeit und Wartbarkeit.","title":"Kopplung"},{"location":"generated-dont-edit/gen-terms-EN/#cpsar-term-cpsa","text":"Certified Professional for Software Architecture(R) \u2013 the common name for different levels of certification issued by the iSAQB . The most common known certifications are the foundation level (CPSA-F) and the advanced level (CPSA-A).","title":"CPSA(R) {#term-cpsa}"},{"location":"generated-dont-edit/gen-terms-EN/#cqrs-term-cqrs","text":"(command query responsibility segregation): Separate the elements manipulating ( command ) data from those just reading ( query ). This separation enables different optimization strategies for reading and writing data (for example, it's much easier to cache data that's read-only than to cache data that's also altered.) There's an interesting eBook by Mark Nijhof on this subject.","title":"CQRS {#term-cqrs}"},{"location":"generated-dont-edit/gen-terms-EN/#cross-cutting-concept-term-cross-cutting-concept","text":"See concept . Synonym: principle, rule.","title":"Cross-Cutting Concept {#term-cross-cutting-concept}"},{"location":"generated-dont-edit/gen-terms-EN/#cross-cutting-concern-term-cross-cutting-concern","text":"Functionality of the architecture or system that affects several elements. Examples of such concerns are logging, transactions, security, exception handling, caching etc. Often these concerns will be addressed in systems via concepts .","title":"Cross-Cutting Concern {#term-cross-cutting-concern}"},{"location":"generated-dont-edit/gen-terms-EN/#curriculum-term-curriculum","text":"The learning process provided by a school (here: iSAQB as the institution governing software architecture education). It includes the content of courses (the syllabus), the methods employed, and other aspects, like norms and values, which relate to the way the education including certification and examination is organized.","title":"Curriculum {#term-curriculum}"},{"location":"generated-dont-edit/gen-terms-EN/#cyclomatic-complexity-term-cyclomatic-complexity","text":"Quantitative measure, number of independent paths through a program's source code. It roughly correlates to the number of conditional statements ( if , while ) in the code +1. A linear sequence of statements without if or while has the cyclomatic complexity of 1. Many software engineers believe that higher complexity correlates to the number of defects. Category: Metric.","title":"Cyclomatic Complexity {#term-cyclomatic-complexity}"},{"location":"generated-dont-edit/gen-terms-EN/#decomposition-term-decomposition","text":"(syn: factoring) Breaking or dividing a complex system or problem into several smaller parts that are easier to understand, implement or maintain.","title":"Decomposition {#term-decomposition}"},{"location":"generated-dont-edit/gen-terms-EN/#dependency-term-dependency","text":"See coupling .","title":"Dependency {#term-dependency}"},{"location":"generated-dont-edit/gen-terms-EN/#dependency-injection-di-term-dependency-injection","text":"Instead of having your objects or a factory creating a dependency, you pass the needed dependencies to the constructor or via property setters. You therefore make the creation of specific dependencies somebody else's problem .","title":"Dependency Injection (DI) {#term-dependency-injection}"},{"location":"generated-dont-edit/gen-terms-EN/#dependency-inversion-principle-term-dependency-inversion","text":"High level (abstract) elements should not depend upon low level (specific) elements. \"Details should depend upon abstractions\" ( Martin-2003 ). One of the SOLID principles , nicely explained by Brett Schuchert , and closely related to the SDP and SAP .","title":"Dependency Inversion Principle {#term-dependency-inversion}"},{"location":"generated-dont-edit/gen-terms-EN/#deployment-term-deployment","text":"Bring software onto its execution environment (hardware, processor etc). Put software into operation.","title":"Deployment {#term-deployment}"},{"location":"generated-dont-edit/gen-terms-EN/#deployment-view-term-deployment-view","text":"Architectural view showing the technical infrastructure where a system or artifacts will be deployed and executed. \"This view defines the physical environment in which the system is intended to run, including the hardware environment your system needs (e.g., processing nodes, network interconnections, and disk storage facilities), the technical environment requirements for each node (or node type) in the system, and the mapping of your software elements to the runtime environment that will execute them.\" (as defined by Rozanski+2011 )","title":"Deployment View {#term-deployment-view}"},{"location":"generated-dont-edit/gen-terms-EN/#design-pattern-term-design-pattern","text":"General or generic reusable solution to a commonly occurring problem within a given context in design. Initially conceived by the famous architect Christopher Alexander , the concept of design patterns was taken up by software engineers. In our opinion, every serious software developer should know at least some patterns from the pioneering Gang-of-Four book by Erich Gamma ( Gamma+1994 ) and his three allies.","title":"Design Pattern {#term-design-pattern}"},{"location":"generated-dont-edit/gen-terms-EN/#design-principle-term-design-principle","text":"Set of guidelines that helps software developers to design and implement better solutions, where \"better\" could, for example, mean one or more of the following: low coupling . high cohesion . separation of concerns or adherence to the Single Responsibility Principle . adherence to the Information Hiding principle. avoid Rigidity : A system or element is difficult to change because every change potentially affects many other elements. avoid Fragility : When elements are changed, unexpected results, defects or otherwise negative consequences occur at other elements. avoid Immobility : An element is difficult to reuse because it cannot be disentagled from the rest of the system.","title":"Design Principle {#term-design-principle}"},{"location":"generated-dont-edit/gen-terms-EN/#design-rationale-term-design-rationale","text":"An explicit documentation of the reasons behind decisions made when designing any architectural element.","title":"Design Rationale {#term-design-rationale}"},{"location":"generated-dont-edit/gen-terms-EN/#document-term-document","text":"A (usually written) artifact conveying information.","title":"Document {#term-document}"},{"location":"generated-dont-edit/gen-terms-EN/#documentation-term-documentation","text":"A systematically ordered collection of documents and other material of any kind that makes usage or evaluation easier. Examples for \"other material\": presentation, video, audio, web page, image, etc.","title":"Documentation {#term-documentation}"},{"location":"generated-dont-edit/gen-terms-EN/#documentation-build-term-documentation-build","text":"Automatic build process that collects artifacts into a consistent documentation.","title":"Documentation Build {#term-documentation-build}"},{"location":"generated-dont-edit/gen-terms-EN/#domain-model-term-domain-model","text":"The domain model is a concept of Domain-Driven Design . I provides a system of abstractions that describes selected aspects of a domain and can be used to solve problems related to that domain.","title":"Domain Model {#term-domain-model}"},{"location":"generated-dont-edit/gen-terms-EN/#domain-driven-design-ddd-term-ddd","text":"\"Domain-driven design (DDD) is an approach to developing software for complex needs by deeply connecting the implementation to an evolving model of the core business concepts.\" (quoted from DDDCommunity ). See Evans-2004 . See also: Entity Value Object Aggregate Service Factory Repository Ubiquitous Language","title":"Domain-Driven Design (DDD) {#term-DDD}"},{"location":"generated-dont-edit/gen-terms-EN/#drawing-tool-term-drawing-tool","text":"A tool to create drawings that can be used in architecture documentation. Example: Visio, OmniGraffle, PowerPoint, etc. Drawing tools treat each drawing as a separate thing, this causes maintenance overhead when updating an element of the architecture that is shown in several diagrams (as opposed to a Modeling Tool ).","title":"Drawing Tool {#term-drawing-tool}"},{"location":"generated-dont-edit/gen-terms-EN/#economicalness-term-economicalness","text":"Being economical, simple, lean or achievable with relatively low effort.","title":"Economicalness {#term-economicalness}"},{"location":"generated-dont-edit/gen-terms-EN/#embedded-system-term-embedded-systems","text":"System embedded within a larger mechanical or electrical system. Embedded systems often have real-time computing constraints. Typical properties of embedded systems are low power consumption, limited memory and processing resources, small size.","title":"Embedded System {#term-embedded-systems}"},{"location":"generated-dont-edit/gen-terms-EN/#encapsulation-term-encapsulation","text":"Encapsulation has two slightly distinct notions, and sometimes to the combination thereof: restricting access to some of the object's components bundling of data with the methods or functions operating on that data Encapsulation is a mechanism for information hiding .","title":"Encapsulation {#term-encapsulation}"},{"location":"generated-dont-edit/gen-terms-EN/#enterprise-it-architecture-term-enterprise-it-architecture","text":"Synonym: Enterprise Architecture. Structures and concepts for the IT support of an entire company. Atomic subject matters of the enterprise architecture are single software systems also referred to as \"applications\".","title":"Enterprise IT Architecture {#term-enterprise-it-architecture}"},{"location":"generated-dont-edit/gen-terms-EN/#entity-term-entity","text":"Category: DDD Entity is a building block of Domain-Driven Design . An entity is a core object of a business domain with unchangeable identity and a clearly defined lifecycle. Entities map their state to value objects and are almost always persistent.","title":"Entity {#term-entity}"},{"location":"generated-dont-edit/gen-terms-EN/#entropy-term-entropy","text":"In information theory defined as \"amount of information\" a message has or \"unpredictability of information content\". The entropy of a cryptosystem is measured by the size of the keyspace. Larger keyspaces have an increased entropy and if not flawed by the algorithm itself, harder to break than smaller ones. For secure cryptographic operations it is mandatory to not only use random values as input, they should have also a high entropy. The creation of high entropy on a computer system is non-trivial and can affect the performance of a system. See 11.1 Information Theory of Schneier-1996 and Whitewood Inc. on \"Understanding and Managing Entropy\" or SANS \"Randomness and Entropy - An Introduction\" . Category: Security","title":"Entropy {#term-entropy}"},{"location":"generated-dont-edit/gen-terms-EN/#environment-term-environment","text":"(System) Context determining the setting and circumstances of all influences upon a system (as defined in ISO/IEC/IEEE 42010). Note, the environment of a system includes developmental, technological, business, operational, organizational, political, economic, legal, regulatory, ecological and social influences. Category: ISO-IEC-IEEE-42010","title":"Environment {#term-environment}"},{"location":"generated-dont-edit/gen-terms-EN/#facade-term-facade","text":"Structural design pattern. A Facade offers a simplified interface to a complex or complicated building block (the provider ) without any modifications to the provider.","title":"Facade {#term-facade}"},{"location":"generated-dont-edit/gen-terms-EN/#factory-term-factory","text":"(Design pattern) In class-based or object-oriented programming, the factory method pattern is a creational design pattern that uses factory methods or factory components for creating objects, without having to specify the exact class of the object that will be created. In Domain-Driven Design : A factory encapsulates the creation of aggregates , entities , and value objects . Factories work exclusively in the domain and have no access to technical building blocks (e.g. a database).","title":"Factory {#term-factory}"},{"location":"generated-dont-edit/gen-terms-EN/#fault-tolerance-quality-attribute-term-fault-tolerance-quality-attribute","text":"Degree to which a system, product or component operates as intended despite the presence of hardware or software faults. Is a sub-characteristic of: reliability . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Fault Tolerance Quality Attribute {#term-fault-tolerance-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#filter-term-filter","text":"Part of the pipe-and-filter architectural style that creates or transforms data. Filters are typically executed independently from other filters.","title":"Filter {#term-filter}"},{"location":"generated-dont-edit/gen-terms-EN/#fitness-function-term-fitness-function","text":"\"An architectural fitness function provides an objective integrity assessment of some architectural characteristics.\" ( Ford+2017 ). A fitness function is derived from manual evaluations and automated tests and shows to which extent architectural or quality requirements are met.","title":"Fitness Function {#term-fitness-function}"},{"location":"generated-dont-edit/gen-terms-EN/#function-signature-term-function-signature","text":"(Synonym: type or method signature) defines input and output of functions or methods. A signature can include: parameters and their types return value and type exception thrown or errors raised","title":"Function Signature {#term-function-signature}"},{"location":"generated-dont-edit/gen-terms-EN/#functional-appropriateness-quality-attribute-term-functional-appropriateness-quality-attribute","text":"Degree to which the functions facilitate the accomplishment of specified tasks and objectives. Is a sub-characteristic of: functional suitability . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Functional Appropriateness Quality Attribute {#term-functional-appropriateness-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#functional-completeness-quality-attribute-term-functional-completeness-quality-attribute","text":"Degree to which the set of functions covers all the specified tasks and user objectives. Is a sub-characteristic of: functional suitability . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Functional Completeness Quality Attribute {#term-functional-completeness-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#functional-correctness-quality-attribute-term-functional-correctness-quality-attribute","text":"Degree to which a product or system provides the correct results with the needed degree of precision. Is a sub-characteristic of: functional suitability . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Functional Correctness Quality Attribute {#term-functional-correctness-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#functional-suitability-quality-attribute-term-functional-suitability-quality-attribute","text":"Degree to which a product or system provides functions that meet stated and implied needs when used under specified conditions. Is composed of the following sub-characteristics: functional completeness , functional correctness , functional appropriateness . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Functional Suitability Quality Attribute {#term-functional-suitability-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#fundamental-modeling-concepts-fmc-term-fmc","text":"Fundamental Modeling Concepts is a graphical notation for modeling and documenting software systems. From their website: \"FMC provide a framework for the comprehensive description of software-intensive systems. It is based on a precise terminology and supported by a graphical notation which can be easily understood\".","title":"Fundamental Modeling Concepts (FMC) {#term-fmc}"},{"location":"generated-dont-edit/gen-terms-EN/#gateway-term-gateway","text":"A (design or architecture) pattern: An element of that encapsulates access to a (usually external) system or resource. See also wrapper , adapter .","title":"Gateway {#term-gateway}"},{"location":"generated-dont-edit/gen-terms-EN/#global-analysis-term-global-analysis","text":"Systematic approach to achieve desired quality attributes. Developed and documented by Christine Hofmeister (Siemens Corporate Research). Global analysis is described in [Hofmeister+2000].","title":"Global Analysis {#term-global-analysis}"},{"location":"generated-dont-edit/gen-terms-EN/#heterogeneous-architectural-style-term-heterogeneous-architectural-style","text":"see hybrid architecture style .","title":"Heterogeneous Architectural Style {#term-heterogeneous-architectural-style}"},{"location":"generated-dont-edit/gen-terms-EN/#heuristic-term-heuristic","text":"Informal rule, rule-of-thumb. Any way of problem solving not guaranteed to be optimal, but somehow sufficient. Examples from Object-Oriented Design or User Interface Design .","title":"Heuristic {#term-heuristic}"},{"location":"generated-dont-edit/gen-terms-EN/#hybrid-architecture-style-term-hybrid-architecture-style","text":"Combination of two or more existing architecture styles or patterns. For example, an MVC construct embedded in a layer structure.","title":"Hybrid Architecture Style {#term-hybrid-architecture-style}"},{"location":"generated-dont-edit/gen-terms-EN/#ieee-1471-term-ieee-1471","text":"Standard Recommended Practice for Architectural Description of Software-Intensive Systems , defined as ISO/IEC 42010:2007. Defines a (abstract) framework for the description of software architectures.","title":"IEEE-1471 {#term-ieee-1471}"},{"location":"generated-dont-edit/gen-terms-EN/#incremental-development-term-incremental-development","text":"see iterative and incremental development .","title":"Incremental Development {#term-incremental-development}"},{"location":"generated-dont-edit/gen-terms-EN/#information-hiding-term-information-hiding","text":"A fundamental principle in software design: Keep those design or implementation decisions hidden that are likely to change, thus protecting other parts of the system from modification if these decisions or implementations are changed. Is one important attributes of blackboxes . Separates interface from implementation. The term encapsulation is often used interchangeably with information hiding.","title":"Information Hiding {#term-information-hiding}"},{"location":"generated-dont-edit/gen-terms-EN/#installability-quality-attribute-term-installability-quality-attribute","text":"Degree of effectiveness and efficiency with which a product or system can be successfully installed and/or uninstalled in a specified environment. Is a sub-characteristic of: portability . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Installability Quality Attribute {#term-installability-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#integrity-term-integrity","text":"Various meanings: Category: Security One of the basic Security Goals which means maintaining and assuring accuracy and completeness of data. Usually this is achieved by the usage of cryptographic algorithms to create a digital signature. Category: Foundation Data or behavioral integrity: Degree to which clients (of a database) get identical results for identical queries (e.g. Monotonic-Read-Consistency, Montonic-Write-Consistency, Read-Your-Writes-Consistency etc.) Degree, to which a system behaves coherent, replicable and reasonable. See also consistency .","title":"Integrity  {#term-integrity}"},{"location":"generated-dont-edit/gen-terms-EN/#integrity-quality-attribute-term-integrity-quality-attribute","text":"Degree to which a system, product or component prevents unauthorized access to, or modification of, computer programs or data. Is a sub-characteristic of: security . Refer to ISO 25010 website. Category: Quality, ISO 25010, Security","title":"Integrity Quality Attribute {#term-integrity-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#interface-term-interface","text":"Multiple meanings, depending on context: Boundary across which two building blocks interact or communicate with each other. Design construct that provides an abstraction of the behavior of concrete components, declares possible interactions with these components and constraints for these interactions. An example for the second meaning is the programming language construct from the object-oriented language Java(tm):","title":"Interface {#term-interface}"},{"location":"generated-dont-edit/gen-terms-EN/#interface-segregation-principle-isp-term-interface-segregation-principle","text":"Building blocks (classes, components) should not be forced to depend on methods they don't use. ISP splits larger interfaces into smaller and more (client) specific ones so that clients will only need to know about methods that they actually use.","title":"Interface Segregation Principle (ISP) {#term-interface-segregation-principle}"},{"location":"generated-dont-edit/gen-terms-EN/#interoperability-quality-attribute-term-interoperability-quality-attribute","text":"Degree to which two or more systems, products or components can exchange information and use the information that has been exchanged. Is a sub-characteristic of: compatibility . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Interoperability Quality Attribute {#term-interoperability-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#isaqb-term-isaqb","text":"international Software Architecture Qualification Board \u2013 an internationally active organization fostering the development of software architecture education. See also the discussion in the appendix .","title":"iSAQB {#term-isaqb}"},{"location":"generated-dont-edit/gen-terms-EN/#iso-25010-term-iso-25010","text":"Standards to describe (and evaluate) software product quality . \"The quality model determines which quality characteristics will be taken into account when evaluating the properties of a software product.\" (quote from the ISO website ) For a list of quality attributes defined by the ISO 25010 standard, refer to ISO 25010","title":"ISO 25010 {#term-iso-25010}"},{"location":"generated-dont-edit/gen-terms-EN/#iso-9126-term-iso-9126","text":"(Deprecated) standard to describe (and evaluate) software product quality . Has been superseded by ISO 25010 , see below.","title":"ISO 9126 {#term-iso-9126}"},{"location":"generated-dont-edit/gen-terms-EN/#iterative-and-incremental-development-term-iterative-and-incremental-development","text":"Combination of iterative and incremental approaches for software development. These are essential parts of the various agile development approaches, e.g. Scrum and XP.","title":"Iterative and Incremental Development {#term-iterative-and-incremental-development}"},{"location":"generated-dont-edit/gen-terms-EN/#iterative-development-term-iterative-development","text":"\"Development approach that cycles through development phases, from gathering requirements to delivering functionality in a working release.\" (quoted from c2-wiki ) Such cycles are repeated to improve either functionality, quality or both. Contrast to the Waterfall Development .","title":"Iterative Development {#term-iterative-development}"},{"location":"generated-dont-edit/gen-terms-EN/#kerckhoffs-principle-term-kerckhoffs-principle","text":"One of the six cryptographic axioms described 1883 in an article \"La cryptographie militaire\" by the dutch cryptographer and linguist Auguste Kerckhoffs. This axiom is still relevant today and therefore refered to as \"Kerckhoffs' Principle\". It describes that a cryptographic method must not need to be kept secret in order to achive the security of the encrypted messages. \"The enemy knows the system\" is another expression coined by the mathematician Claude Shannon as Shannon's Maxim. See Bruce Schneiers Crypto-Gram, May 15, 2002 Category: Security","title":"Kerckhoffs' Principle {#term-kerckhoffs-principle}"},{"location":"generated-dont-edit/gen-terms-EN/#latency-term-latency","text":"Latency is the time delay between the cause and the effect of some change in a system. In computer networks, latency describes the time it takes for an amount of data ( packet ) to get from one specific location to another. In interactive systems, latency is the time interval between some input to the system and the audio-visual response. Often a delay exists, often caused by network delays.","title":"Latency {#term-latency}"},{"location":"generated-dont-edit/gen-terms-EN/#layer-term-layer","text":"Grouping of building blocks or components that (together) offer a cohesive set of services to other layers. Layers are related to each other by the ordered relation allowed to use .","title":"Layer {#term-layer}"},{"location":"generated-dont-edit/gen-terms-EN/#learnability-quality-attribute-term-learnability-quality-attribute","text":"Degree to which a product or system can be used by specified users to achieve specified goals of learning to use the product or system with effectiveness, efficiency, freedom from risk and satisfaction in a specified context of use. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Learnability Quality Attribute {#term-learnability-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#liskov-substitution-principle-term-liskov-substitution-principle","text":"Refers to object oriented programming: If you use inheritance, do it right: Instances of derived types (subclasses) must be completely substitutable for their base types. If code uses a base class, these references can be replaced with any instance of a derived class without affecting the functionality of that code.","title":"Liskov Substitution Principle {#term-liskov-substitution-principle}"},{"location":"generated-dont-edit/gen-terms-EN/#maintainability-quality-attribute-term-maintainability-quality-attribute","text":"Degree of effectiveness and efficiency with which a product or system can be modified to improve it, correct it or adapt it to changes in environment, and in requirements. Is composed of the following sub-characteristics: modularity , reusability , analysability , modifiability , testability . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Maintainability Quality Attribute {#term-maintainability-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#maturity-quality-attribute-term-maturity-quality-attribute","text":"Degree to which a system, product or component meets needs for reliability under normal operation. Is a sub-characteristic of: reliability . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Maturity Quality Attribute {#term-maturity-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#mfa-term-mfa","text":"For Multi-Factor-Authentication see Authentication . Category: Security","title":"MFA {#term-MFA}"},{"location":"generated-dont-edit/gen-terms-EN/#microservice-term-microservice","text":"An architectural style, proposing to divide large systems into small units. \"Microservices have to be implemented as virtual machines, as more light-weight alternatives such as Docker containers or as individual processes. Thereby they can easily be brought into production individually.\" (quoted from the (free) LeanPub booklet on Microservices by Eberhard Wolff )","title":"Microservice {#term-microservice}"},{"location":"generated-dont-edit/gen-terms-EN/#model-driven-architecture-mda-term-model-driven-architecture","text":"Model Driven Architecture (MDA) is an OMG-Standard for model based software development. Definition: \"An approach to IT system specification that separates the specification of functionality from the specification of the implementation of that functionality on a specific technology platform.\"","title":"Model Driven Architecture (MDA) {#term-model-driven-architecture}"},{"location":"generated-dont-edit/gen-terms-EN/#model-kind-term-model-kind","text":"Conventions for a type of modeling (as defined in ISO/IEC/IEEE 42010). Note, examples of model kinds include data flow diagrams, class diagrams, Petri nets, balance sheets, organization charts and state transition models. Category: ISO-IEC-IEEE-42010","title":"Model Kind {#term-model-kind}"},{"location":"generated-dont-edit/gen-terms-EN/#model-driven-software-development-mdsd-term-model-driven-software-development","text":"The underlying idea is to generate code from more abstract models of requirements or the domain.","title":"Model-Driven Software Development (MDSD) {#term-model-driven-software-development}"},{"location":"generated-dont-edit/gen-terms-EN/#model-view-controller-term-model-view-controller","text":"Architecture pattern, often used to implement user interfaces. It divides a system into three interconnected parts (model, view and controller) to separate the following responsibilities: Model manages data and logic of the system. The \"truth\" that will be shown or displayed by one or many views. Model does not know (depend on) its views. View can be any number of (arbitrary) output representation of (model) information. Multiple views of the same model are possible. Controller accepts (user) input and converts those to commands for the model or view.","title":"Model-View-Controller {#term-model-view-controller}"},{"location":"generated-dont-edit/gen-terms-EN/#modeling-tool-term-modeling-tool","text":"A tool that creates models (e.g. UML or BPMN models). Can be used to create consistent diagrams for documentation because it has the advantage that each model element exists only once but can be consistently displayed in many diagrams (as opposed to a mere Drawing Tool ).","title":"Modeling Tool {#term-modeling-tool}"},{"location":"generated-dont-edit/gen-terms-EN/#modifiability-quality-attribute-term-modifiability-quality-attribute","text":"Degree to which a product or system can be effectively and efficiently modified without introducing defects or degrading existing product quality. Is a sub-characteristic of: maintainability . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Modifiability Quality Attribute {#term-modifiability-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#modular-programming-term-modular-programming","text":"\"Software design technique that separates the functionality of a program into independent, interchangeable modules , so that each module contains everything necessary to execute only one aspect of the desired functionality. Modules have interfaces expressing the elements provided and required by the module. The elements defined in the interface are detectable by other modules.\" (quoted from Wikipedia )","title":"Modular Programming {#term-modular-programming}"},{"location":"generated-dont-edit/gen-terms-EN/#modularity-quality-attribute-term-modularity-quality-attribute","text":"Degree to which a system or computer program is composed of discrete components such that a change to one component has minimal impact on other components. Is a sub-characteristic of: maintainability . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Modularity Quality Attribute {#term-modularity-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#module-term-module","text":"(see also Modular programming ) structural element or building block, usually regarded as a black box with a clearly defined responsibility. It encapsulates data and code and provides public interfaces, so clients can access its functionality. This meaning has first been described in a groundbreaking and fundamental paper from David L. Parnas: On the Criteria to be Used in Decomposing Software into Modules In several programming languages, module is a construct for aggregating smaller programming units, e.g. in Python. In other languages (like Java), modules are called packages . The CPSA(R)-Advanced Level is currently divided into several modules, which can be learned or taught separately and in any order. The exact relationships between these modules and the contents of these modules are defined in the respective curricula.","title":"Module {#term-module}"},{"location":"generated-dont-edit/gen-terms-EN/#node-in-uml-term-node-uml","text":"A processing resource (execution environment, processor, machine, virtual machine, application server) where artifacts can be deployed and executed.","title":"Node (in UML) {#term-node-uml}"},{"location":"generated-dont-edit/gen-terms-EN/#node-nodejs-term-node-js","text":"In modern web development: Short form for the open source JavaScript runtime Node.js\u00ae , which is built on Chrome's V8 JavaScript engine. Node.js is famous for its an event-driven, non-blocking I/O model and its vast ecosystem of supporting libraries.","title":"Node (Node.js) {#term-node-js}"},{"location":"generated-dont-edit/gen-terms-EN/#non-functional-requirement-nfr-term-non-functional-requirement","text":"Requirements that constrain the solution . Nonfunctional requirements are also known as quality attribute requirements or quality requirements . The term NFR is actually misleading, as many of the attributes involved directly relate to specific system functions (so modern requirements engineering likes to call these things required constraints ).","title":"Non Functional Requirement (NFR) {#term-non-functional-requirement}"},{"location":"generated-dont-edit/gen-terms-EN/#non-repudiation-quality-attribute-term-non-repudiation-quality-attribute","text":"Degree to which actions or events can be proven to have taken place, so that the events or actions cannot be repudiated later. Is a sub-characteristic of: security . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Non-repudiation Quality Attribute {#term-non-repudiation-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#notation-term-notation","text":"A system of marks, signs, figures, or characters that is used to represent information. Examples: prose, table, bullet point list, numbered list, UML, BPMN.","title":"Notation {#term-notation}"},{"location":"generated-dont-edit/gen-terms-EN/#observer-term-observer","text":"(Design pattern) \"... in which an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods.\" (quoted from Wikipedia ) The Observer pattern is a key pattern to complement the model\u2013view\u2013controller (MVC) architectural pattern.","title":"Observer {#term-observer}"},{"location":"generated-dont-edit/gen-terms-EN/#open-close-principle-ocp-term-open-close-principle","text":"\"Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification\" (Bertrand Meyer, 1998). In plain words: To add functionality (extension) to a system, you should not need to modify existing code. Part of Robin Martins \"SOLID\" principles for object-oriented systems. Can be implemented in object oriented languages by interface inheritance, in a more general way as plugins .","title":"Open-Close-Principle (OCP) {#term-open-close-principle}"},{"location":"generated-dont-edit/gen-terms-EN/#operability-quality-attribute-term-operability-quality-attribute","text":"Degree to which a product or system has attributes that make it easy to operate and control. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Operability Quality Attribute {#term-operability-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#owasp-term-owasp","text":"The Open Web Application Security Project is a worldwide non-profit online organization founded 2001 for improving the security of software. It is a rich source for information and best practices in the field of web security. See https://www.owasp.org/ . The OWASP-Top-10 is a frequently referenced list of attack categories based on the projects data survey. Category: Security","title":"OWASP {#term-owasp}"},{"location":"generated-dont-edit/gen-terms-EN/#package-principles-term-package-principles","text":"Fundamental principles for designing the structure of software systems ( Martin-2003 ): Reuse/Release Equivalence Principle (REP) Common Reuse Principle (CRP) Common Closure Principle (CCP) Acyclic Dependencies Principle (ADP) Stable Dependencies Principle (SDP) Stable Abstractions Principle (SAP) Robert C. Martin, who coined the \" SOLID \" acronym, also introduced the Package Principles and frequently reiterated both in conjunction. Whereas the SOLID Principles target the level of classes, the Package Principles target the level of larger components that contain multiple classes and might get deployed independently. Package- and SOLID Principles share the explicit goal of keeping software maintainable and avoiding the symptoms of degraded design: rigidity, fragility, immobility, and viscosity. While Martin expressed the Package Principles in terms of large-scale components, they apply at other scales as well. Their core are universal principles like low coupling, high cohesion, single responsibility, hierarchical (acyclic) decomposition, and the insight that meaningful dependencies go from specific/unstable concepts to more abstract/stable ones (which echoes the DIP ). Category: Design-Principle","title":"Package Principles {#term-package-principles}"},{"location":"generated-dont-edit/gen-terms-EN/#pattern-term-pattern","text":"A reusable or repeatable solution to a common problem in software design or architecture. See architecture pattern or design pattern .","title":"Pattern {#term-pattern}"},{"location":"generated-dont-edit/gen-terms-EN/#perfect-forward-secrecy-term-perfect-forward-secrecy","text":"Property of a cryptographic protocol were an attacker can't gain any information about short-term session keys by compromising long-term keys. Examples for protocols with perfect forward secrecy are TLS and OTR. If this feature is enabled for TLS and an attacker gains access to a servers private key, previously recorded communication sessions can still not be decrypted. Category: Security","title":"Perfect Forward Secrecy {#term-perfect-forward-secrecy}"},{"location":"generated-dont-edit/gen-terms-EN/#performance-efficiency-quality-attribute-term-performance-efficiency-quality-attribute","text":"Performance relative to the amount of resources used under stated conditions. Resources can include other software products, the software and hardware configuration of the system, and materials (e.g. print paper, storage media). Is composed of the following sub-characteristics: time behaviour , resource utilization , capacity . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Performance Efficiency Quality Attribute {#term-performance-efficiency-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#perspective-term-perspective","text":"A perspective is used to consider a set of related quality properties and concerns of a system. Architects apply perspectives iteratively to the system's architectural views in order to assess the effects of architectural design decisions across multiple viewpoints and architectural views . Rozanski+11 associates with the term perspective also activities, tactics, and guidelines that must be considered if a system should provide a set of related quality properties and suggests the following perspectives: Accessibility Availability and Resilience Development Resource Evolution Internationalization Location Performance and Scalability Regulation Security Usability","title":"Perspective {#term-perspective}"},{"location":"generated-dont-edit/gen-terms-EN/#pikachu-term-pikachu","text":"A yellowish mouse-like character from the (quite famous) Pok\u00e9mon world . Actually, you don't need to know that. But it does not hurt either - and you might impress your kids with this knowledge...","title":"Pikachu {#term-pikachu}"},{"location":"generated-dont-edit/gen-terms-EN/#pipe-term-pipe","text":"Connector in the pipes-and-filters architectural style that transfers streams or chunks of data from the output of one filter to the input of another filter without modifying values or order of data.","title":"Pipe {#term-pipe}"},{"location":"generated-dont-edit/gen-terms-EN/#pki-term-pki","text":"Short for Public-Key-Infrastructure . A concept of managing digital certificates usually involving asymmetric cryptography . The term \"public\" refers most of the time to the used type of cryptographic key and not necessarily to infrastructure open to a public audience. To prevent semantic confusion the terms \"open PKI\" or \"closed PKI\" can be used, see Anderson, Chapter 21.4.5.7 PKI, page 672 . PKI is usually based on a CA or a Web-of-Trust . Category: Security","title":"PKI {#term-pki}"},{"location":"generated-dont-edit/gen-terms-EN/#port-term-port","text":"UML construct, used in component diagrams. An interface, defining a point of interaction of a component with its environment.","title":"Port {#term-port}"},{"location":"generated-dont-edit/gen-terms-EN/#portability-quality-attribute-term-portability-quality-attribute","text":"Degree of effectiveness and efficiency with which a system, product or component can be transferred from one hardware, software or other operational or usage environment to another. Is composed of the following sub-characteristics: adaptability , installability , replaceability . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Portability Quality Attribute {#term-portability-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#posa-term-posa","text":"Pattern-oriented Software Architecture. Series of books on software architecture patterns.","title":"POSA {#term-posa}"},{"location":"generated-dont-edit/gen-terms-EN/#principal-term-principal","text":"Principals in a security context are entities which have been authenticated and can be assigned permissions to. A principal can be a user but for example also other services or a process running on a system. The term is used in the Java environment and throughout different authentication protocols (see GSSAPI RFC2744 or Kerberos RFC4121 ). Category: Security","title":"Principal {#term-principal}"},{"location":"generated-dont-edit/gen-terms-EN/#proxy-term-proxy","text":"(Design pattern) \"A wrapper or agent object that is being called by the client to access the real serving object behind the scenes. Use of the proxy can simply be forwarding to the real object, or can provide additional logic. In the proxy extra functionality can be provided, for example caching when operations on the real object are resource intensive, or checking preconditions before operations on the real object are invoked. For the client, usage of a proxy object is similar to using the real object, because both implement the same interface.\" (quoted from Wikipedia )","title":"Proxy {#term-proxy}"},{"location":"generated-dont-edit/gen-terms-EN/#pseudo-randomness-term-pseudo-randomness","text":"Often used in conjunction with pseudo-random-number-generators. Gathering randomness with a high entropy is resource intensive and usually not required by many applications, cryptography left aside. To address this issue pseudo-random-generators are initialized with a seed of data and create random values based on this seed. The data will be generated by random, but will always be the same if the generator is initialized with an identical seed. This is called pseudo-randomness and is less performance intensive. Category: Security","title":"Pseudo-Randomness {#term-pseudo-randomness}"},{"location":"generated-dont-edit/gen-terms-EN/#qualitative-evaluation-term-qualitative-evaluation","text":"Finding risks concerning the desired quality attributes of a system. Analyzing or assessing if a system or its architecture can meet the desired or required quality goals. Instead of calculating or measuring certain characteristics of systems or architectures, qualitative evaluation is concerned with risks, trade-offs and sensitivity points. See also assessment .","title":"Qualitative Evaluation {#term-qualitative-evaluation}"},{"location":"generated-dont-edit/gen-terms-EN/#quality-term-quality","text":"see software quality and quality attributes .","title":"Quality {#term-quality}"},{"location":"generated-dont-edit/gen-terms-EN/#quality-attribute-term-quality-attribute","text":"Software quality is the degree to which a system possesses the desired combination of attributes (see: software quality ). The Standard ISO-25010 defines the following quality attributes: Functional suitability Functional completeness Functional correctness Functional appropriateness Performance efficiency Time behaviour Resource utilization Capacity Compatibility Co-existence Interoperability Usability Appropriateness recognizability Learnability Operability User error protection User interface aesthetics Accessibility Reliability Availability Fault tolerance Recoverability Security Confidentiality Integrity Non-repudiation Accountability Authenticity Maintainability Modularity Reusability Analysability Modifiability Testability Portability Adaptability Installability Replaceability It's helpful to distinguish between: runtime quality attributes (which can be observed at execution time of the system), non-runtime quality attributes_ (which cannot be observed as the system executes) and business quality attributes (cost, schedule, marketability, appropriateness for organization) Examples of runtime quality attributes are functional suitability, performance efficiency, security, reliability, usability and interoperability. Examples of non-runtime quality attributes are modifiability, portability, reusability, integratability, and testability.","title":"Quality Attribute {#term-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#quality-characteristic-term-quality-characteristic","text":"synonym: quality attribute .","title":"Quality Characteristic {#term-quality-characteristic}"},{"location":"generated-dont-edit/gen-terms-EN/#quality-model-term-quality-model","text":"(from ISO 25010) A model that defines quality characteristics that relate to static properties of software and dynamic properties of the computer system and software products. The quality model provides consistent terminology for specifying, measuring and evaluating system and software product quality. The scope of application of the quality models includes supporting specification and evaluation of software and software-intensive computer systems from different perspectives by those associated with their acquisition, requirements, development, use, evaluation, support, maintenance, quality assurance and control, and audit.","title":"Quality Model {#term-quality-model}"},{"location":"generated-dont-edit/gen-terms-EN/#quality-requirement-term-quality-requirement","text":"Characteristic or attribute of a component of a system. Examples include runtime performance, safety, security, reliability or maintainability. See also software quality .","title":"Quality Requirement {#term-quality-requirement}"},{"location":"generated-dont-edit/gen-terms-EN/#quality-tree-term-quality-tree","text":"(syn: quality attribute utility tree). A hierarchical model to describe product quality: The root \"quality\" is hierarchically refined in areas or topics, which itself are refined again. Quality scenarios form the leaves of this tree. Standards for product quality, like ISO 25010 , propose generic quality trees. The quality of a specific system can be described by a specific quality tree (see the example below). {width=60%}","title":"Quality Tree {#term-quality-tree}"},{"location":"generated-dont-edit/gen-terms-EN/#quantitative-evaluation-term-quantative-evaluation","text":"(syn: quantative analysis): Measure or count values of software artifacts, e.g. coupling , cyclomatic complexity, size, test coverage. Metrics like these can help to identify critical parts or elements of systems.","title":"Quantitative Evaluation {#term-quantative-evaluation}"},{"location":"generated-dont-edit/gen-terms-EN/#randomness-term-randomness","text":"See Entropy or Pseudo-Randomness . Category: Security","title":"Randomness {#term-randomness}"},{"location":"generated-dont-edit/gen-terms-EN/#rationale-term-rationale","text":"Explanation of the reasoning or arguments that lie behind an architecture decision.","title":"Rationale {#term-rationale}"},{"location":"generated-dont-edit/gen-terms-EN/#rbac-role-based-access-control-term-rbac","text":"A role is a fixed set of permissions usually assigned to a group of principals . This allows a Role-Based-Access-Control usually to be implemented more efficient than an ACL based system and makes for example deputy arrangements possible. Category: Security","title":"RBAC (Role Based Access Control) {#term-rbac}"},{"location":"generated-dont-edit/gen-terms-EN/#recoverability-quality-attribute-term-recoverability-quality-attribute","text":"Degree to which, in the event of an interruption or a failure, a product or system can recover the data directly affected and re-establish the desired state of the system. Is a sub-characteristic of: reliability . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Recoverability Quality Attribute {#term-recoverability-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#redesign-term-redesign","text":"The alteration of software units in such a way that they fulfill a similar purpose as before, but in a different manner and possibly by different means. Often mistakenly called refactoring.","title":"Redesign {#term-redesign}"},{"location":"generated-dont-edit/gen-terms-EN/#refactoring-term-refactoring","text":"A term denoting the improvement of software units by changing their internal structure without changing the behavior. (see \u201cRefactoring is the process of changing a software system in such a way that it does not alter the external behavior of the code yet improves the internal structure.\u201d Refactoring, Martin Fowler, 1999 Not to be confused with re design","title":"Refactoring {#term-refactoring}"},{"location":"generated-dont-edit/gen-terms-EN/#registry-term-registry","text":"\"A well-known object that other objects can use to find common objects and services.\" (quoted from PoEAA ). Often implemented as a Singleton (also a well-known design pattern.)","title":"Registry {#term-registry}"},{"location":"generated-dont-edit/gen-terms-EN/#relationship-term-relationship","text":"Generic term denoting some kind of dependency between elements of an architecture. Different types of relationship are used within architectures, e.g. call, notification, ownership, containment, creation or inheritance.","title":"Relationship {#term-relationship}"},{"location":"generated-dont-edit/gen-terms-EN/#reliability-quality-attribute-term-reliability-quality-attribute","text":"Degree to which a system, product or component performs specified functions under specified conditions for a specified period of time. Is composed of the following sub-characteristics: maturity , availability , fault tolerance , recoverability . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Reliability Quality Attribute {#term-reliability-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#replaceability-quality-attribute-term-replaceability-quality-attribute","text":"Degree to which a product can replace another specified software product for the same purpose in the same environment. Is a sub-characteristic of: portability . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Replaceability Quality Attribute {#term-replaceability-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#repository-term-repository","text":"In architecture documentation: A place where artifacts are stored before an automatic build process collects them into one consistent document. In Domain-Driven Design : Repository is a building block of Domain-Driven Design . A repository hides technical details of the infrastructure layer to the domain layer. Repositories return entities that are persisted in the database.","title":"Repository {#term-repository}"},{"location":"generated-dont-edit/gen-terms-EN/#resource-utilization-quality-attribute-term-resource-utilization-quality-attribute","text":"Degree to which the amounts and types of resources used by a product or system, when performing its functions, meet requirements. Is a sub-characteristic of: performance efficiency . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Resource Utilization Quality Attribute {#term-resource-utilization-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#reusability-quality-attribute-term-reusability-quality-attribute","text":"Degree to which an asset can be used in more than one system, or in building other assets. Is a sub-characteristic of: maintainability . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Reusability Quality Attribute {#term-reusability-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#reuserelease-equivalence-principle-term-reuse-release-equivalence-principle","text":"A fundamental principle for designing the structure of software systems (also see Package Principles ). It demands that large components are \"released\" and under version control, in particular if the system uses them from multiple points. Even if we don't release them publicly, we should extract such components from the system and provide them through an external dependency manager with proper version control. The REP contains two different insights: On the large scale, modularity and low coupling require more than type separation. Reusability of components (even if all \"reuse\" is internal) translates to overall maintainability . Category: Design-Principle","title":"Reuse/Release Equivalence Principle {#term-reuse-release-equivalence-principle}"},{"location":"generated-dont-edit/gen-terms-EN/#risk-term-risk","text":"Simply said, a risk is the possibility that a problem occurs. A risk involves uncertainty about the effects, consequences or implications of an activity or decision, usually with a negative connotation concerning a certain value (such as health, money, or qualities of a system like availability or security).","title":"Risk {#term-risk}"},{"location":"generated-dont-edit/gen-terms-EN/#rmodp-term-rm-odp","text":"The Reference Model for Open Distributed Processing is an (abstract) metamodel for documentation of information systems. Defined in ISO/IEC 10746.","title":"RM/ODP {#term-rm-odp}"},{"location":"generated-dont-edit/gen-terms-EN/#round-trip-engineering-term-round-trip-engineering","text":"\"Concept of being able to make any kind of change to a model as well as to the code generated from that model. The changes always propagate bidirectional and both artifacts are always consistent.\" (quoted from Wikipedia ) D> ###### Comment (Gernot Starke) D> In my personal opinion, it does not work in practical situations, only in hello-world-like scenarios, as the inverse abstraction (from low-level sourcecode to higher-level architectural elements) usually involves design-decisions and cannot realistically be automated. D> D> ###### Comment (Matthias Bohlen) D>Recently I have seen code that originated from DDD where reverse engineering did indeed work.","title":"Round-trip Engineering {#term-round-trip-engineering}"},{"location":"generated-dont-edit/gen-terms-EN/#ruby-term-ruby","text":"A wonderful programming language. Category: Programming","title":"Ruby {#term-ruby}"},{"location":"generated-dont-edit/gen-terms-EN/#runtime-view-term-runtime-view","text":"Shows the cooperation or collaboration of building blocks (respectively their instances) at runtime in concrete scenarios. Should refer to elements of the Building Block View . Could for example (but doesn't need to) be expressed in UML sequence or activity diagrams.","title":"Runtime View {#term-runtime-view}"},{"location":"generated-dont-edit/gen-terms-EN/#solid-principles-term-solid-principles","text":"SOLID (single responsibility, open-closed, Liskov substitution, interface segregation and dependency inversion) is an acronym for some principles (named by Robert C. Martin ) to improve object-oriented programming and design. The principles make it more likely that a developer will write code that is easy to maintain and extend over time. For some additional sources, see Martin-SOLID .","title":"S.O.L.I.D. principles {#term-solid-principles}"},{"location":"generated-dont-edit/gen-terms-EN/#scenario-term-scenario","text":"Quality scenarios document required quality attributes. They \"... are brief narratives of expected or anticipated use of a system from both development and end-user viewpoints.\" ( Kazman+1996 ) Thus, they help to describe required or desired qualities of a system in pragmatic and informal manner, yet making the abstract notion of \u201cquality\u201d concrete and tangible. {width=50%} Event/stimulus: Any condition or event arriving at the system System (or part of the system) is stimulated by the event. Response: The activity undertaken after the arrival of the stimulus. Metric (response measure): The response should be measurable in some fashion. Usually scenarios are differentiated into: Usage scenarios (application scenarios) Change scenarios (modification or growth scenarios) Failure scenarios (boundary, stress, or exploratory scenarios)","title":"Scenario {#term-scenario}"},{"location":"generated-dont-edit/gen-terms-EN/#sdl-term-sdl","text":"A Secure-Development-Lifecycle is a companies usual software development process with additional practices of engineering secure software. This involves for example code reviews, architectural risk analyses, black/whitebox and penetration testing and many more additions. The whole lifecycle of an application should be covered by the SDL, beginning with the first requirements engineering tasks and ending with feedback from operating the released software by fixing security issues. See McGraw \"An Enterprise Software Security Program\", page 239 . Category: Security","title":"SDL {#term-sdl}"},{"location":"generated-dont-edit/gen-terms-EN/#security-goals-term-security-goals","text":"The goals are the key point of information security. They are a basic set of information attributes which can be fulfilled or not depending on a systems architecture and processes. The most common agreed set of security goals is the so called \"CIA triad\": Confidentiality Integrity Availability The \"Reference Model of Information Assuarance and Security\" (RIMAS) extends this list by Accountability, Auditability, Authenticity/Trustworthiness, Non-repudiation and Privacy. These are typical examples for non-functional requirements related to security. See \"What is Security Engineering - Definitions\", page 11 or RMIAS . Category: Security","title":"Security Goals {#term-security-goals}"},{"location":"generated-dont-edit/gen-terms-EN/#security-quality-attribute-term-security-quality-attribute","text":"Degree to which a product or system protects information and data so that persons or other products or systems have the degree of data access appropriate to their types and levels of authorization. Is composed of the following sub-characteristics: confidentiality , integrity , non-repudiation , accountability , authenticity . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Security Quality Attribute {#term-security-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#self-contained-system-scs-term-self-contained-system","text":"An architectural style, similar to Microservices . To quote from the site scs-architecture.org : \"The Self-contained System (SCS) approach is an architecture that focuses on a separation of the functionality into many independent systems, making the complete system a collaboration of many smaller software systems. This avoids the problem of large monoliths that grow constantly and eventually become unmaintainable\"","title":"Self Contained System (SCS) {#term-self-contained-system}"},{"location":"generated-dont-edit/gen-terms-EN/#sensitivity-point-term-sensitivity-point","text":"(in qualitative evaluation like ATAM): Element of the architecture or system influencing several quality attributes. For example, if one component is responsible for both runtime performance and robustness, that component is a sensitivity point. Casually said, if you mess up a sensitivity point, you will most often have more than one problem.","title":"Sensitivity Point {#term-sensitivity-point}"},{"location":"generated-dont-edit/gen-terms-EN/#separation-of-concerns-soc-term-separation-of-concern","text":"Any element of an architecture should have exclusivity and singularity of responsibility and purpose: No element should share the responsibilities of another element or contain unrelated responsibilities. Another definition is \"breaking down a system into elements that overlap as little as possible.\" Famous Edgar Dijkstra said in 1974: \u201cSeparation of concerns ... even if not perfectly possible, is the only available technique for effective ordering of one\u2019s thoughts\u201d. Similar to the Single Responsibility Principle .","title":"Separation of Concerns (SoC) {#term-separation-of-concern}"},{"location":"generated-dont-edit/gen-terms-EN/#sequence-diagram-term-sequence-diagram","text":"Type of diagram to illustrate how elements of an architecture interact to achieve a certain scenario. It shows the sequence (flow) of messages between elements. As parallel vertical lines it shows the lifespan of objects or components, horizontal lines depict interactions between these components. See the following example.","title":"Sequence Diagram {#term-sequence-diagram}"},{"location":"generated-dont-edit/gen-terms-EN/#service-term-service","text":"t.b.d.","title":"Service {#term-service}"},{"location":"generated-dont-edit/gen-terms-EN/#service-ddd-term-service-ddd","text":"Service is a building block of Domain-Driven Design . Services implement logic or processes of the business domain that are not executed by entities alone. A service is stateless and the parameters and return values of its operations are entities , aggregates and value objects .","title":"Service (DDD) {#term-service-ddd}"},{"location":"generated-dont-edit/gen-terms-EN/#signature-term-signature","text":"Signature of function or method: See function signature Digital signature: Method for verifying the authenticity of data or documents.","title":"Signature {#term-signature}"},{"location":"generated-dont-edit/gen-terms-EN/#single-responsibility-principle-srp-term-single-responsibility-principle","text":"Each element within a system or architecture should have a single responsibility, and that all its functions or services should be aligned with that responsibility. Cohesion is sometimes considered to be associated with the SRP.","title":"Single Responsibility Principle (SRP) {#term-single-responsibility-principle}"},{"location":"generated-dont-edit/gen-terms-EN/#singleton-term-singleton","text":"\"Design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system.\" (quoted from Wikipedia .","title":"Singleton {#term-singleton}"},{"location":"generated-dont-edit/gen-terms-EN/#software-architecture-term-software-architecture","text":"There exist several (!) valid and plausible definitions of the term Software Architecture . The following definition has been proposed by the IEEE 1471 standard: A>Software Architecture: the fundamental organization of a system A>embodied in its components, their relationships to each A>other and to the environment and the principles guiding A>its design and evolution. The new standard ISO/IEC/IEEE 42010:2011 has adopted and revised the definition as follows: A>Architecture: (system) fundamental concepts or properties of a system A>in its environment embodied in its elements, relationships, and in A>the principles of its design and evolution. The key terms in this definition require some explanation: Components: Subsystems, modules, classes, functions or the more general term building blocks : structural elements of software: Components are usually implemented in a programming language, but can also be other artifacts that (together) make up the system . Relationships: Interfaces, dependencies, associations - different names for the same feature: Components need to interact with other components to enable separation of concerns . Environment: Every system has some relationships to its environment: data, control flow or events are transferred to and from maybe different kinds of neighbours. Principles: Rules or conventions that hold for a system or several parts of it. Decision or definition, usually valid for several elements of the system. Often called concepts or even solution patterns . Principles (concepts) are the foundation for conceptual integrity . The Software Engineering Institure maintains a collection of further definitions Although the term often refers to the software architecture of an IT system , it is also used to refer to software architecture as an engineering science . Category: ISO-IEC-IEEE-42010","title":"Software Architecture {#term-software-architecture}"},{"location":"generated-dont-edit/gen-terms-EN/#software-quality-term-software-quality","text":"(from IEEE Standard 1061): Software quality is the degree to which software possesses a desired combination of attributes. This desired combination of attributes need to be clearly defined; otherwise, assessment of quality is left to intuition. (from ISO/IEC Standard 25010): The quality of a system is the degree to which the system satisfies the stated and implied needs of its various stakeholders, and thus provides value. These stated and implied needs are represented in the ISO 25000 quality models that categorize product quality into characteristics, which in some cases are further subdivided into subcharacteristics.","title":"Software Quality {#term-software-quality}"},{"location":"generated-dont-edit/gen-terms-EN/#stable-abstractions-principle-term-stable-abstractions-principle","text":"A fundamental principle for designing the structure of software systems (also see Package Principles ). It demands that the abstractness of components is proportional to their stability. The closely related SDP also explains the notion of stability in this context. We want components that represent abstract concepts and responsibilities to require little or no modification because many conceptually more specific (concrete) components depend on them. And we want components that should or could not easily change to be at least abstract enough so we can extend them. This relates to the OCP . The SAP can sound like a circular argument until the underlying idea shines through: Concrete things and concepts are naturally more volatile, specific, arbitrary and numerous than abstract ones. The component structure of a system simply should reflect that. General logic, the system's physical artifacts as well as its functional and technical concepts should all be in congruence. The SAP is closely related to the SDP . Their combination amounts to a more general and arguably more profound version of the DIP : Specific concepts naturally depend on more abstract ones because they are composed or derived from more general-purpose building blocks. And dependent concepts are naturally more specific because they are defined by more information than their dependencies (assuming there are no dependence cycles ). Category: Design-Principle","title":"Stable Abstractions Principle {#term-stable-abstractions-principle}"},{"location":"generated-dont-edit/gen-terms-EN/#stable-dependencies-principle-term-stable-dependencies-principle","text":"A fundamental principle for designing the structure of software systems (also see Package Principles ). It demands that frequently changing components depend on more stable ones. Part of the volatility of a component is expected and naturally implied by its particular responsibility. But stability in this context is also a function of incoming and outgoing dependencies. A component that is heavily depended on by others is harder to change and condsidered to be more stable. A component that heavily depends on others has more reasons to change and is considered to be less stable. So in regards to dependence, a component with many clients should not depend on one with many dependencies. A single component with both of these properties is also a red flag. Such a component has many reasons to change but is at the same time hard to change. Original definitions of the SDP (like Martin-2003 ) involve a metric I of instability . Unfortunately, that metric doesn't capture intended/inherent volatility, transitive dependence or cases like the red flag mentioned above. But we value the idea of the SDP regardless of how it can be measured. The SDP is closely related to the SAP . Their combination amounts to a version of the DIP (more on this under SAP ). Category: Design-Principle","title":"Stable Dependencies Principle {#term-stable-dependencies-principle}"},{"location":"generated-dont-edit/gen-terms-EN/#stakeholder-term-stakeholder","text":"Person or organization that can be affected by or have in interest ( stake ) in a system, its development or execution. Examples include users, employees, owners, administrators, developers, designers, project- or product-managers, product-owner, project manager, requirements engineers, business-analysts, government agencies, enterprise architects etc. Following ISO/IEC/IEEE 42010 a stakeholder is a (system) individual, team, organization, or classes thereof, having an interest in a system (as defined in ISO/IEC/IEEE 42010). Such interest can be positive (e.g. stakeholder wants to benefit from the system), neutral (stakeholder has to test or verify the system) or negative (stakeholder is competing with the system or wants it to fail). Category: ISO-IEC-IEEE-42010","title":"Stakeholder {#term-stakeholder}"},{"location":"generated-dont-edit/gen-terms-EN/#structural-element-term-structural-element","text":"see [Building Block(#term-building-block) or Component","title":"Structural Element {#term-structural-element}"},{"location":"generated-dont-edit/gen-terms-EN/#structure-term-structure","text":"An arrangement, order or organization of interrelated elements in a system. Structures consist of building blocks (structural elements) and their relationships (dependencies). Structures in software architecture are often used in architecture views , e.g. the building block view . A documentation template (e.g. arc42 ) is a kind of structure too.","title":"Structure {#term-structure}"},{"location":"generated-dont-edit/gen-terms-EN/#symmetric-cryptography-term-symmetric-cryptography","text":"Symmetric cryptography is based on an identical key for encryption and decryption of data. Sender and receiver have to agree on a key for communication. See Schneier, Symmetric Algorithms, page 17 . Category: Security","title":"Symmetric Cryptography {#term-symmetric-cryptography}"},{"location":"generated-dont-edit/gen-terms-EN/#system-term-system","text":"Collection of elements (building blocks, components etc) organized for a common purpose. In ISO/IEC/IEEE Standards a couple of system definitions are available: systems as described in [ISO/IEC 15288]: \u201csystems that are man-made and may be configured with one or more of the following: hardware, software, data, humans, processes (e.g., processes for providing service to users), procedures (e.g. operator instructions), facilities, materials and naturally occurring entities\u201d. software products and services as described in [ISO/IEC 12207]. software-intensive systems as described in [IEEE Std 1471:2000]: \u201cany system where software contributes essential influences to the design, construction, deployment, and evolution of the system as a whole\u201d to encompass \u201cindividual applications, systems in the traditional sense, subsystems, systems of systems, product lines, product families, whole enterprises, and other aggregations of interest\u201d. Category: ISO-IEC-IEEE-42010","title":"System {#term-system}"},{"location":"generated-dont-edit/gen-terms-EN/#system-of-interest-term-system-of-interest","text":"System-of-Interest (or simply, system) refers to the system whose architecture is under consideration in the preparation of an architecture description (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010","title":"System-of-Interest {#term-system-of-interest}"},{"location":"generated-dont-edit/gen-terms-EN/#template-for-documentation-term-template","text":"Standardized order of artifacts used in software development. It can help base other files, especially documents in a predefines structure without prescribing the content of these single files. A well known example of such templates is arc42","title":"Template (for Documentation) {#term-template}"},{"location":"generated-dont-edit/gen-terms-EN/#temporal-coupling-term-temporal-coupling","text":"Different interpretations exist from various sources. Temporal coupling: means that processes that are communicating will both have to be up and running. See Tanenbaum+2016 . when you often commit ( modify ) different components at the same time. See Tornhill-2015 . when there's an implicit relationship between two, or more, members of a class requiring clients to invoke one member before the other. Mark Seemann, see https://blog.ploeh.dk/2011/05/24/DesignSmellTemporalCoupling/ means that one system needs to wait for the response of another system before it can continue processing. See https://www.beeworks.be/blog/2017/rest-antipattern.html","title":"Temporal Coupling {#term-temporal-coupling}"},{"location":"generated-dont-edit/gen-terms-EN/#testability-quality-attribute-term-testability-quality-attribute","text":"Degree of effectiveness and efficiency with which test criteria can be established for a system, product or component and tests can be performed to determine whether those criteria have been met. Is a sub-characteristic of: maintainability . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Testability Quality Attribute {#term-testability-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#time-behaviour-quality-attribute-term-time-behaviour-quality-attribute","text":"Degree to which the response and processing times and throughput rates of a product or system, when performing its functions, meet requirements. Is a sub-characteristic of: performance efficiency . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Time Behaviour Quality Attribute {#term-time-behaviour-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#tls-term-tls","text":"T ransport- L ayer- S ecurity is a set of protocols to cryptographically secure the communication of two partys by the means of the CIA-triad . It is widely used for secure communication on the internet and the foundation for HTTPS. TLS started as an update to its predecessor SSL (Secure Socket Layer) Version 3.0 and should be used now instead of SSL see RFC7568 \"Deprecating Secure Sockets Layer Version 3.0\" . Category: Security","title":"TLS {#term-tls}"},{"location":"generated-dont-edit/gen-terms-EN/#togaf-term-togaf","text":"The Open Group Architecture Framework is a conceptual framework for planning and maintenance of enterprise IT architectures.","title":"TOGAF {#term-togaf}"},{"location":"generated-dont-edit/gen-terms-EN/#tools-and-material-approach-term-tools-and-material-approach","text":"t.b.d.","title":"Tools-and-material-approach {#term-tools-and-material-approach}"},{"location":"generated-dont-edit/gen-terms-EN/#top-down-term-top-down","text":"\"Direction of work\" or \"order of communication\": Starting from an abstract or general construct working towards more concrete, special or detailed representation.","title":"Top-Down {#term-top-down}"},{"location":"generated-dont-edit/gen-terms-EN/#traceability-term-traceability","text":"(more precisely: requirements traceability): Document that all requirements are addressed by elements of the system (forward traceability) and all elements of the system are justified by at least one requirement (backward traceability) My personal opinion: If you can, you should avoid traceabiltiy, as it creates a lot of documentation overhead.","title":"Traceability {#term-traceability}"},{"location":"generated-dont-edit/gen-terms-EN/#trade-off-term-tradeoff","text":"(syn: compromise). A balance achieved or negotiated between two desired or required but usually incompatible or contradicting features. For example, software development usually has to tradeoff memory consumption and runtime speed. More colloquially, if one thing increases, some other thing must decrease. Even more colloquially: There is no free lunch. Every quality attribute has a price among other quality attributes.","title":"Trade-Off {#term-tradeoff}"},{"location":"generated-dont-edit/gen-terms-EN/#trainer-term-trainer","text":"A trainer is a person who conducts a training course himself, provided that this is carried out within the framework of a accreditation granted to an accredited training provider . Accordingly, accredited training providers may only organise and conduct CPSA training courses with accredited trainers. Only accredited training providers can apply for trainer accreditations .","title":"Trainer {#term-trainer}"},{"location":"generated-dont-edit/gen-terms-EN/#training-level-term-training-level","text":"The iSAQB\u00ae CPSA education programme is divided into (currently) two Training Levels: Foundation Level and Advanced Level . The Training Levels should contain knowledge that builds upon one another. The exact relationships between each other and the contents of the Training Level are defined in the respective curricula ( syllabi ).","title":"Training Level {#term-training-level}"},{"location":"generated-dont-edit/gen-terms-EN/#training-provider-term-training-provider","text":"An organisation or person who holds the rights of use to accredited training materials or who has purchased accreditation for training materials, provides trainers and infrastructure and conducts training courses.","title":"Training Provider {#term-training-provider}"},{"location":"generated-dont-edit/gen-terms-EN/#ubiquitous-language-term-ubiquitous-language","text":"A concept of Domain-Driven Design : The ubiquitous language is a language that is structured around the domain model . It is used by all team members to connect all the activities of the team with the software. The ubiquitous language is a living thing that is evolving during a project and will be changed during the whole live cycle of the software.","title":"Ubiquitous Language {#term-ubiquitous-language}"},{"location":"generated-dont-edit/gen-terms-EN/#unified-modeling-language-uml-term-uml","text":"(UML) is a graphical language for visualizing, specifying and documenting the artifacts and structures of a software system. For building block views or the context view, use component diagrams, with either components, packages or classes to denote building blocks. For runtime views, use sequence- or activity diagrams (with swimlanes). Object diagrams can theoretically be used, but are practically not adviced, as they become cluttered even for small scenarios. For Deployment views, use deployment diagrams with node symbols.","title":"Unified Modeling Language (UML) {#term-uml}"},{"location":"generated-dont-edit/gen-terms-EN/#unit-test-term-unit-test","text":"Test of the smallest testable parts of system to determine whether they are fit for use. Depending on implementation technology, a unit might be a method, function, interface or similar element.","title":"Unit Test {#term-unit-test}"},{"location":"generated-dont-edit/gen-terms-EN/#usability-quality-attribute-term-usability-quality-attribute","text":"Degree to which a product or system can be used by specified users to achieve specified goals with effectiveness, efficiency and satisfaction in a specified context of use. Is composed of the following sub-characteristics: appropriateness recognizability , learnability , operability , user error protection , user interface aesthetics , accessibility . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"Usability Quality Attribute {#term-usability-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#user-error-protection-quality-attribute-term-user-error-protection-quality-attribute","text":"Degree to which a system protects users against making errors. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"User Error Protection Quality Attribute {#term-user-error-protection-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#user-interface-aesthetics-quality-attribute-term-user-interface-aesthetics-quality-attribute","text":"Degree to which a user interface enables pleasing and satisfying interaction for the user. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010","title":"User Interface Aesthetics Quality Attribute {#term-user-interface-aesthetics-quality-attribute}"},{"location":"generated-dont-edit/gen-terms-EN/#uses-relationship-term-uses-relationship","text":"Dependency that exists between two building blocks. If A uses B than execution of A depends on the presence of a correct implementation of B.","title":"Uses Relationship {#term-uses-relationship}"},{"location":"generated-dont-edit/gen-terms-EN/#value-object-term-value-object","text":"Value Object is a building block of Domain-Driven Design . ValueObjects do not have a conceptual identity of their own and should be treated as immutable. They are used to describe the state of entities and may be composed of other value objects but never of entities .","title":"Value Object {#term-value-object}"},{"location":"generated-dont-edit/gen-terms-EN/#view-term-view","text":"see: architecture view","title":"View {#term-view}"},{"location":"generated-dont-edit/gen-terms-EN/#waterfall-development-term-waterfall-development","text":"Development approach \"where you gather all the requirements up front, do all necessary design, down to a detailed level, then hand the specs to the coders, who write the code; then you do testing (possibly with a side trip to IntegrationHell) and deliver the whole thing in one big end-all release. Everything is big including the risk of failure.\" (quoted from the C2 wiki ) Contrast to iterative development .","title":"Waterfall Development {#term-waterfall-development}"},{"location":"generated-dont-edit/gen-terms-EN/#web-of-trust-term-web-of-trust","text":"Since a single CA could be an easy target for an attacker the web of trust delegates the establishment of trust to the user. Each user decides which other users proof of identity he trusts, usually by verifying a fingerprint of a given key. This trust is expressed by signing the key of the other user who can then publish it with the additional signature. A third user can then verify this signature and decide to trust the identity or not. The email encryption PGP is an example for a PKI based on a web of trust. Category: Security","title":"Web of Trust {#term-web-of-trust}"},{"location":"generated-dont-edit/gen-terms-EN/#white-box-term-whitebox","text":"Shows the internal structure of a system or building block, made up from blackboxes and the internal/external relationships and interfaces. See also Black Box .","title":"White Box {#term-whitebox}"},{"location":"generated-dont-edit/gen-terms-EN/#workflow-management-system-wfms-term-workflow-management-system","text":"Provides an infrastructure for the set-up, performance and monitoring of a defined sequence of tasks, arranged as a workflow. (quoted from Wikipedia)","title":"Workflow Management System (WFMS) {#term-workflow-management-system}"},{"location":"generated-dont-edit/gen-terms-EN/#wrapper-term-wrapper","text":"(syn: Decorator, Adapter, Gateway) Patterns to abstract away the concrete interface or implementation of a component. Attach additional responsibilities to an object dynamically. Depending on the sources, the semantics of the term wrapper may vary. D> ###### Comment (Gernot Starke) D> The tiny differences found in literature regarding this term often don't matter in real-life. Wrapping a component or building-block shall have a clear semantics within a single software system.","title":"Wrapper {#term-wrapper}"},{"location":"generated-dont-edit/gen-tt-DE-EN/","text":"{width=95%} |German |English | |----------------------|-------------------| |Abh\u00e4ngigkeit |Coupling, Dependency | |----------------------|-------------------| |Abh\u00e4ngigkeit (zwischen Entwurfsentscheidungen) |Interdependency (between design decisions) | |----------------------|-------------------| |Ablage |Repository | |----------------------|-------------------| |Ablaufsteuerung |Workflow management | |----------------------|-------------------| |Abw\u00e4gung |Tradeoff | |----------------------|-------------------| |Amtsgericht |Local court | |----------------------|-------------------| |Anforderung |Requirement | |----------------------|-------------------| |Angemessenheit |Adequacy, Appropriateness, Commensurability | |----------------------|-------------------| |Angriffsb\u00e4ume |Attack Tree | |----------------------|-------------------| |Anpassung |Adaption | |----------------------|-------------------| |Ansatz |Approach | |----------------------|-------------------| |Arbeitsgruppe |Working group | |----------------------|-------------------| |Arbeitsgruppenleiter |Working group head | |----------------------|-------------------| |Arbeitsgruppenordnung |Team regulations | |----------------------|-------------------| |Arbeitsmittel |Tools | |----------------------|-------------------| |Arbeitsumgebung |Working environment | |----------------------|-------------------| |Architekturanalyse |Architecture assessment, Architecture evaluation | |----------------------|-------------------| |Architekturbewertung |Architecture assessment, Architecture evaluation | |----------------------|-------------------| |Architekturmuster |Architectural pattern | |----------------------|-------------------| |Architektursicht |Architectural view | |----------------------|-------------------| |Architekturziel |Architectural objective, Architecture objective | |----------------------|-------------------| |Artefakt |Artifact | |----------------------|-------------------| |Aspekt |Aspect | |----------------------|-------------------| |Aufgabe |Task | |----------------------|-------------------| |Baustein |Building block, Component, Module | |----------------------|-------------------| |Bausteinsicht |Building block view | |----------------------|-------------------| |Begriff |Term | |----------------------|-------------------| |Begr\u00fcndung |Rationale | |----------------------|-------------------| |Begutachtung |Assessment | |----------------------|-------------------| |Belang |Aspect, Concern | |----------------------|-------------------| |Benachrichtigung |Notification | |----------------------|-------------------| |Benutzt-Beziehung |Uses relationship | |----------------------|-------------------| |Beschluss |Resolution | |----------------------|-------------------| |Beschreibung (von Softwarearchitektur) |Specification (of software architecture) | |----------------------|-------------------| |Beschreibungsmittel |Means for describing, Means for documenting | |----------------------|-------------------| |Betriebsprozesse (von Software) |Operational processes | |----------------------|-------------------| |Bewertung |Assessment, Evaluation | |----------------------|-------------------| |Beziehung |Association, Dependency, Relationship | |----------------------|-------------------| |Beziehungsart |Relationship (kind of) | |----------------------|-------------------| |Dom\u00e4ne |Business | |----------------------|-------------------| |Echtzeitsystem |Real-time system | |----------------------|-------------------| |Einfache Lizenz |Non-exclusive license | |----------------------|-------------------| |Einflussfaktor |Influencing Factor | |----------------------|-------------------| |Eingebettet |Embedded | |----------------------|-------------------| |Einhaltung |Compliance | |----------------------|-------------------| |Einordnung (eines Begriffes) in einen Zusammenhang |Context (of a term) | |----------------------|-------------------| |Einschr\u00e4nkung |Constraint | |----------------------|-------------------| |Einsch\u00e4tzung |Assessment | |----------------------|-------------------| |Entwurf |Design | |----------------------|-------------------| |Entwurfsansatz |Design approach | |----------------------|-------------------| |Entwurfsentscheidung |Design decision | |----------------------|-------------------| |Entwurfsmethodik |Design approach | |----------------------|-------------------| |Entwurfsprinzip |Design principle | |----------------------|-------------------| |Erf\u00fcllung |Compliance | |----------------------|-------------------| |Erkl\u00e4rung |Rationale | |----------------------|-------------------| |Fachdom\u00e4ne |Domain | |----------------------|-------------------| |fachliche Architektur |Business architecture, Domain-related architecture | |----------------------|-------------------| |Fachlicher Bereich |Domain | |----------------------|-------------------| |Fachlichkeit |Business | |----------------------|-------------------| |Fertigkeit |Skill | |----------------------|-------------------| |F\u00e4higkeit |Skill | |----------------------|-------------------| |Geb\u00fchrenordnung |Fees rules and regulations | |----------------------|-------------------| |Geheimnisprinzip |Information hiding principle | |----------------------|-------------------| |Gemmeinn\u00fctzig |Non-profit | |----------------------|-------------------| |Gesch\u00e4ftsarchitektur |Business architecture | |----------------------|-------------------| |Gesch\u00e4ftsbereich |Domain | |----------------------|-------------------| |innerer Zusammenhalt |Cohesion | |----------------------|-------------------| |Integrit\u00e4t |Integrity | |----------------------|-------------------| |Kanal |Channel | |----------------------|-------------------| |Kapselung |Encapsulation | |----------------------|-------------------| |Knoten |Node | |----------------------|-------------------| |Koh\u00e4sion |Cohesion | |----------------------|-------------------| |Komponente |Component, Module | |----------------------|-------------------| |Kompromiss |Tradeoff | |----------------------|-------------------| |Kontextabgrenzung |Context view | |----------------------|-------------------| |Konzept |Principle | |----------------------|-------------------| |Kopplung |Coupling | |----------------------|-------------------| |Laufzeit |Runtime | |----------------------|-------------------| |Laufzeitsicht |Runtime view | |----------------------|-------------------| |Lehrplan |Curriculum | |----------------------|-------------------| |Lernziel |Learning goal | |----------------------|-------------------| |Lizenzgeber |Licensor | |----------------------|-------------------| |Lizenzgeb\u00fchr |License fee | |----------------------|-------------------| |Lizenznehmer |Licensee, License holder | |----------------------|-------------------| |Lizenzvereinbarung |Licensing agreement | |----------------------|-------------------| |Lizenzvertrag |Licensing agreement | |----------------------|-------------------| |Mal-/Zeichenprogramm |Drawing Tool | |----------------------|-------------------| |Marke (gesetzlich gesch\u00fctzt) |Registered trademark | |----------------------|-------------------| |materiell f\u00f6rderndes Mitglied |sponsoring (board) member | |----------------------|-------------------| |Messbarkeit |Commensurability, Measurability | |----------------------|-------------------| |Mitgliederversammlung |General meeting, Members' meeting | |----------------------|-------------------| |Modellierungswerkzeug |Modeling Tool | |----------------------|-------------------| |Modul |Module | |----------------------|-------------------| |Muster |Pattern | |----------------------|-------------------| |Musterfamilie |Pattern language | |----------------------|-------------------| |Mustersprache |Pattern language | |----------------------|-------------------| |Nutzungsbeziehung |Uses relationship | |----------------------|-------------------| |Nutzungsrecht |Rights of use | |----------------------|-------------------| |Perspektive |Perspective | |----------------------|-------------------| |Prinzip |Principle | |----------------------|-------------------| |Pr\u00fcfer |Examiner | |----------------------|-------------------| |Pr\u00fcfling |Examinee | |----------------------|-------------------| |Pr\u00fcfungsaufgabe |Examination task | |----------------------|-------------------| |Pr\u00fcfungsbogen |Examination sheet | |----------------------|-------------------| |Pr\u00fcfungsfrage |Examination question | |----------------------|-------------------| |Pr\u00fcfungsordnung |Examination rules and regulations | |----------------------|-------------------| |Qualit\u00e4tseigenschaft |Quality attribute, Quality characteristic, Quality feature | |----------------------|-------------------| |Qualit\u00e4tsmerkmal |Quality attribute, Quality characteristic, Quality feature | |----------------------|-------------------| |Querschnittlich |Crosscutting | |----------------------|-------------------| |Randbedingung |Constraint | |----------------------|-------------------| |Rechnungspr\u00fcfer |Cash auditor | |----------------------|-------------------| |Rechnungspr\u00fcfung |Cash audit | |----------------------|-------------------| |Sachziele |Security Goals | |----------------------|-------------------| |Satzung des Vereins |Articles of assocation | |----------------------|-------------------| |satzungsgem\u00e4\u00df |statutory | |----------------------|-------------------| |Schatzmeister |Treasurer | |----------------------|-------------------| |Schnittstelle |Interface | |----------------------|-------------------| |Schnittstellenbeschreibung |Interface description | |----------------------|-------------------| |Schnittstellendokumentation |Interface description | |----------------------|-------------------| |Schrank (als Metapher f\u00fcr Template) |Cabinet (as methaphor for template) | |----------------------|-------------------| |Schulungsanbieter |Training provider | |----------------------|-------------------| |Schutzziele |Security Goals | |----------------------|-------------------| |Sch\u00e4tzung |Estimation | |----------------------|-------------------| |Sicht |Architectural view, View | |----------------------|-------------------| |Sparsamkeit |Economicalness, Thriftyness | |----------------------|-------------------| |Stellvertretender Vorsitzender |Deputy chairman | |----------------------|-------------------| |Struktur |Structure | |----------------------|-------------------| |Unternehmens-IT-Architektur |Enterprise IT architecture | |----------------------|-------------------| |Untersuchung |Assessment | |----------------------|-------------------| |Verantwortlichkeit |Responsibility | |----------------------|-------------------| |Verein |Association | |----------------------|-------------------| |Verf\u00fcgbarkeit |Availability | |----------------------|-------------------| |Vergleichbarkeit |Commensurability | |----------------------|-------------------| |Verteilung |Deployment | |----------------------|-------------------| |Verteilungsartefakt |Deployment unit | |----------------------|-------------------| |Verteilungssicht |Deployment view | |----------------------|-------------------| |Vertraulichkeit |Confidentiality | |----------------------|-------------------| |Vorsitzender |Chairman | |----------------------|-------------------| |Vorstand |Executive board | |----------------------|-------------------| |Werkzeug |Tools | |----------------------|-------------------| |Werkzeug-Material-Ansatz |Tools-and-material-approach | |----------------------|-------------------| |Wirtschaftlichkeit |Economicalness, Thriftyness | |----------------------|-------------------| |Zerlegung |Decomposition | |----------------------|-------------------| |Zertifizierungsstelle |Certification authority, Certification body | |----------------------|-------------------| |Ziel |Objective | |----------------------|-------------------|","title":"gen tt DE EN"},{"location":"generated-dont-edit/gen-tt-EN-DE/","text":"The following tables have been automatically generated[^TransTableGenerationDate] from JSON by Groovy and Gradle. [^TransTableGenerationDate]:133 english terms, generated on Oktober/04/2016 {width=95%} |English |German | |----------------------|-------------------| |Adaption |Anpassung | |----------------------|-------------------| |Adequacy |Angemessenheit | |----------------------|-------------------| |Approach |Ansatz | |----------------------|-------------------| |Appropriateness |Angemessenheit | |----------------------|-------------------| |Architectural objective |Architekturziel | |----------------------|-------------------| |Architectural pattern |Architekturmuster | |----------------------|-------------------| |Architectural view |Architektursicht, Sicht | |----------------------|-------------------| |Architecture assessment |Architekturanalyse, Architekturbewertung | |----------------------|-------------------| |Architecture evaluation |Architekturbewertung, Architekturanalyse | |----------------------|-------------------| |Architecture objective |Architekturziel | |----------------------|-------------------| |Articles of assocation |Satzung des Vereins | |----------------------|-------------------| |Artifact |Artefakt | |----------------------|-------------------| |Aspect |Aspekt, Belang | |----------------------|-------------------| |Assessment |Bewertung, Begutachtung, Einsch\u00e4tzung, Untersuchung | |----------------------|-------------------| |Association |Verein, Beziehung | |----------------------|-------------------| |Attack Tree |Angriffsb\u00e4ume | |----------------------|-------------------| |Availability |Verf\u00fcgbarkeit | |----------------------|-------------------| |Building block |Baustein | |----------------------|-------------------| |Building block view |Bausteinsicht | |----------------------|-------------------| |Business |Fachlichkeit, Dom\u00e4ne | |----------------------|-------------------| |Business architecture |fachliche Architektur, Gesch\u00e4ftsarchitektur | |----------------------|-------------------| |Cabinet (as methaphor for template) |Schrank (als Metapher f\u00fcr Template) | |----------------------|-------------------| |Cash audit |Rechnungspr\u00fcfung | |----------------------|-------------------| |Cash auditor |Rechnungspr\u00fcfer | |----------------------|-------------------| |Certification authority |Zertifizierungsstelle | |----------------------|-------------------| |Certification body |Zertifizierungsstelle | |----------------------|-------------------| |Chairman |Vorsitzender | |----------------------|-------------------| |Channel |Kanal | |----------------------|-------------------| |Cohesion |Koh\u00e4sion, innerer Zusammenhalt | |----------------------|-------------------| |Commensurability |Angemessenheit, Messbarkeit, Vergleichbarkeit | |----------------------|-------------------| |Compliance |Erf\u00fcllung, Einhaltung | |----------------------|-------------------| |Component |Baustein, Komponente | |----------------------|-------------------| |Concern |Belang | |----------------------|-------------------| |Confidentiality |Vertraulichkeit | |----------------------|-------------------| |Constraint |Randbedingung, Einschr\u00e4nkung | |----------------------|-------------------| |Context (of a term) |Einordnung (eines Begriffes) in einen Zusammenhang | |----------------------|-------------------| |Context view |Kontextabgrenzung | |----------------------|-------------------| |Coupling |Kopplung, Abh\u00e4ngigkeit | |----------------------|-------------------| |Crosscutting |Querschnittlich | |----------------------|-------------------| |Curriculum |Lehrplan | |----------------------|-------------------| |Decomposition |Zerlegung | |----------------------|-------------------| |Dependency |Abh\u00e4ngigkeit, Beziehung | |----------------------|-------------------| |Deployment |Verteilung | |----------------------|-------------------| |Deployment unit |Verteilungsartefakt | |----------------------|-------------------| |Deployment view |Verteilungssicht | |----------------------|-------------------| |Deputy chairman |Stellvertretender Vorsitzender | |----------------------|-------------------| |Design |Entwurf | |----------------------|-------------------| |Design approach |Entwurfsansatz, Entwurfsmethodik | |----------------------|-------------------| |Design decision |Entwurfsentscheidung | |----------------------|-------------------| |Design principle |Entwurfsprinzip | |----------------------|-------------------| |Domain |Fachdom\u00e4ne, Fachlicher Bereich, Gesch\u00e4ftsbereich | |----------------------|-------------------| |Domain-related architecture |fachliche Architektur | |----------------------|-------------------| |Drawing Tool |Mal-/Zeichenprogramm | |----------------------|-------------------| |Economicalness |Sparsamkeit, Wirtschaftlichkeit | |----------------------|-------------------| |Embedded |Eingebettet | |----------------------|-------------------| |Encapsulation |Kapselung | |----------------------|-------------------| |Enterprise IT architecture |Unternehmens-IT-Architektur | |----------------------|-------------------| |Estimation |Sch\u00e4tzung | |----------------------|-------------------| |Evaluation |Bewertung | |----------------------|-------------------| |Examination question |Pr\u00fcfungsfrage | |----------------------|-------------------| |Examination rules and regulations |Pr\u00fcfungsordnung | |----------------------|-------------------| |Examination sheet |Pr\u00fcfungsbogen | |----------------------|-------------------| |Examination task |Pr\u00fcfungsaufgabe | |----------------------|-------------------| |Examinee |Pr\u00fcfling | |----------------------|-------------------| |Examiner |Pr\u00fcfer | |----------------------|-------------------| |Executive board |Vorstand | |----------------------|-------------------| |Fees rules and regulations |Geb\u00fchrenordnung | |----------------------|-------------------| |General meeting |Mitgliederversammlung | |----------------------|-------------------| |Influencing Factor |Einflussfaktor | |----------------------|-------------------| |Information hiding principle |Geheimnisprinzip | |----------------------|-------------------| |Integrity |Integrit\u00e4t | |----------------------|-------------------| |Interdependency (between design decisions) |Abh\u00e4ngigkeit (zwischen Entwurfsentscheidungen) | |----------------------|-------------------| |Interface |Schnittstelle | |----------------------|-------------------| |Interface description |Schnittstellenbeschreibung, Schnittstellendokumentation | |----------------------|-------------------| |Learning goal |Lernziel | |----------------------|-------------------| |License fee |Lizenzgeb\u00fchr | |----------------------|-------------------| |License holder |Lizenznehmer | |----------------------|-------------------| |Licensee |Lizenznehmer | |----------------------|-------------------| |Licensing agreement |Lizenzvertrag, Lizenzvereinbarung | |----------------------|-------------------| |Licensor |Lizenzgeber | |----------------------|-------------------| |Local court |Amtsgericht | |----------------------|-------------------| |Means for describing |Beschreibungsmittel | |----------------------|-------------------| |Means for documenting |Beschreibungsmittel | |----------------------|-------------------| |Measurability |Messbarkeit | |----------------------|-------------------| |Members' meeting |Mitgliederversammlung | |----------------------|-------------------| |Modeling Tool |Modellierungswerkzeug | |----------------------|-------------------| |Module |Komponente, Modul, Baustein | |----------------------|-------------------| |Node |Knoten | |----------------------|-------------------| |Non-exclusive license |Einfache Lizenz | |----------------------|-------------------| |Non-profit |Gemmeinn\u00fctzig | |----------------------|-------------------| |Notification |Benachrichtigung | |----------------------|-------------------| |Objective |Ziel | |----------------------|-------------------| |Operational processes |Betriebsprozesse (von Software) | |----------------------|-------------------| |Pattern |Muster | |----------------------|-------------------| |Pattern language |Mustersprache, Musterfamilie | |----------------------|-------------------| |Perspective |Perspektive | |----------------------|-------------------| |Principle |Prinzip, Konzept | |----------------------|-------------------| |Quality attribute |Qualit\u00e4tsmerkmal, Qualit\u00e4tseigenschaft | |----------------------|-------------------| |Quality characteristic |Qualit\u00e4tsmerkmal, Qualit\u00e4tseigenschaft | |----------------------|-------------------| |Quality feature |Qualit\u00e4tsmerkmal, Qualit\u00e4tseigenschaft | |----------------------|-------------------| |Rationale |Begr\u00fcndung, Erkl\u00e4rung | |----------------------|-------------------| |Real-time system |Echtzeitsystem | |----------------------|-------------------| |Registered trademark |Marke (gesetzlich gesch\u00fctzt) | |----------------------|-------------------| |Relationship |Beziehung | |----------------------|-------------------| |Relationship (kind of) |Beziehungsart | |----------------------|-------------------| |Repository |Ablage | |----------------------|-------------------| |Requirement |Anforderung | |----------------------|-------------------| |Resolution |Beschluss | |----------------------|-------------------| |Responsibility |Verantwortlichkeit | |----------------------|-------------------| |Rights of use |Nutzungsrecht | |----------------------|-------------------| |Runtime |Laufzeit | |----------------------|-------------------| |Runtime view |Laufzeitsicht | |----------------------|-------------------| |Security Goals |Schutzziele, Sachziele | |----------------------|-------------------| |Skill |F\u00e4higkeit, Fertigkeit | |----------------------|-------------------| |Specification (of software architecture) |Beschreibung (von Softwarearchitektur) | |----------------------|-------------------| |sponsoring (board) member |materiell f\u00f6rderndes Mitglied | |----------------------|-------------------| |statutory |satzungsgem\u00e4\u00df | |----------------------|-------------------| |Structure |Struktur | |----------------------|-------------------| |Task |Aufgabe | |----------------------|-------------------| |Team regulations |Arbeitsgruppenordnung | |----------------------|-------------------| |Term |Begriff | |----------------------|-------------------| |Thriftyness |Sparsamkeit, Wirtschaftlichkeit | |----------------------|-------------------| |Tools |Arbeitsmittel, Werkzeug | |----------------------|-------------------| |Tools-and-material-approach |Werkzeug-Material-Ansatz | |----------------------|-------------------| |Tradeoff |Kompromiss, Abw\u00e4gung | |----------------------|-------------------| |Training provider |Schulungsanbieter | |----------------------|-------------------| |Treasurer |Schatzmeister | |----------------------|-------------------| |Uses relationship |Benutzt-Beziehung, Nutzungsbeziehung | |----------------------|-------------------| |View |Sicht | |----------------------|-------------------| |Workflow management |Ablaufsteuerung | |----------------------|-------------------| |Working environment |Arbeitsumgebung | |----------------------|-------------------| |Working group |Arbeitsgruppe | |----------------------|-------------------| |Working group head |Arbeitsgruppenleiter | |----------------------|-------------------|","title":"gen tt EN DE"},{"location":"terms/","text":"Terms \u00b6 This directory is a collection of all terms used in the glossary. Each has its own file which follows the naming convention: term-[term-name-with-dashes].md and has the predefined structure: {lang=[language-code]} ### [Title] [Description in the language specified in language-code] {lang=[another-language-code]} ### [Title in another language] [Description in another language]","title":"Terms"},{"location":"terms/#terms","text":"This directory is a collection of all terms used in the glossary. Each has its own file which follows the naming convention: term-[term-name-with-dashes].md and has the predefined structure: {lang=[language-code]} ### [Title] [Description in the language specified in language-code] {lang=[another-language-code]} ### [Title in another language] [Description in another language]","title":"Terms"},{"location":"terms/term-DDD/","text":"{lang=en} Domain-Driven Design (DDD) \u00b6 \"Domain-driven design (DDD) is an approach to developing software for complex needs by deeply connecting the implementation to an evolving model of the core business concepts.\" (quoted from DDDCommunity ). See Evans-2004 . See also: Entity Value Object Aggregate Service Factory Repository Ubiquitous Language {lang=de} Domain-Driven Design (DDD) \u00b6 \u201eDomain-Driven Design (DDD) ist ein Ansatz zur Softwareentwicklung f\u00fcr komplexe Anforderungen durch tiefreichende Verbindung der Implementierung mit einem sich evolvierenden Modell der Kerngesch\u00e4ftskonzepte.\" (\u00dcbersetztes englisches Zitat von DDDCommunity ). Siehe Evans-2004 . Siehe auch: Entit\u00e4t Wertobjekt Aggregat Service Fabrik Ablage Allgegenw\u00e4rtige Sprache","title":"term DDD"},{"location":"terms/term-DDD/#domain-driven-design-ddd","text":"\"Domain-driven design (DDD) is an approach to developing software for complex needs by deeply connecting the implementation to an evolving model of the core business concepts.\" (quoted from DDDCommunity ). See Evans-2004 . See also: Entity Value Object Aggregate Service Factory Repository Ubiquitous Language {lang=de}","title":"Domain-Driven Design (DDD)"},{"location":"terms/term-DDD/#domain-driven-design-ddd_1","text":"\u201eDomain-Driven Design (DDD) ist ein Ansatz zur Softwareentwicklung f\u00fcr komplexe Anforderungen durch tiefreichende Verbindung der Implementierung mit einem sich evolvierenden Modell der Kerngesch\u00e4ftskonzepte.\" (\u00dcbersetztes englisches Zitat von DDDCommunity ). Siehe Evans-2004 . Siehe auch: Entit\u00e4t Wertobjekt Aggregat Service Fabrik Ablage Allgegenw\u00e4rtige Sprache","title":"Domain-Driven Design (DDD)"},{"location":"terms/term-MFA/","text":"{lang=en} MFA \u00b6 For Multi-Factor-Authentication see Authentication . Category: Security","title":"term MFA"},{"location":"terms/term-MFA/#mfa","text":"For Multi-Factor-Authentication see Authentication . Category: Security","title":"MFA"},{"location":"terms/term-abstraction/","text":"{lang=en} Abstraction \u00b6 The process of removing details to focus attention on aspects of greater importance. Similar in nature to the process of generalization. A view of an element that focuses on the information relevant to a particular purpose, ignoring additional or other information. A design construct as in \"Building blocks should depend on abstractions rather than on implementations.\" Category: Design-Principle {lang=de} Abstraktion \u00b6 Betrachtung eines Elements, die sich auf die f\u00fcr einen bestimmten Zweck ma\u00dfgeblichen Informationen konzentriert und die \u00fcbrigen Informationen ignoriert. Kategorie: Entwurfsprinzip","title":"Term abstraction"},{"location":"terms/term-abstraction/#abstraction","text":"The process of removing details to focus attention on aspects of greater importance. Similar in nature to the process of generalization. A view of an element that focuses on the information relevant to a particular purpose, ignoring additional or other information. A design construct as in \"Building blocks should depend on abstractions rather than on implementations.\" Category: Design-Principle {lang=de}","title":"Abstraction"},{"location":"terms/term-abstraction/#abstraktion","text":"Betrachtung eines Elements, die sich auf die f\u00fcr einen bestimmten Zweck ma\u00dfgeblichen Informationen konzentriert und die \u00fcbrigen Informationen ignoriert. Kategorie: Entwurfsprinzip","title":"Abstraktion"},{"location":"terms/term-abstractness/","text":"{lang=en} Abstractness \u00b6 Metric for the source code of object oriented systems: The number of abstract types (interfaces and abstract classes) divided by the total number of types. Category: Metric {lang=de} Abstraktheit \u00b6 Kennzahl f\u00fcr den Quellcode von objektorientierten Systemen: Zahl der abstrakten Typen (Schnittstellen und abstrakte Klassen), geteilt durch die Gesamtzahl der Typen. Kategorie: Kennzahl","title":"Term abstractness"},{"location":"terms/term-abstractness/#abstractness","text":"Metric for the source code of object oriented systems: The number of abstract types (interfaces and abstract classes) divided by the total number of types. Category: Metric {lang=de}","title":"Abstractness"},{"location":"terms/term-abstractness/#abstraktheit","text":"Kennzahl f\u00fcr den Quellcode von objektorientierten Systemen: Zahl der abstrakten Typen (Schnittstellen und abstrakte Klassen), geteilt durch die Gesamtzahl der Typen. Kategorie: Kennzahl","title":"Abstraktheit"},{"location":"terms/term-accessibility-quality-attribute/","text":"{lang=en} Accessibility Quality Attribute \u00b6 Degree to which a product or system can be used by people with the widest range of characteristics and capabilities to achieve a specified goal in a specified context of use. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Zug\u00e4nglichkeit \u00b6 Ma\u00df, in dem ein Produkt oder System von Personen mit einer gro\u00dfen Bandbreite von Eigenschaften und F\u00e4higkeiten zur Erreichung eines spezifizierten Ziels in einem spezifizierten Nutzungskontext genutzt werden kann. Teilmerkmal von: Benutzerfreundlichkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term accessibility quality attribute"},{"location":"terms/term-accessibility-quality-attribute/#accessibility-quality-attribute","text":"Degree to which a product or system can be used by people with the widest range of characteristics and capabilities to achieve a specified goal in a specified context of use. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Accessibility Quality Attribute"},{"location":"terms/term-accessibility-quality-attribute/#qualitatsmerkmal-zuganglichkeit","text":"Ma\u00df, in dem ein Produkt oder System von Personen mit einer gro\u00dfen Bandbreite von Eigenschaften und F\u00e4higkeiten zur Erreichung eines spezifizierten Ziels in einem spezifizierten Nutzungskontext genutzt werden kann. Teilmerkmal von: Benutzerfreundlichkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Zug\u00e4nglichkeit"},{"location":"terms/term-accountability-quality-attribute/","text":"{lang=en} Accountability Quality Attribute \u00b6 Degree to which the actions of an entity can be traced uniquely to the entity. Is a sub-characteristic of: security . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Verantwortlichkeit \u00b6 Ma\u00df, in dem Aktionen einer Entit\u00e4t eindeutig zu der Entit\u00e4t zur\u00fcckverfolgt werden k\u00f6nnen. Teilmerkmal von: Sicherheit . Vgl. Website von ISO 25010 .","title":"Term accountability quality attribute"},{"location":"terms/term-accountability-quality-attribute/#accountability-quality-attribute","text":"Degree to which the actions of an entity can be traced uniquely to the entity. Is a sub-characteristic of: security . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Accountability Quality Attribute"},{"location":"terms/term-accountability-quality-attribute/#qualitatsmerkmal-verantwortlichkeit","text":"Ma\u00df, in dem Aktionen einer Entit\u00e4t eindeutig zu der Entit\u00e4t zur\u00fcckverfolgt werden k\u00f6nnen. Teilmerkmal von: Sicherheit . Vgl. Website von ISO 25010 .","title":"Qualit\u00e4tsmerkmal Verantwortlichkeit"},{"location":"terms/term-accreditation-body/","text":"{lang=en} Accreditation Body \u00b6 The application for accreditation must be submitted through the accreditation body designated by the iSAQB. The accreditation body is the contact point for all questions of the training provider during the accreditation . It coordinates the accreditation procedure, carries out the formal assessment of the documents submitted and organises the technical assessment in the AUDIT WORKING GROUP . {lang=de} Akkreditierungsstelle \u00b6 Der Antrag auf Akkreditierung ist \u00fcber die vom iSAQB benannte Akkreditierungsstelle einzureichen. Die Akkreditierungsstelle ist Ansprechpartner f\u00fcr alle Fragen des Schulungsanbieters w\u00e4hrend der Akkreditierung . Sie koordiniert das Akkreditierungsverfahren, f\u00fchrt die offizielle Bewertung der eingereichten Unterlagen durch und organisiert die technische Beurteilung in der AUDIT-ARBEITSGRUPPE .","title":"Term accreditation body"},{"location":"terms/term-accreditation-body/#accreditation-body","text":"The application for accreditation must be submitted through the accreditation body designated by the iSAQB. The accreditation body is the contact point for all questions of the training provider during the accreditation . It coordinates the accreditation procedure, carries out the formal assessment of the documents submitted and organises the technical assessment in the AUDIT WORKING GROUP . {lang=de}","title":"Accreditation Body"},{"location":"terms/term-accreditation-body/#akkreditierungsstelle","text":"Der Antrag auf Akkreditierung ist \u00fcber die vom iSAQB benannte Akkreditierungsstelle einzureichen. Die Akkreditierungsstelle ist Ansprechpartner f\u00fcr alle Fragen des Schulungsanbieters w\u00e4hrend der Akkreditierung . Sie koordiniert das Akkreditierungsverfahren, f\u00fchrt die offizielle Bewertung der eingereichten Unterlagen durch und organisiert die technische Beurteilung in der AUDIT-ARBEITSGRUPPE .","title":"Akkreditierungsstelle"},{"location":"terms/term-accreditation/","text":"{lang=en} Accreditation \u00b6 Determination procedure and certification by an authorised accreditation body (here the iSAQB^(R)^) confirming that the applicant meets the organizational, technical and qualitative requirements as a training provider . {lang=de} Akkreditierung \u00b6 Pr\u00fcfungsverfahren und Zertifizierung durch eine erm\u00e4chtigte Akkreditierungsstelle (in diesem Fall das iSAQB^(R)^) zur Best\u00e4tigung, dass der Antragsteller die organisatorischen, technischen und qualitativen Anforderungen f\u00fcr Schulungsanbieter erf\u00fcllt.","title":"Term accreditation"},{"location":"terms/term-accreditation/#accreditation","text":"Determination procedure and certification by an authorised accreditation body (here the iSAQB^(R)^) confirming that the applicant meets the organizational, technical and qualitative requirements as a training provider . {lang=de}","title":"Accreditation"},{"location":"terms/term-accreditation/#akkreditierung","text":"Pr\u00fcfungsverfahren und Zertifizierung durch eine erm\u00e4chtigte Akkreditierungsstelle (in diesem Fall das iSAQB^(R)^) zur Best\u00e4tigung, dass der Antragsteller die organisatorischen, technischen und qualitativen Anforderungen f\u00fcr Schulungsanbieter erf\u00fcllt.","title":"Akkreditierung"},{"location":"terms/term-accredited-training-provider/","text":"{lang=en} Accredited Training Provider \u00b6 Training Provider with valid accreditation issued by the iSAQB(R). {lang=de} Akkreditierter Schulungsanbieter \u00b6 Schulungsanbieter mit g\u00fcltiger Akkreditierung des iSAQB(R).","title":"Term accredited training provider"},{"location":"terms/term-accredited-training-provider/#accredited-training-provider","text":"Training Provider with valid accreditation issued by the iSAQB(R). {lang=de}","title":"Accredited Training Provider"},{"location":"terms/term-accredited-training-provider/#akkreditierter-schulungsanbieter","text":"Schulungsanbieter mit g\u00fcltiger Akkreditierung des iSAQB(R).","title":"Akkreditierter Schulungsanbieter"},{"location":"terms/term-acl/","text":"{lang=en} ACL \u00b6 Access Control Lists control authorization of a principal to access a specific entity . An ACL attached to an entity lists principals along with their access permissions. Many file systems - among them Windows and POSIX file systems - support ACLs to control access. Since ACLs don't scale well on a large base it is common to model access control based on roles ( RBAC ). Category: Security {lang=de} ACL \u00b6 Zugriffskontrolllisten (Access Control Lists, ACL) repr\u00e4sentieren die Autorisierung eines Principals , um auf eine spezifische Entit\u00e4t zuzugreifen. Eine ACL, die einer Entit\u00e4t zugeordnet ist, ist eine Liste von Principals zusammen mit ihren Berechtigungen. Viele Dateisysteme - darunter Windows und POSIX - unterst\u00fctzen die Verwendung von ACLs zur Zugriffskontrolle. Da ACL sich nicht gut im gro\u00dfen Ma\u00dfstab skalieren lassen, ist eine rollenbasierte Modellierung der Zugriffskontrolle ( RBAC ) g\u00e4ngig. Kategorie: Sicherheit","title":"Term acl"},{"location":"terms/term-acl/#acl","text":"Access Control Lists control authorization of a principal to access a specific entity . An ACL attached to an entity lists principals along with their access permissions. Many file systems - among them Windows and POSIX file systems - support ACLs to control access. Since ACLs don't scale well on a large base it is common to model access control based on roles ( RBAC ). Category: Security {lang=de}","title":"ACL"},{"location":"terms/term-acl/#acl_1","text":"Zugriffskontrolllisten (Access Control Lists, ACL) repr\u00e4sentieren die Autorisierung eines Principals , um auf eine spezifische Entit\u00e4t zuzugreifen. Eine ACL, die einer Entit\u00e4t zugeordnet ist, ist eine Liste von Principals zusammen mit ihren Berechtigungen. Viele Dateisysteme - darunter Windows und POSIX - unterst\u00fctzen die Verwendung von ACLs zur Zugriffskontrolle. Da ACL sich nicht gut im gro\u00dfen Ma\u00dfstab skalieren lassen, ist eine rollenbasierte Modellierung der Zugriffskontrolle ( RBAC ) g\u00e4ngig. Kategorie: Sicherheit","title":"ACL"},{"location":"terms/term-acyclic-dependencies-principle/","text":"{lang=en} Acyclic Dependencies Principle \u00b6 A fundamental principle for designing the structure of software systems (also see Package Principles ). It demands that there be no cycles in the dependence graph of a system, which is also a necessity for hierarchical decomposition . Avoiding dependence cycles is essential for low coupling and maintainability , as all components in a dependence cycle effectively (even if indirectly) depend on each other, which makes it hard to understand, change or replace any part of the cycle in isolation (also see Lilienthal-2019 ). Although Robert C. Martin ( Martin-2003 ) expressed it in terms of large components of object-oriented software, the ADP is a universal principle. It goes back (at least) to one of the origins of software architecture, the classic 1972 paper \"On the Criteria To Be Used in Decomposing Systems into Modules\" ( Parnas-1972 ), which concludes that hierarchical structure along with \"clean\" decomposition are desirable properties of any system. It can be argued that a dependence cycle, even before considering its various practical problems, is logically already as flawed as a circular argument or circular definition . As a structural contradiction, a cycle can neither be an appropriate nor meaningful model of the inherent nature and purpose of a system. And this conceptual divergence alone virtually guarantees for (unpredictable) problems to arise, which is exactly what a principled approach guards against. Category: Design-Principle {lang=de} Azyklischer Abh\u00e4ngigkeitsgrundsatz (ADP) \u00b6 Ein Grundsatz f\u00fcr die Gestaltung der Struktur von Softwaresystemen (siehe auch Packaging-Prinzipien ). Er besagt, dass der Abh\u00e4ngigkeitsgraph eines Systems keine Zyklen enthalten darf, was auch eine Notwendigkeit f\u00fcr die hierarchische Zerlegung ist. Die Vermeidung von Abh\u00e4ngigkeitszyklen ist f\u00fcr lose Kopplung und Wartbarkeit entscheidend, da alle Komponenten in einem Abh\u00e4ngigkeitszyklus effektiv (auch wenn mittelbar) voneinander abh\u00e4ngen, wodurch es schwierig ist, einen Teil des Zyklus isoliert zu verstehen, zu \u00e4ndern oder zu ersetzen (siehe auch Lilienthal-2019 ). Auch wenn Robert C. Martin ( Martin-2003 ) sich auf gro\u00dfe Komponenten objektorientierter Software bezog, ist ADP ein universeller Grundsatz. Er geht (mindestens) auf einen der Urspr\u00fcnge der Softwarearchitektur zur\u00fcck, den Klassiker von 1972 \u201eOn the Criteria To Be Used in Decomposing Systems into Modules\" ( Parnas-1972 ), der zu dem Ergebnis gelangt, dass eine hierarchische Struktur zusammen mit einer \u201esauberen\" Zerlegung w\u00fcnschenswerte Eigenschaften eines jeden Systems sind. Es kann argumentiert werden, dass ein Abh\u00e4ngigkeitszyklus, selbst vor Ber\u00fccksichtigung seiner verschiedenen praktischen Probleme, logisch bereits so fehlerhaft ist wie ein Zirkelargument oder eine Zirkeldefinition . Als struktureller Widerspruch kann ein Zyklus weder ein angemessenes noch ein aussagekr\u00e4ftiges Modell der inh\u00e4renten Natur und des Zwecks eines Systems sein. Alleine diese konzeptuelle Abweichung f\u00fchrt geradezu mit Sicherheit zur Entstehung von Problemen. Und genau das soll durch einen Prinzip -Ansatz verhindert werden. Kategorie: Entwurfsprinzip","title":"Term acyclic dependencies principle"},{"location":"terms/term-acyclic-dependencies-principle/#acyclic-dependencies-principle","text":"A fundamental principle for designing the structure of software systems (also see Package Principles ). It demands that there be no cycles in the dependence graph of a system, which is also a necessity for hierarchical decomposition . Avoiding dependence cycles is essential for low coupling and maintainability , as all components in a dependence cycle effectively (even if indirectly) depend on each other, which makes it hard to understand, change or replace any part of the cycle in isolation (also see Lilienthal-2019 ). Although Robert C. Martin ( Martin-2003 ) expressed it in terms of large components of object-oriented software, the ADP is a universal principle. It goes back (at least) to one of the origins of software architecture, the classic 1972 paper \"On the Criteria To Be Used in Decomposing Systems into Modules\" ( Parnas-1972 ), which concludes that hierarchical structure along with \"clean\" decomposition are desirable properties of any system. It can be argued that a dependence cycle, even before considering its various practical problems, is logically already as flawed as a circular argument or circular definition . As a structural contradiction, a cycle can neither be an appropriate nor meaningful model of the inherent nature and purpose of a system. And this conceptual divergence alone virtually guarantees for (unpredictable) problems to arise, which is exactly what a principled approach guards against. Category: Design-Principle {lang=de}","title":"Acyclic Dependencies Principle"},{"location":"terms/term-acyclic-dependencies-principle/#azyklischer-abhangigkeitsgrundsatz-adp","text":"Ein Grundsatz f\u00fcr die Gestaltung der Struktur von Softwaresystemen (siehe auch Packaging-Prinzipien ). Er besagt, dass der Abh\u00e4ngigkeitsgraph eines Systems keine Zyklen enthalten darf, was auch eine Notwendigkeit f\u00fcr die hierarchische Zerlegung ist. Die Vermeidung von Abh\u00e4ngigkeitszyklen ist f\u00fcr lose Kopplung und Wartbarkeit entscheidend, da alle Komponenten in einem Abh\u00e4ngigkeitszyklus effektiv (auch wenn mittelbar) voneinander abh\u00e4ngen, wodurch es schwierig ist, einen Teil des Zyklus isoliert zu verstehen, zu \u00e4ndern oder zu ersetzen (siehe auch Lilienthal-2019 ). Auch wenn Robert C. Martin ( Martin-2003 ) sich auf gro\u00dfe Komponenten objektorientierter Software bezog, ist ADP ein universeller Grundsatz. Er geht (mindestens) auf einen der Urspr\u00fcnge der Softwarearchitektur zur\u00fcck, den Klassiker von 1972 \u201eOn the Criteria To Be Used in Decomposing Systems into Modules\" ( Parnas-1972 ), der zu dem Ergebnis gelangt, dass eine hierarchische Struktur zusammen mit einer \u201esauberen\" Zerlegung w\u00fcnschenswerte Eigenschaften eines jeden Systems sind. Es kann argumentiert werden, dass ein Abh\u00e4ngigkeitszyklus, selbst vor Ber\u00fccksichtigung seiner verschiedenen praktischen Probleme, logisch bereits so fehlerhaft ist wie ein Zirkelargument oder eine Zirkeldefinition . Als struktureller Widerspruch kann ein Zyklus weder ein angemessenes noch ein aussagekr\u00e4ftiges Modell der inh\u00e4renten Natur und des Zwecks eines Systems sein. Alleine diese konzeptuelle Abweichung f\u00fchrt geradezu mit Sicherheit zur Entstehung von Problemen. Und genau das soll durch einen Prinzip -Ansatz verhindert werden. Kategorie: Entwurfsprinzip","title":"Azyklischer Abh\u00e4ngigkeitsgrundsatz (ADP)"},{"location":"terms/term-adaptability-quality-attribute/","text":"{lang=en} Adaptability Quality Attribute \u00b6 Degree to which a product or system can effectively and efficiently be adapted for different or evolving hardware, software or other operational or usage environments. Is a sub-characteristic of: portability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Adaptierbarkeit \u00b6 Ma\u00df, in dem sich ein Produkt oder System effektiv und effizient an unterschiedliche oder sich weiterentwickelnde Hardware, Software oder sonstige Betriebs- oder Nutzungsumgebungen anpassen l\u00e4sst. Teilmerkmal von: Portierbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term adaptability quality attribute"},{"location":"terms/term-adaptability-quality-attribute/#adaptability-quality-attribute","text":"Degree to which a product or system can effectively and efficiently be adapted for different or evolving hardware, software or other operational or usage environments. Is a sub-characteristic of: portability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Adaptability Quality Attribute"},{"location":"terms/term-adaptability-quality-attribute/#qualitatsmerkmal-adaptierbarkeit","text":"Ma\u00df, in dem sich ein Produkt oder System effektiv und effizient an unterschiedliche oder sich weiterentwickelnde Hardware, Software oder sonstige Betriebs- oder Nutzungsumgebungen anpassen l\u00e4sst. Teilmerkmal von: Portierbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Adaptierbarkeit"},{"location":"terms/term-adapter/","text":"{lang=en} Adapter \u00b6 The adapter is a design pattern that allows the interface of an existing component to be used from another interface. It is often used to make existing components cooperate with others without modifying their source code. Category: Design-Pattern, Foundation. {lang=de} Adapter \u00b6 Ein Adapter ist ein Entwurfsmuster, das die Nutzung einer vorhandenen Schnittstelle von einer anderen Schnittstelle aus erm\u00f6glicht. Er wird h\u00e4ufig dazu verwendet, vorhandene Komponenten ohne Ver\u00e4nderung ihres Quellcodes dazu zu bringen, mit anderen Komponenten zusammenzuarbeiten. Kategorie: Entwurfsmuster, Foundation.","title":"Term adapter"},{"location":"terms/term-adapter/#adapter","text":"The adapter is a design pattern that allows the interface of an existing component to be used from another interface. It is often used to make existing components cooperate with others without modifying their source code. Category: Design-Pattern, Foundation. {lang=de}","title":"Adapter"},{"location":"terms/term-adapter/#adapter_1","text":"Ein Adapter ist ein Entwurfsmuster, das die Nutzung einer vorhandenen Schnittstelle von einer anderen Schnittstelle aus erm\u00f6glicht. Er wird h\u00e4ufig dazu verwendet, vorhandene Komponenten ohne Ver\u00e4nderung ihres Quellcodes dazu zu bringen, mit anderen Komponenten zusammenzuarbeiten. Kategorie: Entwurfsmuster, Foundation.","title":"Adapter"},{"location":"terms/term-aggregate/","text":"{lang=en} Aggregate \u00b6 Aggregate is a building block of Domain-Driven Design . Aggregates are complex object structures that are made of entities and value objects . Each aggregate has a root entity and is regarded as one unit when it comes to changes. An aggregate ensure consistency and integrity of its contained entities with invariants. Category: DDD {lang=de} Aggregat \u00b6 Ein Aggregat ist ein Baustein des Domain-Driven Designs . Aggregate sind komplexe Objektstrukturen, die aus Entit\u00e4ten und Wertobjekten bestehen. Jedes Aggregat hat eine Root-Entit\u00e4t und wird in Bezug auf \u00c4nderungen als Einheit betrachtet. Aggregate stellen die Konsistenz und Integrit\u00e4t ihrer enthaltenen Entit\u00e4ten mit Invarianten sicher. Kategorie: DDD","title":"Term aggregate"},{"location":"terms/term-aggregate/#aggregate","text":"Aggregate is a building block of Domain-Driven Design . Aggregates are complex object structures that are made of entities and value objects . Each aggregate has a root entity and is regarded as one unit when it comes to changes. An aggregate ensure consistency and integrity of its contained entities with invariants. Category: DDD {lang=de}","title":"Aggregate"},{"location":"terms/term-aggregate/#aggregat","text":"Ein Aggregat ist ein Baustein des Domain-Driven Designs . Aggregate sind komplexe Objektstrukturen, die aus Entit\u00e4ten und Wertobjekten bestehen. Jedes Aggregat hat eine Root-Entit\u00e4t und wird in Bezug auf \u00c4nderungen als Einheit betrachtet. Aggregate stellen die Konsistenz und Integrit\u00e4t ihrer enthaltenen Entit\u00e4ten mit Invarianten sicher. Kategorie: DDD","title":"Aggregat"},{"location":"terms/term-aggregation/","text":"{lang=en} Aggregation \u00b6 A form of object composition in object-oriented programming. It differs from composition, as aggregation does not imply ownership. When the element is destroyed, the contained elements remain intact. Category: Foundation {lang=de} Aggregation \u00b6 Eine Form der Komposition in der objektorientierten Programmierung. Sie unterscheidet sich von der Komposition dadurch, dass sie keinen Besitz impliziert. Wenn das Element vernichtet wird, bleiben die enthaltenen Elemente intakt. Kategorie: Foundation","title":"Term aggregation"},{"location":"terms/term-aggregation/#aggregation","text":"A form of object composition in object-oriented programming. It differs from composition, as aggregation does not imply ownership. When the element is destroyed, the contained elements remain intact. Category: Foundation {lang=de}","title":"Aggregation"},{"location":"terms/term-aggregation/#aggregation_1","text":"Eine Form der Komposition in der objektorientierten Programmierung. Sie unterscheidet sich von der Komposition dadurch, dass sie keinen Besitz impliziert. Wenn das Element vernichtet wird, bleiben die enthaltenen Elemente intakt. Kategorie: Foundation","title":"Aggregation"},{"location":"terms/term-analysability-quality-attribute/","text":"{lang=en} Analysability Quality Attribute \u00b6 Degree of effectiveness and efficiency with which it is possible to assess the impact on a product or system of an intended change to one or more of its parts, or to diagnose a product for deficiencies or causes of failures, or to identify parts to be modified. Is a sub-characteristic of: maintainability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Analysierbarkeit \u00b6 Ma\u00df der Effektivit\u00e4t und Effizienz, mit dem die Auswirkung einer geplanten \u00c4nderung an einem oder mehreren seiner Teile auf ein Produkt oder System beurteilt, die M\u00e4ngel oder Fehlerursachen eines Produkts diagnostiziert oder zu modifizierende Teile identifiziert werden k\u00f6nnen. Teilmerkmal von: Wartbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term analysability quality attribute"},{"location":"terms/term-analysability-quality-attribute/#analysability-quality-attribute","text":"Degree of effectiveness and efficiency with which it is possible to assess the impact on a product or system of an intended change to one or more of its parts, or to diagnose a product for deficiencies or causes of failures, or to identify parts to be modified. Is a sub-characteristic of: maintainability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Analysability Quality Attribute"},{"location":"terms/term-analysability-quality-attribute/#qualitatsmerkmal-analysierbarkeit","text":"Ma\u00df der Effektivit\u00e4t und Effizienz, mit dem die Auswirkung einer geplanten \u00c4nderung an einem oder mehreren seiner Teile auf ein Produkt oder System beurteilt, die M\u00e4ngel oder Fehlerursachen eines Produkts diagnostiziert oder zu modifizierende Teile identifiziert werden k\u00f6nnen. Teilmerkmal von: Wartbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Analysierbarkeit"},{"location":"terms/term-appropriateness-recognizability-quality-attribute/","text":"{lang=en} Appropriateness Recognizability Quality Attribute \u00b6 Degree to which users can recognize whether a product or system is appropriate for their needs. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Erkennbarkeit der Brauchbarkeit \u00b6 Ma\u00df, in dem Benutzer erkennen k\u00f6nnen, ob ein Produkt oder System f\u00fcr ihre Bed\u00fcrfnisse geeignet ist. Teilmerkmal von: Benutzerfreundlichkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term appropriateness recognizability quality attribute"},{"location":"terms/term-appropriateness-recognizability-quality-attribute/#appropriateness-recognizability-quality-attribute","text":"Degree to which users can recognize whether a product or system is appropriate for their needs. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Appropriateness Recognizability Quality Attribute"},{"location":"terms/term-appropriateness-recognizability-quality-attribute/#qualitatsmerkmal-erkennbarkeit-der-brauchbarkeit","text":"Ma\u00df, in dem Benutzer erkennen k\u00f6nnen, ob ein Produkt oder System f\u00fcr ihre Bed\u00fcrfnisse geeignet ist. Teilmerkmal von: Benutzerfreundlichkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Erkennbarkeit der Brauchbarkeit"},{"location":"terms/term-appropriateness/","text":"{lang=en} Appropriateness \u00b6 (syn: adequacy) Suitability for a particular purpose. {lang=de} Angemessenheit \u00b6 Eignung f\u00fcr einen bestimmten Zweck.","title":"Term appropriateness"},{"location":"terms/term-appropriateness/#appropriateness","text":"(syn: adequacy) Suitability for a particular purpose. {lang=de}","title":"Appropriateness"},{"location":"terms/term-appropriateness/#angemessenheit","text":"Eignung f\u00fcr einen bestimmten Zweck.","title":"Angemessenheit"},{"location":"terms/term-arc42/","text":"{lang=en} arc42 \u00b6 Free template for communication and documentation of software architectures. arc42 consists of 12 (optional) parts or sections. See https://arc42.org for details. Category: Communication, Documentation {lang=de} arc42 \u00b6 Kostenloses Template zur Kommunikation und Dokumentation von Softwarearchitekturen. arc42 besteht aus 12 (optionalen) Teilen oder Abschnitten. Kategorie: Kommunikation, Dokumentation","title":"Term arc42"},{"location":"terms/term-arc42/#arc42","text":"Free template for communication and documentation of software architectures. arc42 consists of 12 (optional) parts or sections. See https://arc42.org for details. Category: Communication, Documentation {lang=de}","title":"arc42"},{"location":"terms/term-arc42/#arc42_1","text":"Kostenloses Template zur Kommunikation und Dokumentation von Softwarearchitekturen. arc42 besteht aus 12 (optionalen) Teilen oder Abschnitten. Kategorie: Kommunikation, Dokumentation","title":"arc42"},{"location":"terms/term-architectural-decision/","text":"{lang=en} Architectural Decision \u00b6 Decision, which has an sustainable or essential effect on the architecture. Example: Decision about database technology or technical basics of the user interface. Following ISO/IEC/IEEE 42010 an architectural decision pertain to system concerns. However, there is often no simple mapping between the two. A decision can affect the architecture in several ways. These can be reflected in the architecture description (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 {lang=de} Architekturentscheidung \u00b6 Entscheidung mit nachhaltiger oder wesentlicher Auswirkung auf die Architektur. Beispiel: Entscheidung \u00fcber Datenbanktechnologie oder technische Grundlagen der Benutzeroberfl\u00e4che. Gem\u00e4\u00df ISO/IEC/IEEE 42010 bezieht sich eine Architekturentscheidung auf Systembelange. Jedoch gibt es h\u00e4ufig kein einfaches Mapping zwischen den beiden. Eine Entscheidung kann sich auf verschiedene Weise auf die Architektur auswirken. Dies kann in der Architekturbeschreibung dargestellt werden (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Kategorie: ISO-IEC-IEEE-42010","title":"Term architectural decision"},{"location":"terms/term-architectural-decision/#architectural-decision","text":"Decision, which has an sustainable or essential effect on the architecture. Example: Decision about database technology or technical basics of the user interface. Following ISO/IEC/IEEE 42010 an architectural decision pertain to system concerns. However, there is often no simple mapping between the two. A decision can affect the architecture in several ways. These can be reflected in the architecture description (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 {lang=de}","title":"Architectural Decision"},{"location":"terms/term-architectural-decision/#architekturentscheidung","text":"Entscheidung mit nachhaltiger oder wesentlicher Auswirkung auf die Architektur. Beispiel: Entscheidung \u00fcber Datenbanktechnologie oder technische Grundlagen der Benutzeroberfl\u00e4che. Gem\u00e4\u00df ISO/IEC/IEEE 42010 bezieht sich eine Architekturentscheidung auf Systembelange. Jedoch gibt es h\u00e4ufig kein einfaches Mapping zwischen den beiden. Eine Entscheidung kann sich auf verschiedene Weise auf die Architektur auswirken. Dies kann in der Architekturbeschreibung dargestellt werden (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Kategorie: ISO-IEC-IEEE-42010","title":"Architekturentscheidung"},{"location":"terms/term-architectural-tactic/","text":"{lang=en} Architectural Tactic \u00b6 A technique, strategy, approach or decision helping to achieve one or several quality requirements. The term was coined by Bass+2012 . Category: Foundation","title":"Term architectural tactic"},{"location":"terms/term-architectural-tactic/#architectural-tactic","text":"A technique, strategy, approach or decision helping to achieve one or several quality requirements. The term was coined by Bass+2012 . Category: Foundation","title":"Architectural Tactic"},{"location":"terms/term-architecture-description-element/","text":"{lang=en} Architecture Description Element \u00b6 An architecture description element is any construct in an architecture description. architecture description elements are the most primitive constructs discussed in ISO/IEC/IEEE 42010. All terms defined in ISO/IEC/IEEE 42010 are a specialization of the concept of an architecture description element (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 {lang=de} Architekturbeschreibungselement \u00b6 Ein Architekturbeschreibungselement ist ein beliebiges Konstrukt in einer Architekturbeschreibung. Architekturbeschreibungselemente sind die grundlegendsten Konstrukte, die in ISO/IEC/IEEE 42010 behandelt werden. Bei allen in ISO/IEC/IEEE 42010 definierten Begriffen handelt es sich um eine Spezialisierung des Konzepts eines Architekturbeschreibungselements (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Kategorie: ISO-IEC-IEEE-42010","title":"Term architecture description element"},{"location":"terms/term-architecture-description-element/#architecture-description-element","text":"An architecture description element is any construct in an architecture description. architecture description elements are the most primitive constructs discussed in ISO/IEC/IEEE 42010. All terms defined in ISO/IEC/IEEE 42010 are a specialization of the concept of an architecture description element (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 {lang=de}","title":"Architecture Description Element"},{"location":"terms/term-architecture-description-element/#architekturbeschreibungselement","text":"Ein Architekturbeschreibungselement ist ein beliebiges Konstrukt in einer Architekturbeschreibung. Architekturbeschreibungselemente sind die grundlegendsten Konstrukte, die in ISO/IEC/IEEE 42010 behandelt werden. Bei allen in ISO/IEC/IEEE 42010 definierten Begriffen handelt es sich um eine Spezialisierung des Konzepts eines Architekturbeschreibungselements (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Kategorie: ISO-IEC-IEEE-42010","title":"Architekturbeschreibungselement"},{"location":"terms/term-architecture-description-language/","text":"{lang=en} Architecture Description Language \u00b6 An architecture description language (ADL) is any form of expression for use in architecture descriptions (as defined in ISO/IEC/IEEE 42010). Examples are Rapide, Wright, SysML, ArchiMate and the viewpoint languages of RM-ODP [ISO 10746]. Category: ISO-IEC-IEEE-42010 {lang=de} Architekturbeschreibungssprache \u00b6 Architekturbeschreibungssprachen (ADL) sind jegliche Ausdrucksformen zur Verwendung in Architekturbeschreibungen (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Beispiele sind Rapide, Wright, SysML, ArchiMate und die Sprachen der verschiedenen Blickwinkel in RM-ODP [ISO 10746]. Kategorie: ISO-IEC-IEEE-42010","title":"Term architecture description language"},{"location":"terms/term-architecture-description-language/#architecture-description-language","text":"An architecture description language (ADL) is any form of expression for use in architecture descriptions (as defined in ISO/IEC/IEEE 42010). Examples are Rapide, Wright, SysML, ArchiMate and the viewpoint languages of RM-ODP [ISO 10746]. Category: ISO-IEC-IEEE-42010 {lang=de}","title":"Architecture Description Language"},{"location":"terms/term-architecture-description-language/#architekturbeschreibungssprache","text":"Architekturbeschreibungssprachen (ADL) sind jegliche Ausdrucksformen zur Verwendung in Architekturbeschreibungen (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Beispiele sind Rapide, Wright, SysML, ArchiMate und die Sprachen der verschiedenen Blickwinkel in RM-ODP [ISO 10746]. Kategorie: ISO-IEC-IEEE-42010","title":"Architekturbeschreibungssprache"},{"location":"terms/term-architecture-description/","text":"{lang=en} Architecture Description \u00b6 Work product used to express an architecture (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 {lang=de} Architekturbeschreibung \u00b6 Arbeitsergebnis, das genutzt wird, um eine Architektur zum Ausdruck zu bringen (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Kategorie: ISO-IEC-IEEE-42010","title":"Term architecture description"},{"location":"terms/term-architecture-description/#architecture-description","text":"Work product used to express an architecture (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 {lang=de}","title":"Architecture Description"},{"location":"terms/term-architecture-description/#architekturbeschreibung","text":"Arbeitsergebnis, das genutzt wird, um eine Architektur zum Ausdruck zu bringen (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Kategorie: ISO-IEC-IEEE-42010","title":"Architekturbeschreibung"},{"location":"terms/term-architecture-evaluation/","text":"{lang=en} Architecture Evaluation \u00b6 Quantitative or qualitative assessment of a (software or system) architecture. Determine if an architecture can achieve its target qualities or quality attributes See Assessment D> ###### Comment (Gernot Starke) D> In my opinion the terms architecture analysis or architecture assessment are more appropriate, as evaluation contains value , implying numerical assessment or metrics, which is usually only part of what you should do in architecture analysis. D> {lang=de} Architekturbewertung \u00b6 Quantitative oder qualitative Beurteilung einer (Software- oder System-) Architektur. Ermittlung, ob eine Architektur ihre Zieleigenschaften oder Qualit\u00e4tsmerkmale erreichen kann? Siehe Beurteilung D> ###### Anmerkung (Gernot Starke) D>Ich halte die Begriffe Architekturanalyse oder D> Architekturbeurteilung f\u00fcr passender, da in Bewertung Wert D>mitschwingt und eine numerische Beurteilung oder Kennzahlen impliziert D>werden, was \u00fcblicherweise nur ein Teil dessen ist, was im Rahmen D>einer Architekturanalyse gemacht werden sollte.","title":"Term architecture evaluation"},{"location":"terms/term-architecture-evaluation/#architecture-evaluation","text":"Quantitative or qualitative assessment of a (software or system) architecture. Determine if an architecture can achieve its target qualities or quality attributes See Assessment D> ###### Comment (Gernot Starke) D> In my opinion the terms architecture analysis or architecture assessment are more appropriate, as evaluation contains value , implying numerical assessment or metrics, which is usually only part of what you should do in architecture analysis. D> {lang=de}","title":"Architecture Evaluation"},{"location":"terms/term-architecture-evaluation/#architekturbewertung","text":"Quantitative oder qualitative Beurteilung einer (Software- oder System-) Architektur. Ermittlung, ob eine Architektur ihre Zieleigenschaften oder Qualit\u00e4tsmerkmale erreichen kann? Siehe Beurteilung D> ###### Anmerkung (Gernot Starke) D>Ich halte die Begriffe Architekturanalyse oder D> Architekturbeurteilung f\u00fcr passender, da in Bewertung Wert D>mitschwingt und eine numerische Beurteilung oder Kennzahlen impliziert D>werden, was \u00fcblicherweise nur ein Teil dessen ist, was im Rahmen D>einer Architekturanalyse gemacht werden sollte.","title":"Architekturbewertung"},{"location":"terms/term-architecture-framework/","text":"{lang=en} Architecture Framework \u00b6 Conventions, principles and practices for the description of architectures established within a specific domain of application and/or community of stakeholders (as defined in ISO/IEC/IEEE 42010). Examples are: Generalised Enterprise Reference Architecture and Methodologies (GERAM) [ISO 15704] is an architecture framework. Reference Model of Open Distributed Processing (RM-ODP) [ISO/IEC 10746] is an architecture framework. Category: ISO-IEC-IEEE-42010 {lang=de} Architektur-Framework \u00b6 Konventionen, Grunds\u00e4tze und Praktiken f\u00fcr die Beschreibung von Architekturen, die in einem spezifischen Anwendungsbereich und/oder einer Gemeinschaft von Stakeholdern festgelegt wurden (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Beispiele: Generalised Enterprise Reference Architecture and Methodologies (GERAM) [ISO 15704] ist ein Architektur-Framework. Reference Model of Open Distributed Processing (RM-ODP) [ISO/IEC 10746] ist ein Architektur-Framework. Kategorie: ISO-IEC-IEEE-42010","title":"Term architecture framework"},{"location":"terms/term-architecture-framework/#architecture-framework","text":"Conventions, principles and practices for the description of architectures established within a specific domain of application and/or community of stakeholders (as defined in ISO/IEC/IEEE 42010). Examples are: Generalised Enterprise Reference Architecture and Methodologies (GERAM) [ISO 15704] is an architecture framework. Reference Model of Open Distributed Processing (RM-ODP) [ISO/IEC 10746] is an architecture framework. Category: ISO-IEC-IEEE-42010 {lang=de}","title":"Architecture Framework"},{"location":"terms/term-architecture-framework/#architektur-framework","text":"Konventionen, Grunds\u00e4tze und Praktiken f\u00fcr die Beschreibung von Architekturen, die in einem spezifischen Anwendungsbereich und/oder einer Gemeinschaft von Stakeholdern festgelegt wurden (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Beispiele: Generalised Enterprise Reference Architecture and Methodologies (GERAM) [ISO 15704] ist ein Architektur-Framework. Reference Model of Open Distributed Processing (RM-ODP) [ISO/IEC 10746] ist ein Architektur-Framework. Kategorie: ISO-IEC-IEEE-42010","title":"Architektur-Framework"},{"location":"terms/term-architecture-goal/","text":"{lang=en} Architecture Goal \u00b6 (syn: Architectural quality goal, Architectural quality requirement): A quality attribute that the system needs to achieve and the quality attribute is understood to be an architectural issue. Hence, the architecture needs to be designed in a way to fulfill this architectural goal. These goals often have long term character in contrast to (short term) project goals. Category: Foundation {lang=de} Architekturziel \u00b6 (Syn.: Architektur-Qualit\u00e4tsziel, Architektur-Qualit\u00e4tsanforderung): Ein Qualit\u00e4tsmerkmal, das ein System erreichen muss und bei dem es sich um eine Architekturfrage handelt. Daher ist die Architektur so zu entwerfen, dass das Architekturziel erf\u00fcllt wird. Diese Ziele sind im Gegensatz zu (kurzfristigen) Projektzielen h\u00e4ufig langfristig . Kategorie: Grundlegend","title":"Term architecture goal"},{"location":"terms/term-architecture-goal/#architecture-goal","text":"(syn: Architectural quality goal, Architectural quality requirement): A quality attribute that the system needs to achieve and the quality attribute is understood to be an architectural issue. Hence, the architecture needs to be designed in a way to fulfill this architectural goal. These goals often have long term character in contrast to (short term) project goals. Category: Foundation {lang=de}","title":"Architecture Goal"},{"location":"terms/term-architecture-goal/#architekturziel","text":"(Syn.: Architektur-Qualit\u00e4tsziel, Architektur-Qualit\u00e4tsanforderung): Ein Qualit\u00e4tsmerkmal, das ein System erreichen muss und bei dem es sich um eine Architekturfrage handelt. Daher ist die Architektur so zu entwerfen, dass das Architekturziel erf\u00fcllt wird. Diese Ziele sind im Gegensatz zu (kurzfristigen) Projektzielen h\u00e4ufig langfristig . Kategorie: Grundlegend","title":"Architekturziel"},{"location":"terms/term-architecture-model/","text":"{lang=en} Architecture Model \u00b6 An architecture view is composed of one or more architecture models. An architecture model uses modelling conventions appropriate to the concerns to be addressed. These conventions are specified by the model kind governing that model. Within an architecture description, an architecture model can be a part of more than one architecture view (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 {lang=de} Architekturmodell \u00b6 Eine Architektursicht besteht aus einem oder mehreren Architekturmodellen. Ein Architekturmodell verwendet f\u00fcr die betreffenden Belange geeignete Modellierungskonventionen. Diese Konventionen sind in der Modellart f\u00fcr dieses Modell festgelegt. In einer Architekturbeschreibung kann ein Architekturmodell Teil von mehr als einer Architektursicht sein (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Kategorie: ISO-IEC-IEEE-42010","title":"Term architecture model"},{"location":"terms/term-architecture-model/#architecture-model","text":"An architecture view is composed of one or more architecture models. An architecture model uses modelling conventions appropriate to the concerns to be addressed. These conventions are specified by the model kind governing that model. Within an architecture description, an architecture model can be a part of more than one architecture view (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 {lang=de}","title":"Architecture Model"},{"location":"terms/term-architecture-model/#architekturmodell","text":"Eine Architektursicht besteht aus einem oder mehreren Architekturmodellen. Ein Architekturmodell verwendet f\u00fcr die betreffenden Belange geeignete Modellierungskonventionen. Diese Konventionen sind in der Modellart f\u00fcr dieses Modell festgelegt. In einer Architekturbeschreibung kann ein Architekturmodell Teil von mehr als einer Architektursicht sein (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Kategorie: ISO-IEC-IEEE-42010","title":"Architekturmodell"},{"location":"terms/term-architecture-objective/","text":"{lang=en} Architecture Objective \u00b6 See architecture goal .","title":"Term architecture objective"},{"location":"terms/term-architecture-objective/#architecture-objective","text":"See architecture goal .","title":"Architecture Objective"},{"location":"terms/term-architecture-pattern/","text":"{lang=en} Architectural (Architecture) Pattern \u00b6 \u201cAn architectural pattern expresses a fundamental structural organization schema for software systems. It provides a set of predefined sub-systems, specifies their responsibilities, and includes rules and guidelines for organizing the relationships between them\u201d (Buschmann+1996, page 12). Similar to architecture style . Examples include: Layers Pipes-and-Filter Microservices CQRS {lang=de} Architekturmuster \u00b6 Ein Architekturmuster beschreibt eines grundlegendes strukturelles Organisationsschema f\u00fcr Softwaresysteme. Es liefert eine Reihe von vordefinierten Teilsystemen, spezifiziert ihre Verantwortlichkeiten und enth\u00e4lt Richtlinien f\u00fcr die Organisation der Beziehungen zwischen ihnen (Buschmann+1996, Seite 12). Vergleichbar mit Architekturstil Beispiele: Model-View-Controller Schichten Pipes und Filter CQRS","title":"Term architecture pattern"},{"location":"terms/term-architecture-pattern/#architectural-architecture-pattern","text":"\u201cAn architectural pattern expresses a fundamental structural organization schema for software systems. It provides a set of predefined sub-systems, specifies their responsibilities, and includes rules and guidelines for organizing the relationships between them\u201d (Buschmann+1996, page 12). Similar to architecture style . Examples include: Layers Pipes-and-Filter Microservices CQRS {lang=de}","title":"Architectural (Architecture) Pattern"},{"location":"terms/term-architecture-pattern/#architekturmuster","text":"Ein Architekturmuster beschreibt eines grundlegendes strukturelles Organisationsschema f\u00fcr Softwaresysteme. Es liefert eine Reihe von vordefinierten Teilsystemen, spezifiziert ihre Verantwortlichkeiten und enth\u00e4lt Richtlinien f\u00fcr die Organisation der Beziehungen zwischen ihnen (Buschmann+1996, Seite 12). Vergleichbar mit Architekturstil Beispiele: Model-View-Controller Schichten Pipes und Filter CQRS","title":"Architekturmuster"},{"location":"terms/term-architecture-quality-requirement/","text":"{lang=en} Architecture Quality Requirement \u00b6 See architecture goal . {lang=de} Architektur-Qualit\u00e4tsanforderung \u00b6 Siehe Architekturziel .","title":"Term architecture quality requirement"},{"location":"terms/term-architecture-quality-requirement/#architecture-quality-requirement","text":"See architecture goal . {lang=de}","title":"Architecture Quality Requirement"},{"location":"terms/term-architecture-quality-requirement/#architektur-qualitatsanforderung","text":"Siehe Architekturziel .","title":"Architektur-Qualit\u00e4tsanforderung"},{"location":"terms/term-architecture-rational/","text":"{lang=en} Architecture Rationale \u00b6 Architecture rationale records explanation, justification or reasoning about architecture decisions that have been made. The rationale for a decision can include the basis for a decision, alternatives and trade-offs considered, potential consequences of the decision and citations to sources of additional information (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 {lang=de} Architekturbegr\u00fcndung \u00b6 Die Architekturbegr\u00fcndung enth\u00e4lt Erl\u00e4uterungen, Rechtfertigungen oder Argumentationen zu getroffenen Architekturentscheidungen. Die Begr\u00fcndung einer Entscheidung kann die Entscheidungsgrundlage, ber\u00fccksichtige Alternativen und Kompromisse, m\u00f6gliche Folgen der Entscheidung und Quellenangaben f\u00fcr zus\u00e4tzliche Informationen enthalten (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Kategorie: ISO-IEC-IEEE-42010","title":"Term architecture rational"},{"location":"terms/term-architecture-rational/#architecture-rationale","text":"Architecture rationale records explanation, justification or reasoning about architecture decisions that have been made. The rationale for a decision can include the basis for a decision, alternatives and trade-offs considered, potential consequences of the decision and citations to sources of additional information (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 {lang=de}","title":"Architecture Rationale"},{"location":"terms/term-architecture-rational/#architekturbegrundung","text":"Die Architekturbegr\u00fcndung enth\u00e4lt Erl\u00e4uterungen, Rechtfertigungen oder Argumentationen zu getroffenen Architekturentscheidungen. Die Begr\u00fcndung einer Entscheidung kann die Entscheidungsgrundlage, ber\u00fccksichtige Alternativen und Kompromisse, m\u00f6gliche Folgen der Entscheidung und Quellenangaben f\u00fcr zus\u00e4tzliche Informationen enthalten (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Kategorie: ISO-IEC-IEEE-42010","title":"Architekturbegr\u00fcndung"},{"location":"terms/term-architecture-style/","text":"{lang=en} Architecture Style \u00b6 Description of element and relation types, together with constraints on how they can be used. Often called architecture pattern . Examples: Pipes-and-Filter, Model-View-Controller, Layers. D> ###### Comment (Alexander Lorz) D> Depending on who you ask, some might consider architecture styles a generalization of architecture patterns. D> That is, \"distributed system\" is a style while \"client-server, CQRS, broker and peer-to-peer\" are more specific patterns that belong to this style. D> However, from a practical point of view this distinction is not essential. {lang=de} Architekturstil \u00b6 Beschreibung von Element- und Beziehungstypen zusammen mit Einschr\u00e4nkungen ihrer Nutzungsweise. H\u00e4ufig Architekturmuster genannt. Beispiele: Pipes und Filter, Model-View-Controller, Schichten.","title":"Term architecture style"},{"location":"terms/term-architecture-style/#architecture-style","text":"Description of element and relation types, together with constraints on how they can be used. Often called architecture pattern . Examples: Pipes-and-Filter, Model-View-Controller, Layers. D> ###### Comment (Alexander Lorz) D> Depending on who you ask, some might consider architecture styles a generalization of architecture patterns. D> That is, \"distributed system\" is a style while \"client-server, CQRS, broker and peer-to-peer\" are more specific patterns that belong to this style. D> However, from a practical point of view this distinction is not essential. {lang=de}","title":"Architecture Style"},{"location":"terms/term-architecture-style/#architekturstil","text":"Beschreibung von Element- und Beziehungstypen zusammen mit Einschr\u00e4nkungen ihrer Nutzungsweise. H\u00e4ufig Architekturmuster genannt. Beispiele: Pipes und Filter, Model-View-Controller, Schichten.","title":"Architekturstil"},{"location":"terms/term-architecture-view/","text":"{lang=en} Architecture View \u00b6 A representation of a system from a specific perspective. Important and well-known views are: Context view , Building block view Runtime view Deployment view [Bass+2012] and [Rozanski+11] extensively discuss this concept. Following ISO/IEC/IEEE 42010, an architecture view is a work product expressing the architecture of a system from the perspective of specific system concerns (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 {lang=de} Architektursicht \u00b6 Eine Darstellung eines Systems aus einer spezifischen Perspektive. Wichtige und bekannte Sichten: Kontextabgrenzung , Bausteinsicht Laufzeitsicht Verteilungssicht [Bass+2012] und [Rozanski+11] er\u00f6rtern dieses Konzept ausf\u00fchrlich. Laut ISO/IEC/IEEE 42010 ist eine Architektursicht ein Arbeitsergebnis, das die Architektur eines Systems aus der Perspektive spezifischer Systembelange darstellt (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Kategorie: ISO-IEC-IEEE-42010","title":"Term architecture view"},{"location":"terms/term-architecture-view/#architecture-view","text":"A representation of a system from a specific perspective. Important and well-known views are: Context view , Building block view Runtime view Deployment view [Bass+2012] and [Rozanski+11] extensively discuss this concept. Following ISO/IEC/IEEE 42010, an architecture view is a work product expressing the architecture of a system from the perspective of specific system concerns (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 {lang=de}","title":"Architecture View"},{"location":"terms/term-architecture-view/#architektursicht","text":"Eine Darstellung eines Systems aus einer spezifischen Perspektive. Wichtige und bekannte Sichten: Kontextabgrenzung , Bausteinsicht Laufzeitsicht Verteilungssicht [Bass+2012] und [Rozanski+11] er\u00f6rtern dieses Konzept ausf\u00fchrlich. Laut ISO/IEC/IEEE 42010 ist eine Architektursicht ein Arbeitsergebnis, das die Architektur eines Systems aus der Perspektive spezifischer Systembelange darstellt (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Kategorie: ISO-IEC-IEEE-42010","title":"Architektursicht"},{"location":"terms/term-architecture-viewpoint/","text":"{lang=en} Architecture Viewpoint \u00b6 Work product establishing the conventions for the construction, interpretation and use of architecture views to frame specific system concerns (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 {lang=de} Architekturblickwinkel \u00b6 Arbeitsergebnis zur Festlegung der Konventionen f\u00fcr den Aufbau, die Interpretation und die Nutzung von Architektursichten f\u00fcr spezifische Systembelange (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Kategorie: ISO-IEC-IEEE-42010","title":"Term architecture viewpoint"},{"location":"terms/term-architecture-viewpoint/#architecture-viewpoint","text":"Work product establishing the conventions for the construction, interpretation and use of architecture views to frame specific system concerns (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 {lang=de}","title":"Architecture Viewpoint"},{"location":"terms/term-architecture-viewpoint/#architekturblickwinkel","text":"Arbeitsergebnis zur Festlegung der Konventionen f\u00fcr den Aufbau, die Interpretation und die Nutzung von Architektursichten f\u00fcr spezifische Systembelange (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Kategorie: ISO-IEC-IEEE-42010","title":"Architekturblickwinkel"},{"location":"terms/term-architecture/","text":"{lang=en} Architecture \u00b6 See Software Architecture Category: ISO-IEC-IEEE-42010","title":"Term architecture"},{"location":"terms/term-architecture/#architecture","text":"See Software Architecture Category: ISO-IEC-IEEE-42010","title":"Architecture"},{"location":"terms/term-artifact/","text":"{lang=en} Artifact \u00b6 Tangible by-product created or generated during development of software. Examples of artifacts are use cases, all kinds of diagrams, UML models, requirements and design documents, source code, test cases, class-files, archives. {lang=de} Artefakt \u00b6 Greifbares Nebenprodukt, das w\u00e4hrend der Softwareentwicklung erstellt oder erzeugt wird. Beispiele f\u00fcr Artefakte sind Anwendungsf\u00e4lle, alle Arten von Diagrammen, UML-Modelle, Anforderungs- und Entwurfsunterlagen, Quellcode, Testf\u00e4lle, Klassendateien, Archive.","title":"Term artifact"},{"location":"terms/term-artifact/#artifact","text":"Tangible by-product created or generated during development of software. Examples of artifacts are use cases, all kinds of diagrams, UML models, requirements and design documents, source code, test cases, class-files, archives. {lang=de}","title":"Artifact"},{"location":"terms/term-artifact/#artefakt","text":"Greifbares Nebenprodukt, das w\u00e4hrend der Softwareentwicklung erstellt oder erzeugt wird. Beispiele f\u00fcr Artefakte sind Anwendungsf\u00e4lle, alle Arten von Diagrammen, UML-Modelle, Anforderungs- und Entwurfsunterlagen, Quellcode, Testf\u00e4lle, Klassendateien, Archive.","title":"Artefakt"},{"location":"terms/term-assessment/","text":"{lang=en} Assessment \u00b6 See also Evaluation . Gathering information about status, risks or vulnerabilities of a system. Assessment might concerning potentially all aspects (development, organization, architecture, code etc.) Beurteilung \u00b6 Siehe auch Bewertung . Zusammenstellung von Informationen \u00fcber Status, Risiken oder Schw\u00e4chen eines Systems. Die Beurteilung kann potenziell alle Aspekte (Entwicklung, Organisation, Architektur, Code usw.) betreffen. \u00b9\u2075 https://en.wikipedia.org/w/index.php?title=Asset_(computer_security)&oldid=694606042","title":"Term assessment"},{"location":"terms/term-assessment/#assessment","text":"See also Evaluation . Gathering information about status, risks or vulnerabilities of a system. Assessment might concerning potentially all aspects (development, organization, architecture, code etc.)","title":"Assessment"},{"location":"terms/term-assessment/#beurteilung","text":"Siehe auch Bewertung . Zusammenstellung von Informationen \u00fcber Status, Risiken oder Schw\u00e4chen eines Systems. Die Beurteilung kann potenziell alle Aspekte (Entwicklung, Organisation, Architektur, Code usw.) betreffen. \u00b9\u2075 https://en.wikipedia.org/w/index.php?title=Asset_(computer_security)&oldid=694606042","title":"Beurteilung"},{"location":"terms/term-asset/","text":"{lang=en} Asset \u00b6 \"In information security, computer security and network security an Asset is any data, device, or other component of the environment that supports information-related activities. Assets generally include hardware (e.g. servers and switches), software (e.g. mission critical applications and support systems) and confidential information\" (quoted from Wikipedia ) Category: Security {lang=de} Asset \u00b6 \u201eIn der Informationssicherheit, Computersicherheit und Netzwerksicherheit sind Assets jegliche Daten, Ger\u00e4te oder sonstigen Komponenten der Umgebung, die Aktivit\u00e4ten in Zusammenhang mit Informationen unterst\u00fctzen. Assets umfassen im Allgemeinen Hardware (z.B. Server und Switches), Software (z.B. missionskritische Anwendungen und Supportsysteme) und vertrauliche Informationen.\" (\u00dcbersetztes englisches Zitat aus Wikipedia ) Kategorie: Sicherheit","title":"Term asset"},{"location":"terms/term-asset/#asset","text":"\"In information security, computer security and network security an Asset is any data, device, or other component of the environment that supports information-related activities. Assets generally include hardware (e.g. servers and switches), software (e.g. mission critical applications and support systems) and confidential information\" (quoted from Wikipedia ) Category: Security {lang=de}","title":"Asset"},{"location":"terms/term-asset/#asset_1","text":"\u201eIn der Informationssicherheit, Computersicherheit und Netzwerksicherheit sind Assets jegliche Daten, Ger\u00e4te oder sonstigen Komponenten der Umgebung, die Aktivit\u00e4ten in Zusammenhang mit Informationen unterst\u00fctzen. Assets umfassen im Allgemeinen Hardware (z.B. Server und Switches), Software (z.B. missionskritische Anwendungen und Supportsysteme) und vertrauliche Informationen.\" (\u00dcbersetztes englisches Zitat aus Wikipedia ) Kategorie: Sicherheit","title":"Asset"},{"location":"terms/term-association/","text":"{lang=en} Association \u00b6 Defines a relationship between objects (in general: between components). Each association can be described in detail by cardinalities and (role-)names. See coupling , dependency and relationship Category: Foundation {lang=de} Assoziation \u00b6 Definiert eine Beziehung zwischen Objekten (im Allgemeinen zwischen Modulen). Jede Assoziation l\u00e4sst sich durch Kardinalit\u00e4ten und (Rollen-) Namen im Detail beschreiben. Siehe Kopplung , Abh\u00e4ngigkeit und Beziehung Kategorie: Foundation","title":"Term association"},{"location":"terms/term-association/#association","text":"Defines a relationship between objects (in general: between components). Each association can be described in detail by cardinalities and (role-)names. See coupling , dependency and relationship Category: Foundation {lang=de}","title":"Association"},{"location":"terms/term-association/#assoziation","text":"Definiert eine Beziehung zwischen Objekten (im Allgemeinen zwischen Modulen). Jede Assoziation l\u00e4sst sich durch Kardinalit\u00e4ten und (Rollen-) Namen im Detail beschreiben. Siehe Kopplung , Abh\u00e4ngigkeit und Beziehung Kategorie: Foundation","title":"Assoziation"},{"location":"terms/term-asymmetric-cryptography/","text":"{lang=en} Asymmetric Cryptography \u00b6 Asymmetric cryptography algorithms are designed that the key which is used for encryption is different from the key used for decryption. The key for encryption is called \"public-key\" the key for decryption is called \"private-key\". The public key can be published and used by anyone to encrypt information only readable by the party owning the private-key for decryption. See Schneier, Public-Key Algorithms, page 17 . Asymmetric cryptography is fundamental for PKI and digital signatures. Category: Security {lang=de} Asymmetrische Kryptographie \u00b6 Algorithmen der asymmetrischen Kryptographie sind so ausgelegt, dass zur Verschl\u00fcsselung und zur Entschl\u00fcsselung unterschiedliche Schl\u00fcssel verwendet werden. Der Schl\u00fcssel f\u00fcr die Verschl\u00fcsselung wird \u201e\u00f6ffentlicher Schl\u00fcssel\" genannt und der Schl\u00fcssel f\u00fcr die Entschl\u00fcsselung \u201eprivater Schl\u00fcssel\". Der \u00f6ffentliche Schl\u00fcssel kann ver\u00f6ffentlicht werden und von jedem zur Verschl\u00fcsselung von Informationen verwendet werden; diese k\u00f6nnen nur von der Partei, die im Besitz des privaten Schl\u00fcssels f\u00fcr die Entschl\u00fcsselung ist, gelesen werden. Siehe Schneier, Public-Key Algorithms, Seite 17 . Asymmetrische Kryptographie ist die Grundlage f\u00fcr PKI und digitale Signaturen. Kategorie: Sicherheit","title":"Term asymmetric cryptography"},{"location":"terms/term-asymmetric-cryptography/#asymmetric-cryptography","text":"Asymmetric cryptography algorithms are designed that the key which is used for encryption is different from the key used for decryption. The key for encryption is called \"public-key\" the key for decryption is called \"private-key\". The public key can be published and used by anyone to encrypt information only readable by the party owning the private-key for decryption. See Schneier, Public-Key Algorithms, page 17 . Asymmetric cryptography is fundamental for PKI and digital signatures. Category: Security {lang=de}","title":"Asymmetric Cryptography"},{"location":"terms/term-asymmetric-cryptography/#asymmetrische-kryptographie","text":"Algorithmen der asymmetrischen Kryptographie sind so ausgelegt, dass zur Verschl\u00fcsselung und zur Entschl\u00fcsselung unterschiedliche Schl\u00fcssel verwendet werden. Der Schl\u00fcssel f\u00fcr die Verschl\u00fcsselung wird \u201e\u00f6ffentlicher Schl\u00fcssel\" genannt und der Schl\u00fcssel f\u00fcr die Entschl\u00fcsselung \u201eprivater Schl\u00fcssel\". Der \u00f6ffentliche Schl\u00fcssel kann ver\u00f6ffentlicht werden und von jedem zur Verschl\u00fcsselung von Informationen verwendet werden; diese k\u00f6nnen nur von der Partei, die im Besitz des privaten Schl\u00fcssels f\u00fcr die Entschl\u00fcsselung ist, gelesen werden. Siehe Schneier, Public-Key Algorithms, Seite 17 . Asymmetrische Kryptographie ist die Grundlage f\u00fcr PKI und digitale Signaturen. Kategorie: Sicherheit","title":"Asymmetrische Kryptographie"},{"location":"terms/term-atam/","text":"{lang=en} ATAM \u00b6 Architecture Tradeoff Analysis Method . Qualitative architecture evaluation method, based upon a (hierarchical) quality tree and concrete quality scenarios. Basic idea: Compare fine-grained quality scenarios (\"quality-requirements\") with the corresponding architectural approaches to identify risks and trade-offs. {lang=de} ATAM \u00b6 Architecture Tradeoff Analysis Method . Qualitative Architekturbewertungsmethode, basierend auf einem (hierarchischen) Qualit\u00e4tsbaum und konkreten Qualit\u00e4tsszenarien. Grundidee: Vergleich feink\u00f6rniger Qualit\u00e4tsszenarien (\u201eQualit\u00e4tsanforderungen\") mit den entsprechenden Architekturans\u00e4tzen zur Identifizierung von Risiken und Kompromissen.","title":"Term atam"},{"location":"terms/term-atam/#atam","text":"Architecture Tradeoff Analysis Method . Qualitative architecture evaluation method, based upon a (hierarchical) quality tree and concrete quality scenarios. Basic idea: Compare fine-grained quality scenarios (\"quality-requirements\") with the corresponding architectural approaches to identify risks and trade-offs. {lang=de}","title":"ATAM"},{"location":"terms/term-atam/#atam_1","text":"Architecture Tradeoff Analysis Method . Qualitative Architekturbewertungsmethode, basierend auf einem (hierarchischen) Qualit\u00e4tsbaum und konkreten Qualit\u00e4tsszenarien. Grundidee: Vergleich feink\u00f6rniger Qualit\u00e4tsszenarien (\u201eQualit\u00e4tsanforderungen\") mit den entsprechenden Architekturans\u00e4tzen zur Identifizierung von Risiken und Kompromissen.","title":"ATAM"},{"location":"terms/term-attack-tree/","text":"{lang=en} Attack Tree \u00b6 Formal way to describe different approaches of an attacker to reach certain goals. The tree is usally structured with the attack goal on top and different approaches as child nodes. Each approach is likely to have dependencies which are again listed as child nodes. The possibiliy of a certain way to attack an IT-system can be analyzed by assigning additional attributes to each node. Examples could be the estimated costs of an attack or if an attack approach is possible or not by referencing countermeasures. See Bruce Schneier on \"Modeling security threats\" . Category: Security {lang=de} Angriffsbaum \u00b6 Formale M\u00f6glichkeit zur Beschreibung verschiedener Ans\u00e4tze eines Angreifers zur Erreichung bestimmter Ziele. \u00dcblicherweise ist der Baum so aufgebaut, dass sich das Angriffsziel oben befindet und die verschiedenen Ans\u00e4tze als Kindknoten dargestellt sind. Wahrscheinlich hat jeder Ansatz Abh\u00e4ngigkeiten, die wiederum als Kindknoten aufgef\u00fchrt sind. Die M\u00f6glichkeit einer bestimmten Angriffsweise auf ein IT-System kann durch Zuweisung von zus\u00e4tzlichen Attributen zu jedem Knoten analysiert werden. M\u00f6gliche Beispiele sind die gesch\u00e4tzten Kosten eines Angriffs oder die Frage der M\u00f6glichkeit eines Angriffsansatzes mittels Einbeziehung von Gegenma\u00dfnahmen. Siehe Bruce Schneier zu \u201eModeling security threats\" . Kategorie: Sicherheit","title":"Term attack tree"},{"location":"terms/term-attack-tree/#attack-tree","text":"Formal way to describe different approaches of an attacker to reach certain goals. The tree is usally structured with the attack goal on top and different approaches as child nodes. Each approach is likely to have dependencies which are again listed as child nodes. The possibiliy of a certain way to attack an IT-system can be analyzed by assigning additional attributes to each node. Examples could be the estimated costs of an attack or if an attack approach is possible or not by referencing countermeasures. See Bruce Schneier on \"Modeling security threats\" . Category: Security {lang=de}","title":"Attack Tree"},{"location":"terms/term-attack-tree/#angriffsbaum","text":"Formale M\u00f6glichkeit zur Beschreibung verschiedener Ans\u00e4tze eines Angreifers zur Erreichung bestimmter Ziele. \u00dcblicherweise ist der Baum so aufgebaut, dass sich das Angriffsziel oben befindet und die verschiedenen Ans\u00e4tze als Kindknoten dargestellt sind. Wahrscheinlich hat jeder Ansatz Abh\u00e4ngigkeiten, die wiederum als Kindknoten aufgef\u00fchrt sind. Die M\u00f6glichkeit einer bestimmten Angriffsweise auf ein IT-System kann durch Zuweisung von zus\u00e4tzlichen Attributen zu jedem Knoten analysiert werden. M\u00f6gliche Beispiele sind die gesch\u00e4tzten Kosten eines Angriffs oder die Frage der M\u00f6glichkeit eines Angriffsansatzes mittels Einbeziehung von Gegenma\u00dfnahmen. Siehe Bruce Schneier zu \u201eModeling security threats\" . Kategorie: Sicherheit","title":"Angriffsbaum"},{"location":"terms/term-audit-working-group/","text":"{lang=en} Audit Working Group: \u00b6 The audit working group is responsible for the technical evaluation of training materials as well as for the monitoring and evaluation of training courses. The members of the audit working group, authorized by the iSAQB(R), are independent of the training provider . The result of the assessments (the respective accreditation recommendation of the AUDIT WORKING GROUP) will be communicated to the training provider by the accreditation body . {lang=de} Audit-Arbeitsgruppe: \u00b6 Die Audit-Arbeitsgruppe ist f\u00fcr die technische Beurteilung der Schulungsunterlagen sowie f\u00fcr die \u00dcberwachung und Beurteilung der Schulungen zust\u00e4ndig. Die vom iSAQB(R) erm\u00e4chtigten Mitglieder der Audit-Arbeitsgruppe sind von den Schulungsanbietern unabh\u00e4ngig. Der Schulungsanbieter wird von der Akkreditierungsstelle \u00fcber das Ergebnis der Beurteilungen (die jeweilige Akkreditierungsempfehlung der AUDIT-ARBEITSGRUPPE) informiert.","title":"Term audit working group"},{"location":"terms/term-audit-working-group/#audit-working-group","text":"The audit working group is responsible for the technical evaluation of training materials as well as for the monitoring and evaluation of training courses. The members of the audit working group, authorized by the iSAQB(R), are independent of the training provider . The result of the assessments (the respective accreditation recommendation of the AUDIT WORKING GROUP) will be communicated to the training provider by the accreditation body . {lang=de}","title":"Audit Working Group:"},{"location":"terms/term-audit-working-group/#audit-arbeitsgruppe","text":"Die Audit-Arbeitsgruppe ist f\u00fcr die technische Beurteilung der Schulungsunterlagen sowie f\u00fcr die \u00dcberwachung und Beurteilung der Schulungen zust\u00e4ndig. Die vom iSAQB(R) erm\u00e4chtigten Mitglieder der Audit-Arbeitsgruppe sind von den Schulungsanbietern unabh\u00e4ngig. Der Schulungsanbieter wird von der Akkreditierungsstelle \u00fcber das Ergebnis der Beurteilungen (die jeweilige Akkreditierungsempfehlung der AUDIT-ARBEITSGRUPPE) informiert.","title":"Audit-Arbeitsgruppe:"},{"location":"terms/term-authentication/","text":"{lang=en} Authentication \u00b6 Authentication is the process of confirming the claim of an identity by a given entity. Usually this is done by verifying at least one of the authentication factors which is known by the system: knowledge (e.g. password) ownership (e.g. security token) inherence (e.g. biometrics) For a stronger authentication multiple factors can be requested or at least factors of two categories. Category: Security {lang=de} Authentifizierung \u00b6 Authentifizierung ist der Vorgang der Best\u00e4tigung der Identit\u00e4tsbehauptung einer gegebenen Entit\u00e4t. Dies geschieht \u00fcblicherweise durch \u00dcberpr\u00fcfung von mindestens einem der dem System bekannten Authentifizierungsfaktoren: Wissen (z.B. Passwort) Besitz (z.B. Sicherheitstoken) Inh\u00e4renz (z.B. Biometrie) F\u00fcr eine st\u00e4rkere Authentifizierung k\u00f6nnen mehrere Faktoren oder mindestens Faktoren aus zwei Kategorien verlangt werden. Kategorie: Sicherheit","title":"Term authentication"},{"location":"terms/term-authentication/#authentication","text":"Authentication is the process of confirming the claim of an identity by a given entity. Usually this is done by verifying at least one of the authentication factors which is known by the system: knowledge (e.g. password) ownership (e.g. security token) inherence (e.g. biometrics) For a stronger authentication multiple factors can be requested or at least factors of two categories. Category: Security {lang=de}","title":"Authentication"},{"location":"terms/term-authentication/#authentifizierung","text":"Authentifizierung ist der Vorgang der Best\u00e4tigung der Identit\u00e4tsbehauptung einer gegebenen Entit\u00e4t. Dies geschieht \u00fcblicherweise durch \u00dcberpr\u00fcfung von mindestens einem der dem System bekannten Authentifizierungsfaktoren: Wissen (z.B. Passwort) Besitz (z.B. Sicherheitstoken) Inh\u00e4renz (z.B. Biometrie) F\u00fcr eine st\u00e4rkere Authentifizierung k\u00f6nnen mehrere Faktoren oder mindestens Faktoren aus zwei Kategorien verlangt werden. Kategorie: Sicherheit","title":"Authentifizierung"},{"location":"terms/term-authenticity-quality-attribute/","text":"{lang=en} Authenticity Quality Attribute \u00b6 Degree to which the identity of a subject or resource can be proved to be the one claimed. Is a sub-characteristic of: security . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Authentifizierbarkeit \u00b6 Ma\u00df, inwieweit nachgewiesen werden kann, dass die Identit\u00e4t eines Subjekts oder einer Ressource der Identit\u00e4tsbehauptung entspricht. Teilmerkmal von: Sicherheit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term authenticity quality attribute"},{"location":"terms/term-authenticity-quality-attribute/#authenticity-quality-attribute","text":"Degree to which the identity of a subject or resource can be proved to be the one claimed. Is a sub-characteristic of: security . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Authenticity Quality Attribute"},{"location":"terms/term-authenticity-quality-attribute/#qualitatsmerkmal-authentifizierbarkeit","text":"Ma\u00df, inwieweit nachgewiesen werden kann, dass die Identit\u00e4t eines Subjekts oder einer Ressource der Identit\u00e4tsbehauptung entspricht. Teilmerkmal von: Sicherheit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Authentifizierbarkeit"},{"location":"terms/term-authorization/","text":"{lang=en} Authorization \u00b6 \"Authorization or authorisation is the function of specifying access rights to resources related to information security and computer security in general and to access control in particular. More formally, \"to authorize\" is to define an access policy.\" (quoted from Wikipedia ) Category: Security {lang=de} Autorisierung \u00b6 \u201eAutorisierung ist der Vorgang der Spezifizierung von Zugriffsrechten f\u00fcr Ressourcen in Zusammenhang mit Informationssicherheit und Computersicherheit im Allgemeinen und mit Zugriffskontrolle im Besonderen. F\u00f6rmlicher bezeichnet \u201eautorisieren\" die Festlegung einer Zugrissrichtlinie.\" (\u00dcbersetztes englisches Zitat aus Wikipedia ) Kategorie: Sicherheit","title":"Term authorization"},{"location":"terms/term-authorization/#authorization","text":"\"Authorization or authorisation is the function of specifying access rights to resources related to information security and computer security in general and to access control in particular. More formally, \"to authorize\" is to define an access policy.\" (quoted from Wikipedia ) Category: Security {lang=de}","title":"Authorization"},{"location":"terms/term-authorization/#autorisierung","text":"\u201eAutorisierung ist der Vorgang der Spezifizierung von Zugriffsrechten f\u00fcr Ressourcen in Zusammenhang mit Informationssicherheit und Computersicherheit im Allgemeinen und mit Zugriffskontrolle im Besonderen. F\u00f6rmlicher bezeichnet \u201eautorisieren\" die Festlegung einer Zugrissrichtlinie.\" (\u00dcbersetztes englisches Zitat aus Wikipedia ) Kategorie: Sicherheit","title":"Autorisierung"},{"location":"terms/term-availability-quality-attribute/","text":"{lang=en} Availability Quality Attribute \u00b6 Degree to which a system, product or component is operational and accessible when required for use. Is a sub-characteristic of: reliability . Refer to ISO 25010 website. Category: Quality, ISO 25010, Security {lang=de} Qualit\u00e4tsmerkmal Verf\u00fcgbarkeit \u00b6 Ma\u00df, in dem ein System, ein Produkt oder eine Komponente einsatzf\u00e4hig und zug\u00e4nglich sind, wenn sie ben\u00f6tigt werden. Teilmerkmal von: Zuverl\u00e4ssigkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010, Sicherheit","title":"Term availability quality attribute"},{"location":"terms/term-availability-quality-attribute/#availability-quality-attribute","text":"Degree to which a system, product or component is operational and accessible when required for use. Is a sub-characteristic of: reliability . Refer to ISO 25010 website. Category: Quality, ISO 25010, Security {lang=de}","title":"Availability Quality Attribute"},{"location":"terms/term-availability-quality-attribute/#qualitatsmerkmal-verfugbarkeit","text":"Ma\u00df, in dem ein System, ein Produkt oder eine Komponente einsatzf\u00e4hig und zug\u00e4nglich sind, wenn sie ben\u00f6tigt werden. Teilmerkmal von: Zuverl\u00e4ssigkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010, Sicherheit","title":"Qualit\u00e4tsmerkmal Verf\u00fcgbarkeit"},{"location":"terms/term-availability/","text":"{lang=en} Availability \u00b6 One of the basic Security Goals describing a system that can provide desired information when its needed. From a security perspective for example denial-of-service-attacks may prevent availability. Category: Security {lang=de} Verf\u00fcgbarkeit \u00b6 Eines der grundlegenden Schutzziele , das ein System beschreibt, das die gew\u00fcnschten Informationen bei Bedarf bereitstellen kann. Aus einer Sicherheitsperspektive k\u00f6nnen beispielsweise Denial-of-Service-Angriffe die Verf\u00fcgbarkeit verhindern. Kategorie: Sicherheit","title":"Term availability"},{"location":"terms/term-availability/#availability","text":"One of the basic Security Goals describing a system that can provide desired information when its needed. From a security perspective for example denial-of-service-attacks may prevent availability. Category: Security {lang=de}","title":"Availability"},{"location":"terms/term-availability/#verfugbarkeit","text":"Eines der grundlegenden Schutzziele , das ein System beschreibt, das die gew\u00fcnschten Informationen bei Bedarf bereitstellen kann. Aus einer Sicherheitsperspektive k\u00f6nnen beispielsweise Denial-of-Service-Angriffe die Verf\u00fcgbarkeit verhindern. Kategorie: Sicherheit","title":"Verf\u00fcgbarkeit"},{"location":"terms/term-blackbox/","text":"{lang=en} Black Box \u00b6 View on a building block (or component ) that hides the internal structure. Blackboxes respect the information hiding principle . They shall have clearly defined input- and output interfaces plus a precisely formulated responsibility or objective . Optionally a blackbox defines some quality attributes, for example timing behavior, throughput or security aspects. Category: Foundation {lang=de} Blackbox \u00b6 Sicht auf einen Baustein (oder eine Komponente ), die die interne Struktur verbirgt. Blackboxen achten das Geheimnisprinzip . Sie m\u00fcssen klar definierte Ein- und Ausgabeschnittstellen sowie eine pr\u00e4zise formulierte Verantwortlichkeit oder ein pr\u00e4zise formuliertes Ziel haben. Optional definiert eine Blackbox einige Qualit\u00e4tsmerkmale, wie beispielsweise zeitliches Verhalten, Durchsatz oder Sicherheitsaspekte. Kategorie: Foundation","title":"Term blackbox"},{"location":"terms/term-blackbox/#black-box","text":"View on a building block (or component ) that hides the internal structure. Blackboxes respect the information hiding principle . They shall have clearly defined input- and output interfaces plus a precisely formulated responsibility or objective . Optionally a blackbox defines some quality attributes, for example timing behavior, throughput or security aspects. Category: Foundation {lang=de}","title":"Black Box"},{"location":"terms/term-blackbox/#blackbox","text":"Sicht auf einen Baustein (oder eine Komponente ), die die interne Struktur verbirgt. Blackboxen achten das Geheimnisprinzip . Sie m\u00fcssen klar definierte Ein- und Ausgabeschnittstellen sowie eine pr\u00e4zise formulierte Verantwortlichkeit oder ein pr\u00e4zise formuliertes Ziel haben. Optional definiert eine Blackbox einige Qualit\u00e4tsmerkmale, wie beispielsweise zeitliches Verhalten, Durchsatz oder Sicherheitsaspekte. Kategorie: Foundation","title":"Blackbox"},{"location":"terms/term-bottom-up/","text":"{lang=en} Bottom-Up Approach \u00b6 Direction of work (or strategy of processing) for modeling and design. Starting with something detailed or concrete, working towards something more general or abstract. \"In a bottom-up approach the individual base elements of the system are first specified in great detail. These elements are then linked together to form larger subsystems.\" (quote from Wikipedia ) {lang=de} Bottom-up-Ansatz \u00b6 Arbeitsrichtung (oder Bearbeitungsstrategie) f\u00fcr Modellierung und Entwurf. Ausgehend von detaillierten oder konkreten Aspekten wird auf etwas Allgemeineres oder Abstrakteres hingearbeitet. \u201eBeim Bottom-up-Ansatz werden zun\u00e4chst die einzelnen Grundelemente des Systems mit hohem Detailgrad spezifiziert. Diese Elemente werden dann miteinander zu gr\u00f6\u00dferen Teilsystemen verkn\u00fcpft.\" (\u00dcbersetztes englisches Zitat aus Wikipedia)","title":"Term bottom up"},{"location":"terms/term-bottom-up/#bottom-up-approach","text":"Direction of work (or strategy of processing) for modeling and design. Starting with something detailed or concrete, working towards something more general or abstract. \"In a bottom-up approach the individual base elements of the system are first specified in great detail. These elements are then linked together to form larger subsystems.\" (quote from Wikipedia ) {lang=de}","title":"Bottom-Up Approach"},{"location":"terms/term-bottom-up/#bottom-up-ansatz","text":"Arbeitsrichtung (oder Bearbeitungsstrategie) f\u00fcr Modellierung und Entwurf. Ausgehend von detaillierten oder konkreten Aspekten wird auf etwas Allgemeineres oder Abstrakteres hingearbeitet. \u201eBeim Bottom-up-Ansatz werden zun\u00e4chst die einzelnen Grundelemente des Systems mit hohem Detailgrad spezifiziert. Diese Elemente werden dann miteinander zu gr\u00f6\u00dferen Teilsystemen verkn\u00fcpft.\" (\u00dcbersetztes englisches Zitat aus Wikipedia)","title":"Bottom-up-Ansatz"},{"location":"terms/term-bounded-context/","text":"{lang=en} Bounded Context \u00b6 Bounded Context is principle of the strategy design of Domain-Driven Design . \"A bounded context explicitly defines the context within which a domain model for a software system applies. Ideally, it would be preferable to have a single, unified model for all software systems in the same domain. While this is a noble goal, in reality it typically fragments into multiple models. It is useful to recognize this fact of life and work with it.\" (quote from Wikipedia) \"Multiple domain models are in play on any large project. Yet when code based on distinct models is combined, software becomes buggy, unreliable, and difficult to understand. Communication among team members becomes confusing. It is often unclear in what context a model should not be applied. Therefore: Explicitly set boundaries in terms of team organization, usage within specific parts of the application, and physical manifestations such as code bases and database schemas. Keep the model strictly consistent within these bounds, but don\u2019t be distracted or confused by issues outside.\" (quote from Wikipedia) Category: DDD {lang=de} Kontextgrenze \u00b6 Kontextgrenze ist ein Prinzip des Strategieentwurfs von Domain-Driven Design . \u201eEine Kontextgrenze definiert ausdr\u00fccklich den Kontext, in dem ein Dom\u00e4nenmodell f\u00fcr ein Softwaresystem gilt. Idealerweise w\u00e4re ein einziges, einheitliches Modell f\u00fcr alle Systeme in derselben Dom\u00e4ne am besten. Dies ist zwar ein ehrenwertes Ziel, aber in Wirklichkeit ist es normalerweise in mehrere Modelle zerst\u00fcckelt. Es ist sinnvoll, dies so hinzunehmen und damit zu arbeiten.\" (\u00dcbersetztes englisches Zitat aus Wikipedia) \u201eBei s\u00e4mtlichen gro\u00dfen Projekten gibt es mehrere Dom\u00e4nenmodelle. Doch wenn auf unterschiedlichen Modellen basierender Code miteinander kombiniert wird, wird die Software fehlerhaft, unzuverl\u00e4ssig und schwer verst\u00e4ndlich. Die Kommunikation der Teammitglieder wird verwirrend. Es ist h\u00e4ufig unklar, in welchem Kontext ein Modell nicht angewandt werden sollte. Daher gilt: Legen Sie in Bezug auf Teamorganisation, Verwendung in spezifischen Teilen der Anwendung und physische Manifestationen, wie Codebasen oder Datenbankschemata, ausdr\u00fccklich Grenzen fest. Sorgen Sie daf\u00fcr, dass das Modell exakt mit diesen Grenzen konsistent ist, aber lassen Sie sich nicht von Themen au\u00dferhalb ablenken oder verwirren.\" (\u00dcbersetztes englisches Zitat aus Wikipedia) Kategorie: DDD","title":"Term bounded context"},{"location":"terms/term-bounded-context/#bounded-context","text":"Bounded Context is principle of the strategy design of Domain-Driven Design . \"A bounded context explicitly defines the context within which a domain model for a software system applies. Ideally, it would be preferable to have a single, unified model for all software systems in the same domain. While this is a noble goal, in reality it typically fragments into multiple models. It is useful to recognize this fact of life and work with it.\" (quote from Wikipedia) \"Multiple domain models are in play on any large project. Yet when code based on distinct models is combined, software becomes buggy, unreliable, and difficult to understand. Communication among team members becomes confusing. It is often unclear in what context a model should not be applied. Therefore: Explicitly set boundaries in terms of team organization, usage within specific parts of the application, and physical manifestations such as code bases and database schemas. Keep the model strictly consistent within these bounds, but don\u2019t be distracted or confused by issues outside.\" (quote from Wikipedia) Category: DDD {lang=de}","title":"Bounded Context"},{"location":"terms/term-bounded-context/#kontextgrenze","text":"Kontextgrenze ist ein Prinzip des Strategieentwurfs von Domain-Driven Design . \u201eEine Kontextgrenze definiert ausdr\u00fccklich den Kontext, in dem ein Dom\u00e4nenmodell f\u00fcr ein Softwaresystem gilt. Idealerweise w\u00e4re ein einziges, einheitliches Modell f\u00fcr alle Systeme in derselben Dom\u00e4ne am besten. Dies ist zwar ein ehrenwertes Ziel, aber in Wirklichkeit ist es normalerweise in mehrere Modelle zerst\u00fcckelt. Es ist sinnvoll, dies so hinzunehmen und damit zu arbeiten.\" (\u00dcbersetztes englisches Zitat aus Wikipedia) \u201eBei s\u00e4mtlichen gro\u00dfen Projekten gibt es mehrere Dom\u00e4nenmodelle. Doch wenn auf unterschiedlichen Modellen basierender Code miteinander kombiniert wird, wird die Software fehlerhaft, unzuverl\u00e4ssig und schwer verst\u00e4ndlich. Die Kommunikation der Teammitglieder wird verwirrend. Es ist h\u00e4ufig unklar, in welchem Kontext ein Modell nicht angewandt werden sollte. Daher gilt: Legen Sie in Bezug auf Teamorganisation, Verwendung in spezifischen Teilen der Anwendung und physische Manifestationen, wie Codebasen oder Datenbankschemata, ausdr\u00fccklich Grenzen fest. Sorgen Sie daf\u00fcr, dass das Modell exakt mit diesen Grenzen konsistent ist, aber lassen Sie sich nicht von Themen au\u00dferhalb ablenken oder verwirren.\" (\u00dcbersetztes englisches Zitat aus Wikipedia) Kategorie: DDD","title":"Kontextgrenze"},{"location":"terms/term-bridge/","text":"{lang=en} Bridge \u00b6 Design pattern in which an abstraction is decoupled from its implementation, so that the two can vary independently. In case you find that incomprehensible (as most people) - have a look here Category: Design-Pattern {lang=de} Br\u00fccke \u00b6 Entwurfsmuster, bei dem eine Abstraktion von ihrer Implementierung entkoppelt ist, so dass beide unabh\u00e4ngig voneinander variieren k\u00f6nnen. Wenn Ihnen das (wie den meisten Menschen) unverst\u00e4ndlich erscheint -- sehen hier nach. Kategorie: Entwurfsmuster","title":"Term bridge"},{"location":"terms/term-bridge/#bridge","text":"Design pattern in which an abstraction is decoupled from its implementation, so that the two can vary independently. In case you find that incomprehensible (as most people) - have a look here Category: Design-Pattern {lang=de}","title":"Bridge"},{"location":"terms/term-bridge/#brucke","text":"Entwurfsmuster, bei dem eine Abstraktion von ihrer Implementierung entkoppelt ist, so dass beide unabh\u00e4ngig voneinander variieren k\u00f6nnen. Wenn Ihnen das (wie den meisten Menschen) unverst\u00e4ndlich erscheint -- sehen hier nach. Kategorie: Entwurfsmuster","title":"Br\u00fccke"},{"location":"terms/term-broker/","text":"{lang=en} Broker \u00b6 An architecture pattern used to structure distributed software systems with decoupled components that interact by (usually remote) service invocations. A broker is responsible for coordinating communication, such as forwarding requests, as well as for transmitting results and exceptions. Category: Architecture-Pattern {lang=de} Broker \u00b6 Ein Architekturmuster zur Strukturierung von verteilten Softwaresystemen mit entkoppelten Komponenten, die \u00fcber (\u00fcblicherweise Remote-) Serviceaufrufe interagieren. Broker sind f\u00fcr die Koordinierung der Kommunikation, wie die Weiterleitung von Anfragen, sowie die \u00dcbermittlung von Ergebnissen und Ausnahmen zust\u00e4ndig. Kategorie: Architekturmuster","title":"Term broker"},{"location":"terms/term-broker/#broker","text":"An architecture pattern used to structure distributed software systems with decoupled components that interact by (usually remote) service invocations. A broker is responsible for coordinating communication, such as forwarding requests, as well as for transmitting results and exceptions. Category: Architecture-Pattern {lang=de}","title":"Broker"},{"location":"terms/term-broker/#broker_1","text":"Ein Architekturmuster zur Strukturierung von verteilten Softwaresystemen mit entkoppelten Komponenten, die \u00fcber (\u00fcblicherweise Remote-) Serviceaufrufe interagieren. Broker sind f\u00fcr die Koordinierung der Kommunikation, wie die Weiterleitung von Anfragen, sowie die \u00dcbermittlung von Ergebnissen und Ausnahmen zust\u00e4ndig. Kategorie: Architekturmuster","title":"Broker"},{"location":"terms/term-building-block-view/","text":"{lang=en} Building Block View \u00b6 Shows the statical structure of the system, how its source code is organized. Usually a hierarchical manner, starting from the context view . Complemented by one or several runtime scenarios . {lang=de} Bausteinsicht \u00b6 Zeigt die statische Struktur des Systems, die Organisationsweise des Quellcodes. \u00dcblicherweise hierarchisch, ausgehend von der Kontextabgrenzung . Erg\u00e4nzt durch ein oder mehrere Laufzeitszenarien .","title":"Term building block view"},{"location":"terms/term-building-block-view/#building-block-view","text":"Shows the statical structure of the system, how its source code is organized. Usually a hierarchical manner, starting from the context view . Complemented by one or several runtime scenarios . {lang=de}","title":"Building Block View"},{"location":"terms/term-building-block-view/#bausteinsicht","text":"Zeigt die statische Struktur des Systems, die Organisationsweise des Quellcodes. \u00dcblicherweise hierarchisch, ausgehend von der Kontextabgrenzung . Erg\u00e4nzt durch ein oder mehrere Laufzeitszenarien .","title":"Bausteinsicht"},{"location":"terms/term-building-block/","text":"{lang=en} Building Block \u00b6 General or abstract term for all kinds of artifacts from which software is constructed. Part of the statical structure ( Building Block View ) of software architecture. Building blocks can be hierarchically structured - they may contain other (smaller) building blocks. Some examples of alternative (concrete) names for building blocks: Component, module, package, namespace, class, file, program, subsystem, function, configuration, data-definition. {lang=de} Baustein \u00b6 Allgemeiner oder abstrakter Begriff f\u00fcr alle Arten von Artefakten, aus denen Software aufgebaut ist. Teil der statischen Struktur ( Bausteinsicht ) von Softwarearchitektur. Bausteine k\u00f6nnen hierarchisch strukturiert sein -- sie k\u00f6nnen andere (kleinere) Bausteine enthalten. Einige Beispiele f\u00fcr alternative (konkrete) Bezeichnungen von Bausteinen: Komponente, Modul, Paket, Namensraum, Klasse, Datei, Programm, Teilsystem, Funktion, Konfiguration, Datendefinition.","title":"Term building block"},{"location":"terms/term-building-block/#building-block","text":"General or abstract term for all kinds of artifacts from which software is constructed. Part of the statical structure ( Building Block View ) of software architecture. Building blocks can be hierarchically structured - they may contain other (smaller) building blocks. Some examples of alternative (concrete) names for building blocks: Component, module, package, namespace, class, file, program, subsystem, function, configuration, data-definition. {lang=de}","title":"Building Block"},{"location":"terms/term-building-block/#baustein","text":"Allgemeiner oder abstrakter Begriff f\u00fcr alle Arten von Artefakten, aus denen Software aufgebaut ist. Teil der statischen Struktur ( Bausteinsicht ) von Softwarearchitektur. Bausteine k\u00f6nnen hierarchisch strukturiert sein -- sie k\u00f6nnen andere (kleinere) Bausteine enthalten. Einige Beispiele f\u00fcr alternative (konkrete) Bezeichnungen von Bausteinen: Komponente, Modul, Paket, Namensraum, Klasse, Datei, Programm, Teilsystem, Funktion, Konfiguration, Datendefinition.","title":"Baustein"},{"location":"terms/term-business-architecture/","text":"{lang=en} Business Architecture \u00b6 A blueprint of the enterprise that provides a common understanding of the organization and is used to align strategic objectives and tactical demands. {lang=de} Gesch\u00e4ftsarchitektur \u00b6 Ein Plan des Unternehmens, der eine gemeinsame Verst\u00e4ndnisgrundlage der Organisation bildet und zur Abstimmung von strategischen Zielen und taktischen Anforderungen genutzt wird.","title":"Term business architecture"},{"location":"terms/term-business-architecture/#business-architecture","text":"A blueprint of the enterprise that provides a common understanding of the organization and is used to align strategic objectives and tactical demands. {lang=de}","title":"Business Architecture"},{"location":"terms/term-business-architecture/#geschaftsarchitektur","text":"Ein Plan des Unternehmens, der eine gemeinsame Verst\u00e4ndnisgrundlage der Organisation bildet und zur Abstimmung von strategischen Zielen und taktischen Anforderungen genutzt wird.","title":"Gesch\u00e4ftsarchitektur"},{"location":"terms/term-c4-model/","text":"{lang=en} C4 Model \u00b6 The C4 Model for Software Architecture Documentation was developed by Simon Brown. It consists of a hierarchical set of software architecture diagrams for context, containers, components, and code. The hierarchy of the C4 diagrams provides different levels of abstraction, each of which is relevant to a different audience.","title":"Term c4 model"},{"location":"terms/term-c4-model/#c4-model","text":"The C4 Model for Software Architecture Documentation was developed by Simon Brown. It consists of a hierarchical set of software architecture diagrams for context, containers, components, and code. The hierarchy of the C4 diagrams provides different levels of abstraction, each of which is relevant to a different audience.","title":"C4 Model"},{"location":"terms/term-ca/","text":"{lang=en} CA \u00b6 A C ertificate Authority issues digital certificates to a given subject in a PKI . Usually there is a trust established to this authority which results in the same trust level to the issued certificates. An example is the widely used TLS-PKI where every browser includes the root-certificates of a defined list of CAs. These CAs then check the identity of a given internet domain owner and digitally sign his certificate for the use with TLS . Category: Security {lang=de} CA \u00b6 Ein Zertifizierungsstelle (Certificate Authority, CA) stellt digitale Zertifikate f\u00fcr ein gegebenes Subjekt in einer PKI aus. \u00dcblicherweise besteht Vertrauen in diese Stelle, das zum gleichen Ma\u00df an Vertrauen in die ausgestellten Zertifikate f\u00fchrt. Ein Beispiel ist die weitverbreitete TLS-PKI, bei der jeder Browser die Wurzelzertifikate einer festgelegten Liste von CA enth\u00e4lt. Diese CA \u00fcberpr\u00fcfen dann die Identit\u00e4t eines gegebenen Internet-Domaininhabers und signieren sein Zertifikat digital f\u00fcr die Verwendung mit TLS . Kategorie: Sicherheit","title":"Term ca"},{"location":"terms/term-ca/#ca","text":"A C ertificate Authority issues digital certificates to a given subject in a PKI . Usually there is a trust established to this authority which results in the same trust level to the issued certificates. An example is the widely used TLS-PKI where every browser includes the root-certificates of a defined list of CAs. These CAs then check the identity of a given internet domain owner and digitally sign his certificate for the use with TLS . Category: Security {lang=de}","title":"CA"},{"location":"terms/term-ca/#ca_1","text":"Ein Zertifizierungsstelle (Certificate Authority, CA) stellt digitale Zertifikate f\u00fcr ein gegebenes Subjekt in einer PKI aus. \u00dcblicherweise besteht Vertrauen in diese Stelle, das zum gleichen Ma\u00df an Vertrauen in die ausgestellten Zertifikate f\u00fchrt. Ein Beispiel ist die weitverbreitete TLS-PKI, bei der jeder Browser die Wurzelzertifikate einer festgelegten Liste von CA enth\u00e4lt. Diese CA \u00fcberpr\u00fcfen dann die Identit\u00e4t eines gegebenen Internet-Domaininhabers und signieren sein Zertifikat digital f\u00fcr die Verwendung mit TLS . Kategorie: Sicherheit","title":"CA"},{"location":"terms/term-capacity-quality-attribute/","text":"{lang=en} Capacity Quality Attribute \u00b6 Degree to which the maximum limits of a product or system parameter meet requirements. Is a sub-characteristic of: performance efficiency . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Kapazit\u00e4t \u00b6 Ma\u00df, in dem die H\u00f6chstgrenzen eines Produkt- oder Systemparameters den Anforderungen entsprechen. Teilmerkmal von: Leistungseffizienz . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term capacity quality attribute"},{"location":"terms/term-capacity-quality-attribute/#capacity-quality-attribute","text":"Degree to which the maximum limits of a product or system parameter meet requirements. Is a sub-characteristic of: performance efficiency . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Capacity Quality Attribute"},{"location":"terms/term-capacity-quality-attribute/#qualitatsmerkmal-kapazitat","text":"Ma\u00df, in dem die H\u00f6chstgrenzen eines Produkt- oder Systemparameters den Anforderungen entsprechen. Teilmerkmal von: Leistungseffizienz . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Kapazit\u00e4t"},{"location":"terms/term-cardinality/","text":"{lang=en} Cardinality \u00b6 Describes the quantitative rating of an association or relationship. It specifies the number of participants (objects, instances, modules etc) of the association. {lang=de} Kardinalit\u00e4t \u00b6 Beschreibt die quantitative Bewertung einer Assoziation oder Beziehung. Sie gibt die Zahl der Beteiligten (Objekte, Instanzen, Module usw.) der Assoziation an.","title":"Term cardinality"},{"location":"terms/term-cardinality/#cardinality","text":"Describes the quantitative rating of an association or relationship. It specifies the number of participants (objects, instances, modules etc) of the association. {lang=de}","title":"Cardinality"},{"location":"terms/term-cardinality/#kardinalitat","text":"Beschreibt die quantitative Bewertung einer Assoziation oder Beziehung. Sie gibt die Zahl der Beteiligten (Objekte, Instanzen, Module usw.) der Assoziation an.","title":"Kardinalit\u00e4t"},{"location":"terms/term-certification-program/","text":"{lang=en} Certification Program \u00b6 The iSAQB(R) CPSA(R) certification program, including its organizational components, documents (training documents, contracts) and processes. The copyrighted abbreviation and term CPSA(R) means Certified Professional for Software Architecture . {lang=de} Zertifizierungsprogramm \u00b6 Das iSAQB(R)/CPSA(R)-Zertifizierungsprogramm einschlie\u00dflich seiner organisatorischen Komponenten, Dokumente (Schulungsunterlagen, Vertr\u00e4ge) und Prozesse. Die urheberrechtliche gesch\u00fctzte Abk\u00fcrzung CPSA(R) steht f\u00fcr Certified Professional for Software Architecture .","title":"Term certification program"},{"location":"terms/term-certification-program/#certification-program","text":"The iSAQB(R) CPSA(R) certification program, including its organizational components, documents (training documents, contracts) and processes. The copyrighted abbreviation and term CPSA(R) means Certified Professional for Software Architecture . {lang=de}","title":"Certification Program"},{"location":"terms/term-certification-program/#zertifizierungsprogramm","text":"Das iSAQB(R)/CPSA(R)-Zertifizierungsprogramm einschlie\u00dflich seiner organisatorischen Komponenten, Dokumente (Schulungsunterlagen, Vertr\u00e4ge) und Prozesse. Die urheberrechtliche gesch\u00fctzte Abk\u00fcrzung CPSA(R) steht f\u00fcr Certified Professional for Software Architecture .","title":"Zertifizierungsprogramm"},{"location":"terms/term-cia-triad/","text":"{lang=en} CIA Triad \u00b6 See Security Goals Category: Security {lang=de} CIA-Triade \u00b6 Siehe Schutzziele Kategorie: Sicherheit","title":"Term cia triad"},{"location":"terms/term-cia-triad/#cia-triad","text":"See Security Goals Category: Security {lang=de}","title":"CIA Triad"},{"location":"terms/term-cia-triad/#cia-triade","text":"Siehe Schutzziele Kategorie: Sicherheit","title":"CIA-Triade"},{"location":"terms/term-cloud/","text":"{lang=en} Cloud \u00b6 \"Cloud computing is a model for enabling ubiquitous, convenient, on-demand network access to a shared pool of configurable computing resources (e.g., networks, servers, storage, applications, and services) that can be rapidly provisioned and released with minimal management effort or service provider interaction.\" Definition quoted from NIST (National Institute of Standards and Technology). The NIST definition contains the following five characteristics (quoted but abbreviated from the aforementioned NIST source too): On-demand self service: A consumer can unilaterally provision computing capabilities, such as server time and network storage, without requiring human interaction with each service provider. Broad network access: Capabilities are available over the network and accessed through standard mechanisms that promote use by heterogeneous client platforms. Resource pooling: The provider\u2019s computing resources are pooled to serve multiple consumers using a multi-tenant model, with different physical and virtual resources dynamically assigned and reassigned according to consumer demand. There is location independence in that the customer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction (e.g., country, state, or datacenter). Examples of resources include storage, processing, memory, and network bandwidth. Rapid elasticity: Capabilities can be elastically provisioned and released, in some cases automatically, to scale rapidly commensurate with demand. To the consumer, the capabilities available for provisioning often appear to be unlimited and can be appropriated in any quantity at any time. Measured service: Cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service (e.g., storage, processing, bandwidth, and active user accounts). Resource usage can be monitored, controlled, and reported, providing transparency for both the provider and consumer of the utilized service. {lang=de} Cloud \u00b6 \u201eCloudcomputing ist ein Modell zur Erm\u00f6glichung eines allgegenw\u00e4rtigen, bequemen, auf Abruf verf\u00fcgbaren Netzzugriffs auf einen gemeinsamen Pool konfigurierbarer Rechenressourcen (z.B. Netzwerke, Server, Speicher, Anwendungen und Dienste), der schnell bereitgestellt und mit geringf\u00fcgigem Verwaltungsaufwand bzw. minimalen Eingriffen durch den Dienstanbieter freigegeben werden kann.\" \u00dcbersetztes englisches Zitat von NIST (National Institute of Standards and Technology). Die NIST-Definition enth\u00e4lt die folgenden f\u00fcnf Eigenschaften (die ebenfalls von der oben genannten NIST-Quelle stammen, jedoch verk\u00fcrzt wurden): On-Demand Self-Service: Ein Kunde kann einseitig Rechenkapazit\u00e4ten, wie Serverzeit und Netzwerkspeicher, anfordern, ohne dass eine menschliche Interaktion mit jedem Dienstanbieter erforderlich ist. Broad Network Access: Die Leistungen sind mittels Standardmechanismen, die durch heterogene Client-Plattformen die Nutzung f\u00f6rdern, \u00fcber das Netzwerk zug\u00e4nglich. Resource Pooling: Die Rechenressourcen des Anbieters werden geb\u00fcndelt, so dass mehrere Kunden mit einem mandantenf\u00e4higen Modell bedient werden k\u00f6nnen, wobei die verschiedenen physischen und virtuellen Ressourcen gem\u00e4\u00df Kundenanforderung dynamisch zugewiesen und neu zugewiesen werden. Dies geschieht ortsunabh\u00e4ngig, wobei der Kunde in der Regel keine Kontrolle oder Kenntnis \u00fcber den genauen Standort der bereitgestellten Ressourcen hat, jedoch gegebenenfalls den Standort auf einer h\u00f6heren Abstraktionsebene spezifizieren kann (z.B. Land, Bundesstaat oder Rechenzentrum). Beispiele f\u00fcr Ressourcen sind Speicher, Verarbeitung, Arbeitsspeicher und Netzwerkbandbreite. Rapid Elasticity: Die Dienste k\u00f6nnen flexibel und in manchen F\u00e4llen automatisch bereitgestellt und freigegeben werden, um sich schnell an den Bedarf anzupassen. F\u00fcr den Kunden erscheinen die verf\u00fcgbaren Kapazit\u00e4ten oft unbegrenzt und jederzeit in beliebiger Menge verf\u00fcgbar. Measured Service: Cloud-Systeme k\u00f6nnen durch den Einsatz von Messverfahren auf einer der Art des Dienstes (z.B. Speicher, Verarbeitung, Bandbreite und aktive Benutzerkonten) angemessenen Abstraktionsebene die Ressourcennutzung automatisch steuern und optimieren. Die Ressourcennutzung kann \u00fcberwacht, gesteuert und berichtet werden, was Transparenz f\u00fcr den Anbieter sowie den Kunden des betreffenden Dienstes schafft.","title":"Term cloud"},{"location":"terms/term-cloud/#cloud","text":"\"Cloud computing is a model for enabling ubiquitous, convenient, on-demand network access to a shared pool of configurable computing resources (e.g., networks, servers, storage, applications, and services) that can be rapidly provisioned and released with minimal management effort or service provider interaction.\" Definition quoted from NIST (National Institute of Standards and Technology). The NIST definition contains the following five characteristics (quoted but abbreviated from the aforementioned NIST source too): On-demand self service: A consumer can unilaterally provision computing capabilities, such as server time and network storage, without requiring human interaction with each service provider. Broad network access: Capabilities are available over the network and accessed through standard mechanisms that promote use by heterogeneous client platforms. Resource pooling: The provider\u2019s computing resources are pooled to serve multiple consumers using a multi-tenant model, with different physical and virtual resources dynamically assigned and reassigned according to consumer demand. There is location independence in that the customer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction (e.g., country, state, or datacenter). Examples of resources include storage, processing, memory, and network bandwidth. Rapid elasticity: Capabilities can be elastically provisioned and released, in some cases automatically, to scale rapidly commensurate with demand. To the consumer, the capabilities available for provisioning often appear to be unlimited and can be appropriated in any quantity at any time. Measured service: Cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service (e.g., storage, processing, bandwidth, and active user accounts). Resource usage can be monitored, controlled, and reported, providing transparency for both the provider and consumer of the utilized service. {lang=de}","title":"Cloud"},{"location":"terms/term-cloud/#cloud_1","text":"\u201eCloudcomputing ist ein Modell zur Erm\u00f6glichung eines allgegenw\u00e4rtigen, bequemen, auf Abruf verf\u00fcgbaren Netzzugriffs auf einen gemeinsamen Pool konfigurierbarer Rechenressourcen (z.B. Netzwerke, Server, Speicher, Anwendungen und Dienste), der schnell bereitgestellt und mit geringf\u00fcgigem Verwaltungsaufwand bzw. minimalen Eingriffen durch den Dienstanbieter freigegeben werden kann.\" \u00dcbersetztes englisches Zitat von NIST (National Institute of Standards and Technology). Die NIST-Definition enth\u00e4lt die folgenden f\u00fcnf Eigenschaften (die ebenfalls von der oben genannten NIST-Quelle stammen, jedoch verk\u00fcrzt wurden): On-Demand Self-Service: Ein Kunde kann einseitig Rechenkapazit\u00e4ten, wie Serverzeit und Netzwerkspeicher, anfordern, ohne dass eine menschliche Interaktion mit jedem Dienstanbieter erforderlich ist. Broad Network Access: Die Leistungen sind mittels Standardmechanismen, die durch heterogene Client-Plattformen die Nutzung f\u00f6rdern, \u00fcber das Netzwerk zug\u00e4nglich. Resource Pooling: Die Rechenressourcen des Anbieters werden geb\u00fcndelt, so dass mehrere Kunden mit einem mandantenf\u00e4higen Modell bedient werden k\u00f6nnen, wobei die verschiedenen physischen und virtuellen Ressourcen gem\u00e4\u00df Kundenanforderung dynamisch zugewiesen und neu zugewiesen werden. Dies geschieht ortsunabh\u00e4ngig, wobei der Kunde in der Regel keine Kontrolle oder Kenntnis \u00fcber den genauen Standort der bereitgestellten Ressourcen hat, jedoch gegebenenfalls den Standort auf einer h\u00f6heren Abstraktionsebene spezifizieren kann (z.B. Land, Bundesstaat oder Rechenzentrum). Beispiele f\u00fcr Ressourcen sind Speicher, Verarbeitung, Arbeitsspeicher und Netzwerkbandbreite. Rapid Elasticity: Die Dienste k\u00f6nnen flexibel und in manchen F\u00e4llen automatisch bereitgestellt und freigegeben werden, um sich schnell an den Bedarf anzupassen. F\u00fcr den Kunden erscheinen die verf\u00fcgbaren Kapazit\u00e4ten oft unbegrenzt und jederzeit in beliebiger Menge verf\u00fcgbar. Measured Service: Cloud-Systeme k\u00f6nnen durch den Einsatz von Messverfahren auf einer der Art des Dienstes (z.B. Speicher, Verarbeitung, Bandbreite und aktive Benutzerkonten) angemessenen Abstraktionsebene die Ressourcennutzung automatisch steuern und optimieren. Die Ressourcennutzung kann \u00fcberwacht, gesteuert und berichtet werden, was Transparenz f\u00fcr den Anbieter sowie den Kunden des betreffenden Dienstes schafft.","title":"Cloud"},{"location":"terms/term-co-existence-quality-attribute/","text":"{lang=en} Co-Existence Quality Attribute \u00b6 Degree to which a product can perform its required functions efficiently while sharing a common environment and resources with other products, without detrimental impact on any other product. Is a sub-characteristic of: compatibility . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Koexistenz \u00b6 Ma\u00df, in dem ein Produkt, w\u00e4hrend es sich eine gemeinsame Umgebung und Ressourcen mit anderen Produkten teilt, ohne nachteilige Auswirkungen auf andere Produkte seine geforderten Funktionen effizient erf\u00fcllen kann. Teilmerkmal von: Kompatibilit\u00e4t . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term co existence quality attribute"},{"location":"terms/term-co-existence-quality-attribute/#co-existence-quality-attribute","text":"Degree to which a product can perform its required functions efficiently while sharing a common environment and resources with other products, without detrimental impact on any other product. Is a sub-characteristic of: compatibility . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Co-Existence Quality Attribute"},{"location":"terms/term-co-existence-quality-attribute/#qualitatsmerkmal-koexistenz","text":"Ma\u00df, in dem ein Produkt, w\u00e4hrend es sich eine gemeinsame Umgebung und Ressourcen mit anderen Produkten teilt, ohne nachteilige Auswirkungen auf andere Produkte seine geforderten Funktionen effizient erf\u00fcllen kann. Teilmerkmal von: Kompatibilit\u00e4t . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Koexistenz"},{"location":"terms/term-cohesion/","text":"{lang=en} Cohesion \u00b6 The degree to which elements of a building block, component or module belong together is called cohesion . It measures the strength of relationship between pieces of functionality within a given component. In cohesive systems, functionality is strongly related. It is usually characterized as high cohesion or low cohesion . Strive for high cohesion, because high cohesion often implies reusability, low coupling and understandability. {lang=de} Koh\u00e4sion \u00b6 Ma\u00df, in dem Elemente eines Bausteins, einer Komponente oder eines Moduls zusammengeh\u00f6ren. Sie misst die St\u00e4rke der Beziehung zwischen Teilen einer Funktionalit\u00e4t in einer gegebenen Komponente. In koh\u00e4renten Systemen ist Funktionalit\u00e4t stark verbunden. Sie wird in der Regel als starke Koh\u00e4sion oder schwache Koh\u00e4sion charakterisiert. Ziel sollte starke Koh\u00e4sion sein, da diese oft mit Wiederverwendbarkeit, loser Kopplung und Verst\u00e4ndlichkeit einhergeht.","title":"Term cohesion"},{"location":"terms/term-cohesion/#cohesion","text":"The degree to which elements of a building block, component or module belong together is called cohesion . It measures the strength of relationship between pieces of functionality within a given component. In cohesive systems, functionality is strongly related. It is usually characterized as high cohesion or low cohesion . Strive for high cohesion, because high cohesion often implies reusability, low coupling and understandability. {lang=de}","title":"Cohesion"},{"location":"terms/term-cohesion/#kohasion","text":"Ma\u00df, in dem Elemente eines Bausteins, einer Komponente oder eines Moduls zusammengeh\u00f6ren. Sie misst die St\u00e4rke der Beziehung zwischen Teilen einer Funktionalit\u00e4t in einer gegebenen Komponente. In koh\u00e4renten Systemen ist Funktionalit\u00e4t stark verbunden. Sie wird in der Regel als starke Koh\u00e4sion oder schwache Koh\u00e4sion charakterisiert. Ziel sollte starke Koh\u00e4sion sein, da diese oft mit Wiederverwendbarkeit, loser Kopplung und Verst\u00e4ndlichkeit einhergeht.","title":"Koh\u00e4sion"},{"location":"terms/term-command/","text":"{lang=en} Command \u00b6 Design pattern in which an object is used to encapsulate an action. This action might be invoked or executed at a later time. {lang=de} Kommando \u00b6 Entwurfsmuster, bei dem ein Objekt zur Kapselung einer Aktion genutzt wird. Diese Aktion kann sp\u00e4ter aufgerufen oder ausgef\u00fchrt werden.","title":"Term command"},{"location":"terms/term-command/#command","text":"Design pattern in which an object is used to encapsulate an action. This action might be invoked or executed at a later time. {lang=de}","title":"Command"},{"location":"terms/term-command/#kommando","text":"Entwurfsmuster, bei dem ein Objekt zur Kapselung einer Aktion genutzt wird. Diese Aktion kann sp\u00e4ter aufgerufen oder ausgef\u00fchrt werden.","title":"Kommando"},{"location":"terms/term-common-closure-principle/","text":"{lang=en} Common Closure Principle \u00b6 A fundamental principle for designing the structure of software systems (also see Package Principles ). It directly and explicitly restates the Single Responsibility Principle for larger components. The subcomponents of a component should ideally have the exact same reasons to change. A change request that effects one of them should effect all of them, but it should not effect anything else outside their enclosing component. Thereby, each expected change request would effect a minimal number of components. Or put another way: Each component would be closed to a maximum number of expected change requests. The term expected here signifies a few important implications: The inherent concepts/responsibilities of a system run deeper than a surface-level description of its behaviour. The deeper concepts/responsibilities of a system are not entirely objective but can be modeled in different ways. Determining the concepts/responsibilities of a system is not just passive describing but also active strategizing . This principle leads to highly cohesive components. It also implies loosely coupled components because related concepts that do change together do get bundled up in the same component. When each single concept is expressed by a single component, there are no unnecessary couplings between components. Category: Design-Principle {lang=de} Common-Closure-Prinzip \u00b6 Ein Grundsatz f\u00fcr die Gestaltung der Struktur von Softwaresystemen (siehe auch Packaging-Prinzipien ). Er ist eine direkte und ausdr\u00fcckliche Neuformulierung des Single-Responsibility-Prinzips f\u00fcr gr\u00f6\u00dfere Komponenten. Die Unterkomponenten einer Komponente sollen idealerweise genau dieselben \u00c4nderungsgr\u00fcnde haben. Ein \u00c4nderungsantrag, der sich auf eine von ihnen auswirkt, soll sich auf sie alle, aber auf nichts au\u00dferhalb ihrer enthaltenden Komponente auswirken. Dadurch w\u00fcrde sich jeder erwartete \u00c4nderungsantrag auf eine minimale Zahl an Komponenten auswirken. Oder anders gesagt: Jede Komponente w\u00e4re gegen\u00fcber einer maximalen Zahl an erwarteten \u00c4nderungsantr\u00e4gen geschlossen . Der Begriff erwartet hat an dieser Stelle einige bedeutende Auswirkungen: Die inh\u00e4renten Konzepte/Verantwortlichkeiten eines Systems gehen tiefer als einer Beschreibung seines Verhaltens auf Oberfl\u00e4chenebene. Die tieferen Konzepte/Verantwortlichkeiten eines Systems sind nicht vollst\u00e4ndig objektiv, sondern k\u00f6nnen auf unterschiedliche Weise modelliert werden. Die Festlegung der Konzepte/Verantwortlichkeiten eines Systems ist nicht nur eine passive Beschreibung, sondern aktive Strategieentwicklung . Dieses Prinzip f\u00fchrt zu Komponenten mit starker Koh\u00e4sion . Es geht auch mit lose gekoppelten Komponenten einher, da verbundene Konzepte, die sich zusammen \u00e4ndern , in dieselbe Komponente geb\u00fcndelt werden. Wenn jedes einzelne Konzept von einer einzigen Komponente ausgedr\u00fcckt wird, gibt es keine unn\u00f6tigen Kopplungen zwischen Komponenten. Kategorie: Entwurfsprinzip","title":"Term common closure principle"},{"location":"terms/term-common-closure-principle/#common-closure-principle","text":"A fundamental principle for designing the structure of software systems (also see Package Principles ). It directly and explicitly restates the Single Responsibility Principle for larger components. The subcomponents of a component should ideally have the exact same reasons to change. A change request that effects one of them should effect all of them, but it should not effect anything else outside their enclosing component. Thereby, each expected change request would effect a minimal number of components. Or put another way: Each component would be closed to a maximum number of expected change requests. The term expected here signifies a few important implications: The inherent concepts/responsibilities of a system run deeper than a surface-level description of its behaviour. The deeper concepts/responsibilities of a system are not entirely objective but can be modeled in different ways. Determining the concepts/responsibilities of a system is not just passive describing but also active strategizing . This principle leads to highly cohesive components. It also implies loosely coupled components because related concepts that do change together do get bundled up in the same component. When each single concept is expressed by a single component, there are no unnecessary couplings between components. Category: Design-Principle {lang=de}","title":"Common Closure Principle"},{"location":"terms/term-common-closure-principle/#common-closure-prinzip","text":"Ein Grundsatz f\u00fcr die Gestaltung der Struktur von Softwaresystemen (siehe auch Packaging-Prinzipien ). Er ist eine direkte und ausdr\u00fcckliche Neuformulierung des Single-Responsibility-Prinzips f\u00fcr gr\u00f6\u00dfere Komponenten. Die Unterkomponenten einer Komponente sollen idealerweise genau dieselben \u00c4nderungsgr\u00fcnde haben. Ein \u00c4nderungsantrag, der sich auf eine von ihnen auswirkt, soll sich auf sie alle, aber auf nichts au\u00dferhalb ihrer enthaltenden Komponente auswirken. Dadurch w\u00fcrde sich jeder erwartete \u00c4nderungsantrag auf eine minimale Zahl an Komponenten auswirken. Oder anders gesagt: Jede Komponente w\u00e4re gegen\u00fcber einer maximalen Zahl an erwarteten \u00c4nderungsantr\u00e4gen geschlossen . Der Begriff erwartet hat an dieser Stelle einige bedeutende Auswirkungen: Die inh\u00e4renten Konzepte/Verantwortlichkeiten eines Systems gehen tiefer als einer Beschreibung seines Verhaltens auf Oberfl\u00e4chenebene. Die tieferen Konzepte/Verantwortlichkeiten eines Systems sind nicht vollst\u00e4ndig objektiv, sondern k\u00f6nnen auf unterschiedliche Weise modelliert werden. Die Festlegung der Konzepte/Verantwortlichkeiten eines Systems ist nicht nur eine passive Beschreibung, sondern aktive Strategieentwicklung . Dieses Prinzip f\u00fchrt zu Komponenten mit starker Koh\u00e4sion . Es geht auch mit lose gekoppelten Komponenten einher, da verbundene Konzepte, die sich zusammen \u00e4ndern , in dieselbe Komponente geb\u00fcndelt werden. Wenn jedes einzelne Konzept von einer einzigen Komponente ausgedr\u00fcckt wird, gibt es keine unn\u00f6tigen Kopplungen zwischen Komponenten. Kategorie: Entwurfsprinzip","title":"Common-Closure-Prinzip"},{"location":"terms/term-common-reuse-principle/","text":"{lang=en} Common Reuse Principle \u00b6 A fundamental principle for designing the structure of software systems (also see Package Principles ). The subcomponents (classes) of a component should be exactly the ones that are being (re)used together. Or the other way around: Components that are being (re)used together should be packaged into a larger component. This also implies that subcomponents that are not frequently used in conjunction with the other subcomponents should not be in the respective component. This perspective helps in deciding what belongs into a component and what doesn't. It aims at a system decomposition of loosely coupled and highly cohesive components. This obviously echoes the Single Responsibility Principle . It also echoes the Interface Segregation Principle , as it ensures that clients aren't forced to depend on concepts they don't care about. Category: Design-Principle {lang=de} Common-Reuse-Prinzip \u00b6 Ein Grundsatz f\u00fcr die Gestaltung der Struktur von Softwaresystemen (siehe auch Packaging-Prinzipien ). Die Unterkomponenten (Klassen) einer Komponente sollen genau die sein, die zusammen (wieder)verwendet werden. Oder anders herum: Komponenten, die zusammen (wieder)verwendet werden, sollen in eine gr\u00f6\u00dfere Komponente gepackt werden. Dies bedeutet auch, dass Unterkomponenten, die nicht h\u00e4ufig zusammen mit anderen Unterkomponenten verwendet werden, nicht in der entsprechenden Komponente sein sollen. Diese Perspektive hilft bei der Entscheidung, was in eine Komponente geh\u00f6rt und was nicht. Sie zielt auf eine Systemzerlegung mit lose gekoppelten und stark koh\u00e4renten Komponenten ab. Dies steht nat\u00fcrlich im engen Zusammenhang mit dem Single-Responsibility-Prinzip . Au\u00dferdem besteht ein Zusammenhang zum Schnittstellenaufteilungsprinzip , da das Prinzip sicherstellt, dass Clients nicht gezwungen werden, von Konzepten abzuh\u00e4ngen, die f\u00fcr sie bedeutungslos sind. Kategorie: Entwurfsprinzip","title":"Term common reuse principle"},{"location":"terms/term-common-reuse-principle/#common-reuse-principle","text":"A fundamental principle for designing the structure of software systems (also see Package Principles ). The subcomponents (classes) of a component should be exactly the ones that are being (re)used together. Or the other way around: Components that are being (re)used together should be packaged into a larger component. This also implies that subcomponents that are not frequently used in conjunction with the other subcomponents should not be in the respective component. This perspective helps in deciding what belongs into a component and what doesn't. It aims at a system decomposition of loosely coupled and highly cohesive components. This obviously echoes the Single Responsibility Principle . It also echoes the Interface Segregation Principle , as it ensures that clients aren't forced to depend on concepts they don't care about. Category: Design-Principle {lang=de}","title":"Common Reuse Principle"},{"location":"terms/term-common-reuse-principle/#common-reuse-prinzip","text":"Ein Grundsatz f\u00fcr die Gestaltung der Struktur von Softwaresystemen (siehe auch Packaging-Prinzipien ). Die Unterkomponenten (Klassen) einer Komponente sollen genau die sein, die zusammen (wieder)verwendet werden. Oder anders herum: Komponenten, die zusammen (wieder)verwendet werden, sollen in eine gr\u00f6\u00dfere Komponente gepackt werden. Dies bedeutet auch, dass Unterkomponenten, die nicht h\u00e4ufig zusammen mit anderen Unterkomponenten verwendet werden, nicht in der entsprechenden Komponente sein sollen. Diese Perspektive hilft bei der Entscheidung, was in eine Komponente geh\u00f6rt und was nicht. Sie zielt auf eine Systemzerlegung mit lose gekoppelten und stark koh\u00e4renten Komponenten ab. Dies steht nat\u00fcrlich im engen Zusammenhang mit dem Single-Responsibility-Prinzip . Au\u00dferdem besteht ein Zusammenhang zum Schnittstellenaufteilungsprinzip , da das Prinzip sicherstellt, dass Clients nicht gezwungen werden, von Konzepten abzuh\u00e4ngen, die f\u00fcr sie bedeutungslos sind. Kategorie: Entwurfsprinzip","title":"Common-Reuse-Prinzip"},{"location":"terms/term-compatibility-quality-attribute/","text":"{lang=en} Compatibility Quality Attribute \u00b6 Degree to which a product, system or component can exchange information with other products, systems or components, and/or perform its required functions, while sharing the same hardware or software environment. Is composed of the following sub-characteristics: co-existence , interoperabilty . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Kompatibilit\u00e4t \u00b6 Ma\u00df, in dem ein Produkt, ein System oder eine Komponente Informationen mit anderen Produkten, Systemen oder Komponenten austauschen und/oder ihre geforderten Funktionen erf\u00fcllen k\u00f6nnen, w\u00e4hrend sie sich eine Hardware- oder Softwareumgebung teilen. Es besteht aus folgenden Teilmerkmalen: Koexistenz , Interoperabilit\u00e4t . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term compatibility quality attribute"},{"location":"terms/term-compatibility-quality-attribute/#compatibility-quality-attribute","text":"Degree to which a product, system or component can exchange information with other products, systems or components, and/or perform its required functions, while sharing the same hardware or software environment. Is composed of the following sub-characteristics: co-existence , interoperabilty . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Compatibility Quality Attribute"},{"location":"terms/term-compatibility-quality-attribute/#qualitatsmerkmal-kompatibilitat","text":"Ma\u00df, in dem ein Produkt, ein System oder eine Komponente Informationen mit anderen Produkten, Systemen oder Komponenten austauschen und/oder ihre geforderten Funktionen erf\u00fcllen k\u00f6nnen, w\u00e4hrend sie sich eine Hardware- oder Softwareumgebung teilen. Es besteht aus folgenden Teilmerkmalen: Koexistenz , Interoperabilit\u00e4t . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Kompatibilit\u00e4t"},{"location":"terms/term-complexity/","text":"{lang=en} Complexity \u00b6 \"Complexity is generally used to characterize something with many parts where those parts interact with each other in multiple ways.\" (quoted from Wikipedia.) Essential complexity is the core of the problem we have to solve, and it consists of the parts of the software that are legitimately difficult problems. Most software problems contain some complexity. Accidental complexity is all the stuff that doesn\u2019t necessarily relate directly to the solution, but that we have to deal with anyway. (quoted from Mark Needham ) Architects shall strive to reduce accidental complexity. {lang=de} Komplexit\u00e4t \u00b6 \u201eKomplexit\u00e4t wird im Allgemeinen zur Charakterisierung eines Systems o.\u00c4. mit vielen Teilen, in dem diese Teile auf unterschiedliche Weise miteinander interagieren, verwendet.\" (\u00dcbersetztes englisches Zitat aus Wikipedia.) Essenzielle Komplexit\u00e4t ist der Kern des Problems, das es zu l\u00f6sen gilt, und besteht aus den Teilen der Software, die wirklich schwierige Probleme sind. Den meisten Softwareproblemen wohnt eine gewisse Komplexit\u00e4t inne. Akzidentelle Komplexit\u00e4t ist alles, was sich nicht notwendigerweise direkt auf die L\u00f6sung bezieht, mit dem wir uns aber dennoch befassen m\u00fcssen. (\u00dcbersetztes englisches Zitat von Mark Needham ) Architekten haben sich um einer Verringerung der akzidentellen Komplexit\u00e4t zu bem\u00fchen.","title":"Term complexity"},{"location":"terms/term-complexity/#complexity","text":"\"Complexity is generally used to characterize something with many parts where those parts interact with each other in multiple ways.\" (quoted from Wikipedia.) Essential complexity is the core of the problem we have to solve, and it consists of the parts of the software that are legitimately difficult problems. Most software problems contain some complexity. Accidental complexity is all the stuff that doesn\u2019t necessarily relate directly to the solution, but that we have to deal with anyway. (quoted from Mark Needham ) Architects shall strive to reduce accidental complexity. {lang=de}","title":"Complexity"},{"location":"terms/term-complexity/#komplexitat","text":"\u201eKomplexit\u00e4t wird im Allgemeinen zur Charakterisierung eines Systems o.\u00c4. mit vielen Teilen, in dem diese Teile auf unterschiedliche Weise miteinander interagieren, verwendet.\" (\u00dcbersetztes englisches Zitat aus Wikipedia.) Essenzielle Komplexit\u00e4t ist der Kern des Problems, das es zu l\u00f6sen gilt, und besteht aus den Teilen der Software, die wirklich schwierige Probleme sind. Den meisten Softwareproblemen wohnt eine gewisse Komplexit\u00e4t inne. Akzidentelle Komplexit\u00e4t ist alles, was sich nicht notwendigerweise direkt auf die L\u00f6sung bezieht, mit dem wir uns aber dennoch befassen m\u00fcssen. (\u00dcbersetztes englisches Zitat von Mark Needham ) Architekten haben sich um einer Verringerung der akzidentellen Komplexit\u00e4t zu bem\u00fchen.","title":"Komplexit\u00e4t"},{"location":"terms/term-component/","text":"{lang=en} Component \u00b6 See Building block . Structural element of an architecture. {lang=de} Komponente \u00b6 Siehe Baustein . Strukturelement einer Architektur.","title":"Term component"},{"location":"terms/term-component/#component","text":"See Building block . Structural element of an architecture. {lang=de}","title":"Component"},{"location":"terms/term-component/#komponente","text":"Siehe Baustein . Strukturelement einer Architektur.","title":"Komponente"},{"location":"terms/term-composition/","text":"{lang=en} Composition \u00b6 Combine simpler elements (e.g. functions, data types, building blocks) to build more complicated, powerful or more responsible ones. In UML: When the owning element is destroyed, so are the contained elements. {lang=de} Komposition \u00b6 Kombination von einfacheren Elementen (z.B. Funktionen, Datentypen, Bausteinen) zu komplizierteren, leistungsst\u00e4rkeren oder st\u00e4rker verantwortlichen Elementen. In UML: Wenn das enthaltende Element vernichtet wird, werden auch die enthaltenen Elemente vernichtet.","title":"Term composition"},{"location":"terms/term-composition/#composition","text":"Combine simpler elements (e.g. functions, data types, building blocks) to build more complicated, powerful or more responsible ones. In UML: When the owning element is destroyed, so are the contained elements. {lang=de}","title":"Composition"},{"location":"terms/term-composition/#komposition","text":"Kombination von einfacheren Elementen (z.B. Funktionen, Datentypen, Bausteinen) zu komplizierteren, leistungsst\u00e4rkeren oder st\u00e4rker verantwortlichen Elementen. In UML: Wenn das enthaltende Element vernichtet wird, werden auch die enthaltenen Elemente vernichtet.","title":"Komposition"},{"location":"terms/term-concept/","text":"{lang=en} Concept \u00b6 Plan, principle(s) or rule(s) how to solve a specific problem. Concepts are often cross-cutting in a sense that multiple architectural elements might be affected by a single concept. That means that implementors of e.g. implementation units (building blocks) should adhere to the corresponding concept. Concepts form the basis for conceptual integrity . {lang=de} Konzept \u00b6 Plan, Prinzip(ien) oder Regel(n), wie ein spezifisches Problem zu l\u00f6sen ist. Konzepte sind h\u00e4ufig querschnittlich , in dem Sinne, dass mehrere Architekturelemente von einem einzigen Konzept betroffen sein k\u00f6nnen. Das hei\u00dft, dass Implementierer von z.B. Implementierungseinheiten (Bausteinen) das entsprechende Konzept einhalten sollen. Konzepte bilden die Basis f\u00fcr konzeptionelle Integrit\u00e4t .","title":"Term concept"},{"location":"terms/term-concept/#concept","text":"Plan, principle(s) or rule(s) how to solve a specific problem. Concepts are often cross-cutting in a sense that multiple architectural elements might be affected by a single concept. That means that implementors of e.g. implementation units (building blocks) should adhere to the corresponding concept. Concepts form the basis for conceptual integrity . {lang=de}","title":"Concept"},{"location":"terms/term-concept/#konzept","text":"Plan, Prinzip(ien) oder Regel(n), wie ein spezifisches Problem zu l\u00f6sen ist. Konzepte sind h\u00e4ufig querschnittlich , in dem Sinne, dass mehrere Architekturelemente von einem einzigen Konzept betroffen sein k\u00f6nnen. Das hei\u00dft, dass Implementierer von z.B. Implementierungseinheiten (Bausteinen) das entsprechende Konzept einhalten sollen. Konzepte bilden die Basis f\u00fcr konzeptionelle Integrit\u00e4t .","title":"Konzept"},{"location":"terms/term-conceptual-integrity/","text":"{lang=en} Conceptual Integrity \u00b6 Concepts, rules, patterns and similar solution approaches are applied in a consistent (homogeneous, similar) way throughout the system. Similar problems are solved in similar or identical ways.","title":"Term conceptual integrity"},{"location":"terms/term-conceptual-integrity/#conceptual-integrity","text":"Concepts, rules, patterns and similar solution approaches are applied in a consistent (homogeneous, similar) way throughout the system. Similar problems are solved in similar or identical ways.","title":"Conceptual Integrity"},{"location":"terms/term-concern/","text":"{lang=en} Concern \u00b6 \"A concern about an architecture is a requirement, an objective, a constraint, an intention, or an aspiration a stakeholder has for that architecture.\" (quoted from [Rozanski+11], chapter 8) Following ISO/IEC/IEEE 42010 a concern is defined as (system) interest in a system relevant to one or more of its stakeholders (as defined in ISO/IEC/IEEE 42010). Note, a concern pertains to any influence on a system in its environment, including developmental, technological, business, operational, organizational, political, economic, legal, regulatory, ecological and social influences. Category: ISO-IEC-IEEE-42010 {lang=de} Belang \u00b6 Belange in Bezug auf eine Architektur sind Anforderungen, Ziele, Einschr\u00e4nkungen, Absichten oder Bestrebungen eines Stakeholders f\u00fcr diese Architektur. ([Rozanski+11], Kapitel 8) Gem\u00e4\u00df ISO/IEC/IEEE 42010 ist Belang definiert als (System) Interesse an einem System, das f\u00fcr einen oder mehrere Stakeholder relevant ist (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Belange beziehen sich auf jegliche Einfl\u00fcsse auf ein System in seiner Umgebung, wie Entwicklungs-, Gesch\u00e4fts- und Betriebseinfl\u00fcsse sowie technologische, organisatorische, politische, wirtschaftliche, rechtlichen, regulatorische, \u00f6kologische und soziale Einfl\u00fcsse. Kategorie: ISO-IEC-IEEE-42010","title":"Term concern"},{"location":"terms/term-concern/#concern","text":"\"A concern about an architecture is a requirement, an objective, a constraint, an intention, or an aspiration a stakeholder has for that architecture.\" (quoted from [Rozanski+11], chapter 8) Following ISO/IEC/IEEE 42010 a concern is defined as (system) interest in a system relevant to one or more of its stakeholders (as defined in ISO/IEC/IEEE 42010). Note, a concern pertains to any influence on a system in its environment, including developmental, technological, business, operational, organizational, political, economic, legal, regulatory, ecological and social influences. Category: ISO-IEC-IEEE-42010 {lang=de}","title":"Concern"},{"location":"terms/term-concern/#belang","text":"Belange in Bezug auf eine Architektur sind Anforderungen, Ziele, Einschr\u00e4nkungen, Absichten oder Bestrebungen eines Stakeholders f\u00fcr diese Architektur. ([Rozanski+11], Kapitel 8) Gem\u00e4\u00df ISO/IEC/IEEE 42010 ist Belang definiert als (System) Interesse an einem System, das f\u00fcr einen oder mehrere Stakeholder relevant ist (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Belange beziehen sich auf jegliche Einfl\u00fcsse auf ein System in seiner Umgebung, wie Entwicklungs-, Gesch\u00e4fts- und Betriebseinfl\u00fcsse sowie technologische, organisatorische, politische, wirtschaftliche, rechtlichen, regulatorische, \u00f6kologische und soziale Einfl\u00fcsse. Kategorie: ISO-IEC-IEEE-42010","title":"Belang"},{"location":"terms/term-confidentiality-quality-attribute/","text":"{lang=en} Confidentiality Quality Attribute \u00b6 Degree to which a product or system ensures that data are accessible only to those authorized to have access. Is a sub-characteristic of: security . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Vertraulichkeit \u00b6 Ma\u00df, in dem ein Produkt oder System sicherstellt, dass nur Zugriffsberechtigte Zugriff auf die Daten haben. Teilmerkmal von: Sicherheit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term confidentiality quality attribute"},{"location":"terms/term-confidentiality-quality-attribute/#confidentiality-quality-attribute","text":"Degree to which a product or system ensures that data are accessible only to those authorized to have access. Is a sub-characteristic of: security . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Confidentiality Quality Attribute"},{"location":"terms/term-confidentiality-quality-attribute/#qualitatsmerkmal-vertraulichkeit","text":"Ma\u00df, in dem ein Produkt oder System sicherstellt, dass nur Zugriffsberechtigte Zugriff auf die Daten haben. Teilmerkmal von: Sicherheit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Vertraulichkeit"},{"location":"terms/term-confidentiality/","text":"{lang=en} Confidentiality \u00b6 One of the basic Security Goals describing a system to disclose and make information only available to authorized parties. Category: Security {lang=de} Vertraulichkeit \u00b6 Eines der grundlegenden Schutzziele , das ein System beschreibt, welches Informationen nur Befugten offenlegt und bereitstellt. Kategorie: Sicherheit","title":"Term confidentiality"},{"location":"terms/term-confidentiality/#confidentiality","text":"One of the basic Security Goals describing a system to disclose and make information only available to authorized parties. Category: Security {lang=de}","title":"Confidentiality"},{"location":"terms/term-confidentiality/#vertraulichkeit","text":"Eines der grundlegenden Schutzziele , das ein System beschreibt, welches Informationen nur Befugten offenlegt und bereitstellt. Kategorie: Sicherheit","title":"Vertraulichkeit"},{"location":"terms/term-consistency/","text":"{lang=en} Consistency \u00b6 A consistent systems does not contain contradictions. Identical problems are solved with identical (or at least similar) approaches. Degree, to which data and their relations comply to validation rules. Clients (of a database) get identical results for identical queries (e.g. Monotonic-Read-Consistency, Montonic-Write-Consistency, Read-Your-Writes-Consistency etc.) With respect to behavior: Degree, to which a system behaves coherent, replicable and reasonable. {lang=de} Konsistenz \u00b6 Ein konsistentes System enth\u00e4lt keine Widerspr\u00fcche. Identische Probleme werden mit identischen (oder zumindest gleichartigen) Ans\u00e4tzen gel\u00f6st. Ma\u00df, in dem Daten und ihre Beziehungen Validierungsregeln entsprechen. Clients (einer Datenbank) erhalten bei identischen Abfragen identische Ergebnisse (z.B. Monotonic-Read-Consistency, Montonic-Write-Consistency, Read-Your-Writes-Consistency etc.) In Bezug auf Verhalten: Ma\u00df, in dem ein System sich koh\u00e4rent, reproduzierbar und vern\u00fcnftig verh\u00e4lt.","title":"Term consistency"},{"location":"terms/term-consistency/#consistency","text":"A consistent systems does not contain contradictions. Identical problems are solved with identical (or at least similar) approaches. Degree, to which data and their relations comply to validation rules. Clients (of a database) get identical results for identical queries (e.g. Monotonic-Read-Consistency, Montonic-Write-Consistency, Read-Your-Writes-Consistency etc.) With respect to behavior: Degree, to which a system behaves coherent, replicable and reasonable. {lang=de}","title":"Consistency"},{"location":"terms/term-consistency/#konsistenz","text":"Ein konsistentes System enth\u00e4lt keine Widerspr\u00fcche. Identische Probleme werden mit identischen (oder zumindest gleichartigen) Ans\u00e4tzen gel\u00f6st. Ma\u00df, in dem Daten und ihre Beziehungen Validierungsregeln entsprechen. Clients (einer Datenbank) erhalten bei identischen Abfragen identische Ergebnisse (z.B. Monotonic-Read-Consistency, Montonic-Write-Consistency, Read-Your-Writes-Consistency etc.) In Bezug auf Verhalten: Ma\u00df, in dem ein System sich koh\u00e4rent, reproduzierbar und vern\u00fcnftig verh\u00e4lt.","title":"Konsistenz"},{"location":"terms/term-constraint/","text":"{lang=en} Constraint \u00b6 A restriction on the degree of freedom you have in creating, designing, implementing or otherwise providing a solution. Constraints are often global requirements , such as limited development resources or a decision by senior management that restricts the way you plan, design, develop or operate a system. Based upon a definition from Scott Ambler {lang=de} Einschr\u00e4nkung \u00b6 Eine Einschr\u00e4nkung des Freiheitsgrads bei der Erstellung, dem Entwurf, der Implementierung oder der sonstigen Bereitstellung einer L\u00f6sung. Einschr\u00e4nkungen sind h\u00e4ufig globale Anforderungen , wie begrenzte Entwicklungsressourcen oder eine Entscheidung der Gesch\u00e4ftsleitung, die einschr\u00e4nkt, wie ein System geplant, entworfen, entwickelt oder betrieben wird. Gest\u00fctzt auf eine Definition von Scott Ambler","title":"Term constraint"},{"location":"terms/term-constraint/#constraint","text":"A restriction on the degree of freedom you have in creating, designing, implementing or otherwise providing a solution. Constraints are often global requirements , such as limited development resources or a decision by senior management that restricts the way you plan, design, develop or operate a system. Based upon a definition from Scott Ambler {lang=de}","title":"Constraint"},{"location":"terms/term-constraint/#einschrankung","text":"Eine Einschr\u00e4nkung des Freiheitsgrads bei der Erstellung, dem Entwurf, der Implementierung oder der sonstigen Bereitstellung einer L\u00f6sung. Einschr\u00e4nkungen sind h\u00e4ufig globale Anforderungen , wie begrenzte Entwicklungsressourcen oder eine Entscheidung der Gesch\u00e4ftsleitung, die einschr\u00e4nkt, wie ein System geplant, entworfen, entwickelt oder betrieben wird. Gest\u00fctzt auf eine Definition von Scott Ambler","title":"Einschr\u00e4nkung"},{"location":"terms/term-context-view/","text":"{lang=en} Context View \u00b6 Shows the complete system as one blackbox within its environment, either from a business perspective ( business context ) or from a technical or deployment perspective ( technical context ). The context view (or context diagram) shows the boundary between a system and its environment, showing the entities in its environment (its neighbors) with which it interacts. Neighbors can either be other software, hardware (like sensors), humans, user-roles or even organizations using the system. See Context . {lang=de} Kontextabgrenzung \u00b6 Zeigt das vollst\u00e4ndige System als eine Blackbox in seiner Umgebung, entweder aus Gesch\u00e4ftsperspektive ( Gesch\u00e4ftskontext ) oder aus technischer oder Verteilungsperspektive ( technischer Kontext ). Die Kontextabgrenzung (oder Kontextdiagramm) zeigt die Grenzen zwischen einem System und seiner Umgebung und stellt die Entit\u00e4ten in seiner Umgebung (seine Nachbarn), mit denen es interagiert, dar. Nachbarn k\u00f6nnen andere Software, Hardware (wie Sensoren), Menschen, Benutzerrollen oder sogar Organisationen, die das System nutzen, sein. Siehe Kontext .","title":"Term context view"},{"location":"terms/term-context-view/#context-view","text":"Shows the complete system as one blackbox within its environment, either from a business perspective ( business context ) or from a technical or deployment perspective ( technical context ). The context view (or context diagram) shows the boundary between a system and its environment, showing the entities in its environment (its neighbors) with which it interacts. Neighbors can either be other software, hardware (like sensors), humans, user-roles or even organizations using the system. See Context . {lang=de}","title":"Context View"},{"location":"terms/term-context-view/#kontextabgrenzung","text":"Zeigt das vollst\u00e4ndige System als eine Blackbox in seiner Umgebung, entweder aus Gesch\u00e4ftsperspektive ( Gesch\u00e4ftskontext ) oder aus technischer oder Verteilungsperspektive ( technischer Kontext ). Die Kontextabgrenzung (oder Kontextdiagramm) zeigt die Grenzen zwischen einem System und seiner Umgebung und stellt die Entit\u00e4ten in seiner Umgebung (seine Nachbarn), mit denen es interagiert, dar. Nachbarn k\u00f6nnen andere Software, Hardware (wie Sensoren), Menschen, Benutzerrollen oder sogar Organisationen, die das System nutzen, sein. Siehe Kontext .","title":"Kontextabgrenzung"},{"location":"terms/term-context/","text":"{lang=en} Context (of a System) \u00b6 \"Defines the relationships, dependencies, and interactions between the system and its environment: People, systems, and external entities with which it interacts.\" (quoted from Rozanski-Woods ) Another definition from arc42: \"System scope and context - as the name suggests - delimits your system (i.e. your scope) from all its communication partners (neighboring systems and users, i.e. the context of your system). It thereby specifies the external interfaces.\" (quoted from docs.arc42.org ) Distinguish between business and technical context: The business context (formerly called logical context) shows the external relationships from a business- or non-technical perspective. It abstracts from technical, hardware or implementation details. Input-/Output relationships are named by their business meaning instead of their technical properties. The technical context shows technical details, like transmission channel, technical protocoll, IP-address, bus or similar hardware details. Embedded systems, for example, often care for hardware-related information very early in development. {lang=de} Kontext (eines Systems) \u00b6 \u201eDefiniert die Beziehungen, Abh\u00e4ngigkeiten und Interaktionen zwischen dem System und seiner Umgebung: Menschen, Systeme und externe Entit\u00e4ten, mit denen es interagiert.\" (\u00dcbersetztes englisches Zitat aus Rozanski-Woods ) FIXME: Hier fehlt noch was","title":"Term context"},{"location":"terms/term-context/#context-of-a-system","text":"\"Defines the relationships, dependencies, and interactions between the system and its environment: People, systems, and external entities with which it interacts.\" (quoted from Rozanski-Woods ) Another definition from arc42: \"System scope and context - as the name suggests - delimits your system (i.e. your scope) from all its communication partners (neighboring systems and users, i.e. the context of your system). It thereby specifies the external interfaces.\" (quoted from docs.arc42.org ) Distinguish between business and technical context: The business context (formerly called logical context) shows the external relationships from a business- or non-technical perspective. It abstracts from technical, hardware or implementation details. Input-/Output relationships are named by their business meaning instead of their technical properties. The technical context shows technical details, like transmission channel, technical protocoll, IP-address, bus or similar hardware details. Embedded systems, for example, often care for hardware-related information very early in development. {lang=de}","title":"Context (of a System)"},{"location":"terms/term-context/#kontext-eines-systems","text":"\u201eDefiniert die Beziehungen, Abh\u00e4ngigkeiten und Interaktionen zwischen dem System und seiner Umgebung: Menschen, Systeme und externe Entit\u00e4ten, mit denen es interagiert.\" (\u00dcbersetztes englisches Zitat aus Rozanski-Woods ) FIXME: Hier fehlt noch was","title":"Kontext (eines Systems)"},{"location":"terms/term-correspondence-rule/","text":"{lang=en} Correspondence Rule \u00b6 Correspondences can be governed by correspondence rules. Correspondence rules are used to enforce relations within an architecture description (or between architecture descriptions) (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 Synonym: Integrity , homogeneity, conceptual integrity. {lang=de} Korrespondenzregel \u00b6 Korrespondenzen k\u00f6nnen Korrespondenzregeln unterliegen. Korrespondenzregeln werden genutzt, um Beziehungen innerhalb einer Architekturbeschreibung (oder zwischen Architekturbeschreibungen) durchzusetzen (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Kategorie: ISO-IEC-IEEE-42010 Synonym: Integrit\u00e4t , Homogenit\u00e4t, konzeptionelle Integrit\u00e4t.","title":"Term correspondence rule"},{"location":"terms/term-correspondence-rule/#correspondence-rule","text":"Correspondences can be governed by correspondence rules. Correspondence rules are used to enforce relations within an architecture description (or between architecture descriptions) (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 Synonym: Integrity , homogeneity, conceptual integrity. {lang=de}","title":"Correspondence Rule"},{"location":"terms/term-correspondence-rule/#korrespondenzregel","text":"Korrespondenzen k\u00f6nnen Korrespondenzregeln unterliegen. Korrespondenzregeln werden genutzt, um Beziehungen innerhalb einer Architekturbeschreibung (oder zwischen Architekturbeschreibungen) durchzusetzen (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Kategorie: ISO-IEC-IEEE-42010 Synonym: Integrit\u00e4t , Homogenit\u00e4t, konzeptionelle Integrit\u00e4t.","title":"Korrespondenzregel"},{"location":"terms/term-correspondence/","text":"{lang=en} Correspondence \u00b6 A correspondence defines a relation between architectural description elements. Correspondences are used to express architecture relations of interest within an architecture description (or between architecture descriptions) (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 {lang=de} Korrespondenz \u00b6 Korrespondenz definiert eine Beziehung zwischen Architekturbeschreibungselementen. Korrespondenzen werden genutzt, um relevante Architekturbeziehungen innerhalb einer Architekturbeschreibung (oder zwischen Architekturbeschreibungen) auszudr\u00fccken (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Kategorie: ISO-IEC-IEEE-42010","title":"Term correspondence"},{"location":"terms/term-correspondence/#correspondence","text":"A correspondence defines a relation between architectural description elements. Correspondences are used to express architecture relations of interest within an architecture description (or between architecture descriptions) (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 {lang=de}","title":"Correspondence"},{"location":"terms/term-correspondence/#korrespondenz","text":"Korrespondenz definiert eine Beziehung zwischen Architekturbeschreibungselementen. Korrespondenzen werden genutzt, um relevante Architekturbeziehungen innerhalb einer Architekturbeschreibung (oder zwischen Architekturbeschreibungen) auszudr\u00fccken (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Kategorie: ISO-IEC-IEEE-42010","title":"Korrespondenz"},{"location":"terms/term-coupling/","text":"{lang=en} Coupling \u00b6 Coupling is the kind and degree of interdependence between building blocks of software; a measure of how closely connected two components are. You should always aim for low coupling. Coupling is usually contrasted with cohesion . Low coupling often correlates with high cohesion, and vice versa. Low coupling is often a sign of a well-structured system. When combined with high cohesion, it supports understandability and maintainability. {lang=de} Kopplung \u00b6 Kopplung ist die Art und der Grad der Interdependenz zwischen Software-Bausteinen; ein Ma\u00df daf\u00fcr, wie eng zwei Komponenten verbunden sind.\\ Ziel sollte immer eine lose Kopplung sein. Kopplung steht in der Regel im Gegensatz zu Koh\u00e4sion . Lose Kopplung korreliert h\u00e4ufig mit starker Koh\u00e4sion. Lose Kopplung ist oft ein Zeichen f\u00fcr ein gut strukturiertes System. Zusammen mit starker Koh\u00e4sion unterst\u00fctzt sie Verst\u00e4ndlichkeit und Wartbarkeit.","title":"Term coupling"},{"location":"terms/term-coupling/#coupling","text":"Coupling is the kind and degree of interdependence between building blocks of software; a measure of how closely connected two components are. You should always aim for low coupling. Coupling is usually contrasted with cohesion . Low coupling often correlates with high cohesion, and vice versa. Low coupling is often a sign of a well-structured system. When combined with high cohesion, it supports understandability and maintainability. {lang=de}","title":"Coupling"},{"location":"terms/term-coupling/#kopplung","text":"Kopplung ist die Art und der Grad der Interdependenz zwischen Software-Bausteinen; ein Ma\u00df daf\u00fcr, wie eng zwei Komponenten verbunden sind.\\ Ziel sollte immer eine lose Kopplung sein. Kopplung steht in der Regel im Gegensatz zu Koh\u00e4sion . Lose Kopplung korreliert h\u00e4ufig mit starker Koh\u00e4sion. Lose Kopplung ist oft ein Zeichen f\u00fcr ein gut strukturiertes System. Zusammen mit starker Koh\u00e4sion unterst\u00fctzt sie Verst\u00e4ndlichkeit und Wartbarkeit.","title":"Kopplung"},{"location":"terms/term-cpsa/","text":"{lang=en} CPSA(R) \u00b6 Certified Professional for Software Architecture(R) \u2013 the common name for different levels of certification issued by the iSAQB . The most common known certifications are the foundation level (CPSA-F) and the advanced level (CPSA-A). {lang=de} CPSA(R) \u00b6 Certified Professional for Software Architecture(R) -- die g\u00e4ngige Bezeichnung f\u00fcr die verschiedenen Zertifizierungsstufen des iSAQB . Die bekanntesten Zertifizierungen sind das Foundation Level (CPSA-F) und das Advanced Level (CPSA-A).","title":"Term cpsa"},{"location":"terms/term-cpsa/#cpsar","text":"Certified Professional for Software Architecture(R) \u2013 the common name for different levels of certification issued by the iSAQB . The most common known certifications are the foundation level (CPSA-F) and the advanced level (CPSA-A). {lang=de}","title":"CPSA(R)"},{"location":"terms/term-cpsa/#cpsar_1","text":"Certified Professional for Software Architecture(R) -- die g\u00e4ngige Bezeichnung f\u00fcr die verschiedenen Zertifizierungsstufen des iSAQB . Die bekanntesten Zertifizierungen sind das Foundation Level (CPSA-F) und das Advanced Level (CPSA-A).","title":"CPSA(R)"},{"location":"terms/term-cqrs/","text":"{lang=en} CQRS \u00b6 (command query responsibility segregation): Separate the elements manipulating ( command ) data from those just reading ( query ). This separation enables different optimization strategies for reading and writing data (for example, it's much easier to cache data that's read-only than to cache data that's also altered.) There's an interesting eBook by Mark Nijhof on this subject. {lang=de} CQRS \u00b6 (Command-Query-Responsibility-Segregation): Trennt die Elemente, die Daten manipulieren ( Befehl ) von denen, die Daten nur lesen ( Abfrage ). Diese Trennung erm\u00f6glicht verschiedene Optimierungsstrategien f\u00fcr das Lesen und Schreiben von Daten (beispielsweise ist es wesentlich leichter, schreibgesch\u00fctzte Daten zu cachen, als Daten, die auch abge\u00e4ndert werden k\u00f6nnen). Es gibt ein interessantes eBook von Mark Nijhof zu diesem Thema.","title":"Term cqrs"},{"location":"terms/term-cqrs/#cqrs","text":"(command query responsibility segregation): Separate the elements manipulating ( command ) data from those just reading ( query ). This separation enables different optimization strategies for reading and writing data (for example, it's much easier to cache data that's read-only than to cache data that's also altered.) There's an interesting eBook by Mark Nijhof on this subject. {lang=de}","title":"CQRS"},{"location":"terms/term-cqrs/#cqrs_1","text":"(Command-Query-Responsibility-Segregation): Trennt die Elemente, die Daten manipulieren ( Befehl ) von denen, die Daten nur lesen ( Abfrage ). Diese Trennung erm\u00f6glicht verschiedene Optimierungsstrategien f\u00fcr das Lesen und Schreiben von Daten (beispielsweise ist es wesentlich leichter, schreibgesch\u00fctzte Daten zu cachen, als Daten, die auch abge\u00e4ndert werden k\u00f6nnen). Es gibt ein interessantes eBook von Mark Nijhof zu diesem Thema.","title":"CQRS"},{"location":"terms/term-cross-cutting-concept/","text":"{lang=en} Cross-Cutting Concept \u00b6 See concept . Synonym: principle, rule. {lang=de} Querschnittskonzept \u00b6 Siehe Konzept . Synonym: Prinzip, Regel.","title":"Term cross cutting concept"},{"location":"terms/term-cross-cutting-concept/#cross-cutting-concept","text":"See concept . Synonym: principle, rule. {lang=de}","title":"Cross-Cutting Concept"},{"location":"terms/term-cross-cutting-concept/#querschnittskonzept","text":"Siehe Konzept . Synonym: Prinzip, Regel.","title":"Querschnittskonzept"},{"location":"terms/term-cross-cutting-concern/","text":"{lang=en} Cross-Cutting Concern \u00b6 Functionality of the architecture or system that affects several elements. Examples of such concerns are logging, transactions, security, exception handling, caching etc. Often these concerns will be addressed in systems via concepts . {lang=de} Querschnittsbelang \u00b6 Funktionalit\u00e4t der Architektur oder des Systems, die mehrere Elemente betrifft. Beispiele f\u00fcr diese Belange sind Logging, Transaktionen, Sicherheit, Ausnahmebehandlung, Caching etc. Siehe auch Konzept .","title":"Term cross cutting concern"},{"location":"terms/term-cross-cutting-concern/#cross-cutting-concern","text":"Functionality of the architecture or system that affects several elements. Examples of such concerns are logging, transactions, security, exception handling, caching etc. Often these concerns will be addressed in systems via concepts . {lang=de}","title":"Cross-Cutting Concern"},{"location":"terms/term-cross-cutting-concern/#querschnittsbelang","text":"Funktionalit\u00e4t der Architektur oder des Systems, die mehrere Elemente betrifft. Beispiele f\u00fcr diese Belange sind Logging, Transaktionen, Sicherheit, Ausnahmebehandlung, Caching etc. Siehe auch Konzept .","title":"Querschnittsbelang"},{"location":"terms/term-curriculum/","text":"{lang=en} Curriculum \u00b6 The learning process provided by a school (here: iSAQB as the institution governing software architecture education). It includes the content of courses (the syllabus), the methods employed, and other aspects, like norms and values, which relate to the way the education including certification and examination is organized.","title":"Term curriculum"},{"location":"terms/term-curriculum/#curriculum","text":"The learning process provided by a school (here: iSAQB as the institution governing software architecture education). It includes the content of courses (the syllabus), the methods employed, and other aspects, like norms and values, which relate to the way the education including certification and examination is organized.","title":"Curriculum"},{"location":"terms/term-cyclomatic-complexity/","text":"{lang=en} Cyclomatic Complexity \u00b6 Quantitative measure, number of independent paths through a program's source code. It roughly correlates to the number of conditional statements ( if , while ) in the code +1. A linear sequence of statements without if or while has the cyclomatic complexity of 1. Many software engineers believe that higher complexity correlates to the number of defects. Category: Metric. {lang=de} Zyklomatische Komplexit\u00e4t \u00b6 Quantitatives Ma\u00df, Zahl der unabh\u00e4ngigen Pfade durch den Quellcode eines Programms. Sie entspricht grob der Zahl der bedingten Anweisungen (if, while) im Code +1. Eine lineare Abfolge von Anweisungen ohne if oder while hat eine zyklomatische Komplexit\u00e4t von 1. Viele Softwareentwickler sind der Auffassung, dass eine h\u00f6here Komplexit\u00e4t mit der Anzahl der Fehler zusammenh\u00e4ngt. Kategorie: Kennzahl.","title":"Term cyclomatic complexity"},{"location":"terms/term-cyclomatic-complexity/#cyclomatic-complexity","text":"Quantitative measure, number of independent paths through a program's source code. It roughly correlates to the number of conditional statements ( if , while ) in the code +1. A linear sequence of statements without if or while has the cyclomatic complexity of 1. Many software engineers believe that higher complexity correlates to the number of defects. Category: Metric. {lang=de}","title":"Cyclomatic Complexity"},{"location":"terms/term-cyclomatic-complexity/#zyklomatische-komplexitat","text":"Quantitatives Ma\u00df, Zahl der unabh\u00e4ngigen Pfade durch den Quellcode eines Programms. Sie entspricht grob der Zahl der bedingten Anweisungen (if, while) im Code +1. Eine lineare Abfolge von Anweisungen ohne if oder while hat eine zyklomatische Komplexit\u00e4t von 1. Viele Softwareentwickler sind der Auffassung, dass eine h\u00f6here Komplexit\u00e4t mit der Anzahl der Fehler zusammenh\u00e4ngt. Kategorie: Kennzahl.","title":"Zyklomatische Komplexit\u00e4t"},{"location":"terms/term-decomposition/","text":"{lang=en} Decomposition \u00b6 (syn: factoring) Breaking or dividing a complex system or problem into several smaller parts that are easier to understand, implement or maintain. {lang=de} Zerlegung \u00b6 (Syn.: Factoring) Aufbrechen oder Unterteilen eines komplexen Systems oder Problems in mehrere kleinere Teile, die einfacher zu verstehen, zu implementieren oder zu warten sind.","title":"Term decomposition"},{"location":"terms/term-decomposition/#decomposition","text":"(syn: factoring) Breaking or dividing a complex system or problem into several smaller parts that are easier to understand, implement or maintain. {lang=de}","title":"Decomposition"},{"location":"terms/term-decomposition/#zerlegung","text":"(Syn.: Factoring) Aufbrechen oder Unterteilen eines komplexen Systems oder Problems in mehrere kleinere Teile, die einfacher zu verstehen, zu implementieren oder zu warten sind.","title":"Zerlegung"},{"location":"terms/term-dependency-injection/","text":"{lang=en} Dependency Injection (DI) \u00b6 Instead of having your objects or a factory creating a dependency, you pass the needed dependencies to the constructor or via property setters. You therefore make the creation of specific dependencies somebody else's problem . {lang=de} Abh\u00e4ngigkeitsinjektion / Dependency Injection (DI) \u00b6 Statt dass Ihre Objekte oder eine Fabrik eine Abh\u00e4ngigkeit erzeugen, \u00fcbergeben Sie die ben\u00f6tigten Abh\u00e4ngigkeiten an den Konstruktor oder \u00fcber Eigenschaft-Setter. Damit machen Sie die Erzeugung von spezifischen Abh\u00e4ngigkeiten zum Problem anderer Leute .","title":"Term dependency injection"},{"location":"terms/term-dependency-injection/#dependency-injection-di","text":"Instead of having your objects or a factory creating a dependency, you pass the needed dependencies to the constructor or via property setters. You therefore make the creation of specific dependencies somebody else's problem . {lang=de}","title":"Dependency Injection (DI)"},{"location":"terms/term-dependency-injection/#abhangigkeitsinjektion-dependency-injection-di","text":"Statt dass Ihre Objekte oder eine Fabrik eine Abh\u00e4ngigkeit erzeugen, \u00fcbergeben Sie die ben\u00f6tigten Abh\u00e4ngigkeiten an den Konstruktor oder \u00fcber Eigenschaft-Setter. Damit machen Sie die Erzeugung von spezifischen Abh\u00e4ngigkeiten zum Problem anderer Leute .","title":"Abh\u00e4ngigkeitsinjektion / Dependency Injection (DI)"},{"location":"terms/term-dependency-inversion/","text":"{lang=en} Dependency Inversion Principle \u00b6 High level (abstract) elements should not depend upon low level (specific) elements. \"Details should depend upon abstractions\" ( Martin-2003 ). One of the SOLID principles , nicely explained by Brett Schuchert , and closely related to the SDP and SAP . {lang=de} Abh\u00e4ngigkeits-Umkehr-Prinzip / Dependency Inversion Principle \u00b6 (Abstrakte) Elemente h\u00f6herer Ebenen sollten nicht von (spezifischen) Elementen niedrigerer Ebenen abh\u00e4ngen. Details sollten von Abstraktionen abh\u00e4ngen ( Martin-2003 ). Eines der SOLID-Prinzipien , das Brett Schuchert anschaulich erl\u00e4utert, und das eng mit dem SDP und SAP zusammenh\u00e4ngt.","title":"Term dependency inversion"},{"location":"terms/term-dependency-inversion/#dependency-inversion-principle","text":"High level (abstract) elements should not depend upon low level (specific) elements. \"Details should depend upon abstractions\" ( Martin-2003 ). One of the SOLID principles , nicely explained by Brett Schuchert , and closely related to the SDP and SAP . {lang=de}","title":"Dependency Inversion Principle"},{"location":"terms/term-dependency-inversion/#abhangigkeits-umkehr-prinzip-dependency-inversion-principle","text":"(Abstrakte) Elemente h\u00f6herer Ebenen sollten nicht von (spezifischen) Elementen niedrigerer Ebenen abh\u00e4ngen. Details sollten von Abstraktionen abh\u00e4ngen ( Martin-2003 ). Eines der SOLID-Prinzipien , das Brett Schuchert anschaulich erl\u00e4utert, und das eng mit dem SDP und SAP zusammenh\u00e4ngt.","title":"Abh\u00e4ngigkeits-Umkehr-Prinzip / Dependency Inversion Principle"},{"location":"terms/term-dependency/","text":"{lang=en} Dependency \u00b6 See coupling . {lang=de} Abh\u00e4ngigkeit \u00b6 Siehe Kopplung .","title":"Term dependency"},{"location":"terms/term-dependency/#dependency","text":"See coupling . {lang=de}","title":"Dependency"},{"location":"terms/term-dependency/#abhangigkeit","text":"Siehe Kopplung .","title":"Abh\u00e4ngigkeit"},{"location":"terms/term-deployment-view/","text":"{lang=en} Deployment View \u00b6 Architectural view showing the technical infrastructure where a system or artifacts will be deployed and executed. \"This view defines the physical environment in which the system is intended to run, including the hardware environment your system needs (e.g., processing nodes, network interconnections, and disk storage facilities), the technical environment requirements for each node (or node type) in the system, and the mapping of your software elements to the runtime environment that will execute them.\" (as defined by Rozanski+2011 ) {lang=de} Verteilungssicht \u00b6 Architektursicht, die die technische Infrastruktur, in der ein System oder Artefakte verteilt und ausgef\u00fchrt werden, zeigt. \u201eDiese Sicht definiert die physische Umgebung, in der das System laufen soll, einschlie\u00dflich der Hardwareumgebung, die Ihr System ben\u00f6tigt (z.B. Verarbeitungsknoten, Netzwerkverbindungen und Speicherkapazit\u00e4ten), der technischen Umgebungsanforderungen f\u00fcr jeden Knoten (oder Knotentyp) im System und des Mappings Ihrer Softwareelemente in Bezug auf die Laufzeitumgebung, die sie ausf\u00fchrt.\" (\u00dcbersetztes englisches Zitat von Rozanski+2011 )","title":"Term deployment view"},{"location":"terms/term-deployment-view/#deployment-view","text":"Architectural view showing the technical infrastructure where a system or artifacts will be deployed and executed. \"This view defines the physical environment in which the system is intended to run, including the hardware environment your system needs (e.g., processing nodes, network interconnections, and disk storage facilities), the technical environment requirements for each node (or node type) in the system, and the mapping of your software elements to the runtime environment that will execute them.\" (as defined by Rozanski+2011 ) {lang=de}","title":"Deployment View"},{"location":"terms/term-deployment-view/#verteilungssicht","text":"Architektursicht, die die technische Infrastruktur, in der ein System oder Artefakte verteilt und ausgef\u00fchrt werden, zeigt. \u201eDiese Sicht definiert die physische Umgebung, in der das System laufen soll, einschlie\u00dflich der Hardwareumgebung, die Ihr System ben\u00f6tigt (z.B. Verarbeitungsknoten, Netzwerkverbindungen und Speicherkapazit\u00e4ten), der technischen Umgebungsanforderungen f\u00fcr jeden Knoten (oder Knotentyp) im System und des Mappings Ihrer Softwareelemente in Bezug auf die Laufzeitumgebung, die sie ausf\u00fchrt.\" (\u00dcbersetztes englisches Zitat von Rozanski+2011 )","title":"Verteilungssicht"},{"location":"terms/term-deployment/","text":"{lang=en} Deployment \u00b6 Bring software onto its execution environment (hardware, processor etc). Put software into operation. {lang=de} Verteilung \u00b6 Einbringen der Software in ihre Ausf\u00fchrungsumgebung (Hardware, Prozessor usw.). Inbetriebnahme der Software.","title":"Term deployment"},{"location":"terms/term-deployment/#deployment","text":"Bring software onto its execution environment (hardware, processor etc). Put software into operation. {lang=de}","title":"Deployment"},{"location":"terms/term-deployment/#verteilung","text":"Einbringen der Software in ihre Ausf\u00fchrungsumgebung (Hardware, Prozessor usw.). Inbetriebnahme der Software.","title":"Verteilung"},{"location":"terms/term-design-pattern/","text":"{lang=en} Design Pattern \u00b6 General or generic reusable solution to a commonly occurring problem within a given context in design. Initially conceived by the famous architect Christopher Alexander , the concept of design patterns was taken up by software engineers. In our opinion, every serious software developer should know at least some patterns from the pioneering Gang-of-Four book by Erich Gamma ( Gamma+1994 ) and his three allies. {lang=de} Entwurfsmuster \u00b6 Allgemeine oder generische wiederverwendbare L\u00f6sung f\u00fcr ein g\u00e4ngiges Problem in einem gegebenen Kontext beim Entwurf. Das urspr\u00fcnglich von dem ber\u00fchmten Architekten Christopher Alexander erdachte Konzept von Entwurfsmustern wurde von Softwareentwicklern \u00fcbernommen. Unserer Ansicht nach sollte jeder ernsthafte Softwareentwickler zumindest einige Muster aus dem bahnbrechenden Buch Gang-of-Four von Erich Gamma ( Gamma+1994 ) und seinen drei Verb\u00fcndeten kennen.","title":"Term design pattern"},{"location":"terms/term-design-pattern/#design-pattern","text":"General or generic reusable solution to a commonly occurring problem within a given context in design. Initially conceived by the famous architect Christopher Alexander , the concept of design patterns was taken up by software engineers. In our opinion, every serious software developer should know at least some patterns from the pioneering Gang-of-Four book by Erich Gamma ( Gamma+1994 ) and his three allies. {lang=de}","title":"Design Pattern"},{"location":"terms/term-design-pattern/#entwurfsmuster","text":"Allgemeine oder generische wiederverwendbare L\u00f6sung f\u00fcr ein g\u00e4ngiges Problem in einem gegebenen Kontext beim Entwurf. Das urspr\u00fcnglich von dem ber\u00fchmten Architekten Christopher Alexander erdachte Konzept von Entwurfsmustern wurde von Softwareentwicklern \u00fcbernommen. Unserer Ansicht nach sollte jeder ernsthafte Softwareentwickler zumindest einige Muster aus dem bahnbrechenden Buch Gang-of-Four von Erich Gamma ( Gamma+1994 ) und seinen drei Verb\u00fcndeten kennen.","title":"Entwurfsmuster"},{"location":"terms/term-design-principle/","text":"{lang=en} Design Principle \u00b6 Set of guidelines that helps software developers to design and implement better solutions, where \"better\" could, for example, mean one or more of the following: low coupling . high cohesion . separation of concerns or adherence to the Single Responsibility Principle . adherence to the Information Hiding principle. avoid Rigidity : A system or element is difficult to change because every change potentially affects many other elements. avoid Fragility : When elements are changed, unexpected results, defects or otherwise negative consequences occur at other elements. avoid Immobility : An element is difficult to reuse because it cannot be disentagled from the rest of the system. {lang=de} Entwurfsprinzip \u00b6 Eine Reihe von Richtlinien, die Softwareentwicklern hilft, bessere L\u00f6sungen zu entwerfen und zu implementieren, wobei \u201ebesser\" bedeutet, die folgenden schlechten Eigenschaften zu vermeiden: Rigidit\u00e4t: Ein System oder Element ist schwer zu \u00e4ndern, weil jede \u00c4nderung sich m\u00f6glicherweise auf zahlreiche andere Elemente auswirkt. Fragilit\u00e4t: Wenn Elemente ge\u00e4ndert werden, treten unerwartete Ergebnisse, Fehler oder sonstige negative Folgen bei anderen Elementen auf. Immobilit\u00e4t: Ein Element ist schwer wiederzuverwenden, weil es sich nicht aus dem \u00fcbrigen System herausl\u00f6sen l\u00e4sst. Diese Eigenschaften wurden von Robert Martin formuliert und stammen von OODesign.com","title":"Term design principle"},{"location":"terms/term-design-principle/#design-principle","text":"Set of guidelines that helps software developers to design and implement better solutions, where \"better\" could, for example, mean one or more of the following: low coupling . high cohesion . separation of concerns or adherence to the Single Responsibility Principle . adherence to the Information Hiding principle. avoid Rigidity : A system or element is difficult to change because every change potentially affects many other elements. avoid Fragility : When elements are changed, unexpected results, defects or otherwise negative consequences occur at other elements. avoid Immobility : An element is difficult to reuse because it cannot be disentagled from the rest of the system. {lang=de}","title":"Design Principle"},{"location":"terms/term-design-principle/#entwurfsprinzip","text":"Eine Reihe von Richtlinien, die Softwareentwicklern hilft, bessere L\u00f6sungen zu entwerfen und zu implementieren, wobei \u201ebesser\" bedeutet, die folgenden schlechten Eigenschaften zu vermeiden: Rigidit\u00e4t: Ein System oder Element ist schwer zu \u00e4ndern, weil jede \u00c4nderung sich m\u00f6glicherweise auf zahlreiche andere Elemente auswirkt. Fragilit\u00e4t: Wenn Elemente ge\u00e4ndert werden, treten unerwartete Ergebnisse, Fehler oder sonstige negative Folgen bei anderen Elementen auf. Immobilit\u00e4t: Ein Element ist schwer wiederzuverwenden, weil es sich nicht aus dem \u00fcbrigen System herausl\u00f6sen l\u00e4sst. Diese Eigenschaften wurden von Robert Martin formuliert und stammen von OODesign.com","title":"Entwurfsprinzip"},{"location":"terms/term-design-rationale/","text":"{lang=en} Design Rationale \u00b6 An explicit documentation of the reasons behind decisions made when designing any architectural element.","title":"Term design rationale"},{"location":"terms/term-design-rationale/#design-rationale","text":"An explicit documentation of the reasons behind decisions made when designing any architectural element.","title":"Design Rationale"},{"location":"terms/term-document/","text":"{lang=en} Document \u00b6 A (usually written) artifact conveying information. {lang=de} Dokument \u00b6 Ein (\u00fcblicherweise schriftliches) Artefakt zur Informationsvermittlung.","title":"Term document"},{"location":"terms/term-document/#document","text":"A (usually written) artifact conveying information. {lang=de}","title":"Document"},{"location":"terms/term-document/#dokument","text":"Ein (\u00fcblicherweise schriftliches) Artefakt zur Informationsvermittlung.","title":"Dokument"},{"location":"terms/term-documentation-build/","text":"{lang=en} Documentation Build \u00b6 Automatic build process that collects artifacts into a consistent documentation. {lang=de} Dokumentationserstellung \u00b6 Automatischer Prozess, mit dem Artefakte zu einer konsistenten Dokumentation zusammengestellt werden.","title":"Term documentation build"},{"location":"terms/term-documentation-build/#documentation-build","text":"Automatic build process that collects artifacts into a consistent documentation. {lang=de}","title":"Documentation Build"},{"location":"terms/term-documentation-build/#dokumentationserstellung","text":"Automatischer Prozess, mit dem Artefakte zu einer konsistenten Dokumentation zusammengestellt werden.","title":"Dokumentationserstellung"},{"location":"terms/term-documentation/","text":"{lang=en} Documentation \u00b6 A systematically ordered collection of documents and other material of any kind that makes usage or evaluation easier. Examples for \"other material\": presentation, video, audio, web page, image, etc. {lang=de} Dokumentation \u00b6 Systematisch geordnete Sammlung von Dokumenten und sonstigen Materialien aller Art, die die Nutzung oder Beurteilung erleichtern. Beispiele f\u00fcr \u201esonstige Materialien\": Pr\u00e4sentationen, Videos, Audios, Webseiten, Bilder usw.","title":"Term documentation"},{"location":"terms/term-documentation/#documentation","text":"A systematically ordered collection of documents and other material of any kind that makes usage or evaluation easier. Examples for \"other material\": presentation, video, audio, web page, image, etc. {lang=de}","title":"Documentation"},{"location":"terms/term-documentation/#dokumentation","text":"Systematisch geordnete Sammlung von Dokumenten und sonstigen Materialien aller Art, die die Nutzung oder Beurteilung erleichtern. Beispiele f\u00fcr \u201esonstige Materialien\": Pr\u00e4sentationen, Videos, Audios, Webseiten, Bilder usw.","title":"Dokumentation"},{"location":"terms/term-domain-model/","text":"{lang=en} Domain Model \u00b6 The domain model is a concept of Domain-Driven Design . I provides a system of abstractions that describes selected aspects of a domain and can be used to solve problems related to that domain. {lang=de} Dom\u00e4nenmodell \u00b6 Das Dom\u00e4nenmodell ist ein Konzept von Domain-Driven Design . Das Dom\u00e4nenmodell ist ein System aus Abstraktionen zur Beschreibung ausgew\u00e4hlter Aspekte einer Fachdom\u00e4ne und kann zur L\u00f6sung von Problemen in Zusammenhang mit dieser Dom\u00e4ne verwendet werden.","title":"Term domain model"},{"location":"terms/term-domain-model/#domain-model","text":"The domain model is a concept of Domain-Driven Design . I provides a system of abstractions that describes selected aspects of a domain and can be used to solve problems related to that domain. {lang=de}","title":"Domain Model"},{"location":"terms/term-domain-model/#domanenmodell","text":"Das Dom\u00e4nenmodell ist ein Konzept von Domain-Driven Design . Das Dom\u00e4nenmodell ist ein System aus Abstraktionen zur Beschreibung ausgew\u00e4hlter Aspekte einer Fachdom\u00e4ne und kann zur L\u00f6sung von Problemen in Zusammenhang mit dieser Dom\u00e4ne verwendet werden.","title":"Dom\u00e4nenmodell"},{"location":"terms/term-drawing-tool/","text":"{lang=en} Drawing Tool \u00b6 A tool to create drawings that can be used in architecture documentation. Example: Visio, OmniGraffle, PowerPoint, etc. Drawing tools treat each drawing as a separate thing, this causes maintenance overhead when updating an element of the architecture that is shown in several diagrams (as opposed to a Modeling Tool ). {lang=de} Mal-/Zeichenprogramm \u00b6 Programm zur Erstellung von Zeichnungen, die in der Architekturdokumentation verwendet werden k\u00f6nnen. Beispiel: Visio, OmniGraffle, PowerPoint, etc. Mal-/Zeichenprogramme behandeln jede Zeichnung als separate Sache, was bei der Aktualisierung eines Elements der Architektur, das in mehreren Diagrammen erscheint, zu h\u00f6heren Wartungskosten f\u00fchrt (anders als ein Modellierungswerkzeug ).","title":"Term drawing tool"},{"location":"terms/term-drawing-tool/#drawing-tool","text":"A tool to create drawings that can be used in architecture documentation. Example: Visio, OmniGraffle, PowerPoint, etc. Drawing tools treat each drawing as a separate thing, this causes maintenance overhead when updating an element of the architecture that is shown in several diagrams (as opposed to a Modeling Tool ). {lang=de}","title":"Drawing Tool"},{"location":"terms/term-drawing-tool/#mal-zeichenprogramm","text":"Programm zur Erstellung von Zeichnungen, die in der Architekturdokumentation verwendet werden k\u00f6nnen. Beispiel: Visio, OmniGraffle, PowerPoint, etc. Mal-/Zeichenprogramme behandeln jede Zeichnung als separate Sache, was bei der Aktualisierung eines Elements der Architektur, das in mehreren Diagrammen erscheint, zu h\u00f6heren Wartungskosten f\u00fchrt (anders als ein Modellierungswerkzeug ).","title":"Mal-/Zeichenprogramm"},{"location":"terms/term-economicalness/","text":"{lang=en} Economicalness \u00b6 Being economical, simple, lean or achievable with relatively low effort. {lang=de} Sparsamkeit \u00b6 {lang=de} Eingebettete Systeme \u00b6 In ein gr\u00f6\u00dferes mechanisches oder elektrisches System eingebettetes System. Eingebettete Systeme haben h\u00e4ufig Echtzeit-Recheneinschr\u00e4nkungen. Typische Eigenschaften von eingebetteten Systemen sind niedriger Stromverbrauch, begrenzter Speicher und begrenzte Verarbeitungsressourcen sowie geringe Gr\u00f6\u00dfe. \u00b3\u2075 http://dddcommunity.org/learning-ddd/what_is_ddd/","title":"Term economicalness"},{"location":"terms/term-economicalness/#economicalness","text":"Being economical, simple, lean or achievable with relatively low effort. {lang=de}","title":"Economicalness"},{"location":"terms/term-economicalness/#sparsamkeit","text":"{lang=de}","title":"Sparsamkeit"},{"location":"terms/term-economicalness/#eingebettete-systeme","text":"In ein gr\u00f6\u00dferes mechanisches oder elektrisches System eingebettetes System. Eingebettete Systeme haben h\u00e4ufig Echtzeit-Recheneinschr\u00e4nkungen. Typische Eigenschaften von eingebetteten Systemen sind niedriger Stromverbrauch, begrenzter Speicher und begrenzte Verarbeitungsressourcen sowie geringe Gr\u00f6\u00dfe. \u00b3\u2075 http://dddcommunity.org/learning-ddd/what_is_ddd/","title":"Eingebettete Systeme"},{"location":"terms/term-embedded-systems/","text":"{lang=en} Embedded System \u00b6 System embedded within a larger mechanical or electrical system. Embedded systems often have real-time computing constraints. Typical properties of embedded systems are low power consumption, limited memory and processing resources, small size.","title":"Term embedded systems"},{"location":"terms/term-embedded-systems/#embedded-system","text":"System embedded within a larger mechanical or electrical system. Embedded systems often have real-time computing constraints. Typical properties of embedded systems are low power consumption, limited memory and processing resources, small size.","title":"Embedded System"},{"location":"terms/term-encapsulation/","text":"{lang=en} Encapsulation \u00b6 Encapsulation has two slightly distinct notions, and sometimes to the combination thereof: restricting access to some of the object's components bundling of data with the methods or functions operating on that data Encapsulation is a mechanism for information hiding . {lang=de} Kapselung \u00b6 Kapselung bezeichnet zwei leicht unterschiedliche Konzepte und manchmal eine Kombination der beiden: Einschr\u00e4nkung des Zugriffs auf einige Komponenten des Objekts B\u00fcndelung von Daten mit Methoden oder Funktionen, die auf diese Daten angewandt werden Kapselung ist ein Mechanismus zum Verbergen von Informationen .","title":"Term encapsulation"},{"location":"terms/term-encapsulation/#encapsulation","text":"Encapsulation has two slightly distinct notions, and sometimes to the combination thereof: restricting access to some of the object's components bundling of data with the methods or functions operating on that data Encapsulation is a mechanism for information hiding . {lang=de}","title":"Encapsulation"},{"location":"terms/term-encapsulation/#kapselung","text":"Kapselung bezeichnet zwei leicht unterschiedliche Konzepte und manchmal eine Kombination der beiden: Einschr\u00e4nkung des Zugriffs auf einige Komponenten des Objekts B\u00fcndelung von Daten mit Methoden oder Funktionen, die auf diese Daten angewandt werden Kapselung ist ein Mechanismus zum Verbergen von Informationen .","title":"Kapselung"},{"location":"terms/term-enterprise-it-architecture/","text":"{lang=en} Enterprise IT Architecture \u00b6 Synonym: Enterprise Architecture. Structures and concepts for the IT support of an entire company. Atomic subject matters of the enterprise architecture are single software systems also referred to as \"applications\". {lang=de} Unternehmens-IT-Architektur \u00b6 Synonym: Unternehmensarchitektur. Strukturen und Konzepte f\u00fcr den IT-Support eines gesamten Unternehmens. Die kleinsten betrachteten Einheiten der Unternehmensarchitektur sind einzelne Softwaresysteme, auch \u201eAnwendungen\" genannt.","title":"Term enterprise it architecture"},{"location":"terms/term-enterprise-it-architecture/#enterprise-it-architecture","text":"Synonym: Enterprise Architecture. Structures and concepts for the IT support of an entire company. Atomic subject matters of the enterprise architecture are single software systems also referred to as \"applications\". {lang=de}","title":"Enterprise IT Architecture"},{"location":"terms/term-enterprise-it-architecture/#unternehmens-it-architektur","text":"Synonym: Unternehmensarchitektur. Strukturen und Konzepte f\u00fcr den IT-Support eines gesamten Unternehmens. Die kleinsten betrachteten Einheiten der Unternehmensarchitektur sind einzelne Softwaresysteme, auch \u201eAnwendungen\" genannt.","title":"Unternehmens-IT-Architektur"},{"location":"terms/term-entity/","text":"{lang=en} Entity \u00b6 Category: DDD Entity is a building block of Domain-Driven Design . An entity is a core object of a business domain with unchangeable identity and a clearly defined lifecycle. Entities map their state to value objects and are almost always persistent. {lang=de} Entit\u00e4t \u00b6 Kategorie: DDD Eine Entit\u00e4t ist ein Baustein des Domain-Driven Designs . Eine Entit\u00e4t ist ein Kernobjekt einer Gesch\u00e4ftsdom\u00e4ne mit einer unver\u00e4nderlichen Identit\u00e4t und einem klar definierten Lebenszyklus. Entit\u00e4ten mappen ihren Zustand auf Wertobjekte und sind fast immer persistent.","title":"Term entity"},{"location":"terms/term-entity/#entity","text":"Category: DDD Entity is a building block of Domain-Driven Design . An entity is a core object of a business domain with unchangeable identity and a clearly defined lifecycle. Entities map their state to value objects and are almost always persistent. {lang=de}","title":"Entity"},{"location":"terms/term-entity/#entitat","text":"Kategorie: DDD Eine Entit\u00e4t ist ein Baustein des Domain-Driven Designs . Eine Entit\u00e4t ist ein Kernobjekt einer Gesch\u00e4ftsdom\u00e4ne mit einer unver\u00e4nderlichen Identit\u00e4t und einem klar definierten Lebenszyklus. Entit\u00e4ten mappen ihren Zustand auf Wertobjekte und sind fast immer persistent.","title":"Entit\u00e4t"},{"location":"terms/term-entropy/","text":"{lang=en} Entropy \u00b6 In information theory defined as \"amount of information\" a message has or \"unpredictability of information content\". The entropy of a cryptosystem is measured by the size of the keyspace. Larger keyspaces have an increased entropy and if not flawed by the algorithm itself, harder to break than smaller ones. For secure cryptographic operations it is mandatory to not only use random values as input, they should have also a high entropy. The creation of high entropy on a computer system is non-trivial and can affect the performance of a system. See 11.1 Information Theory of Schneier-1996 and Whitewood Inc. on \"Understanding and Managing Entropy\" or SANS \"Randomness and Entropy - An Introduction\" . Category: Security {lang=de} Entropie \u00b6 In der Informationstheorie definiert als \u201eMenge an Informationen\" in einer Nachricht oder \u201eUnvorhersehbarkeit des Informationsgehalts\". Die Entropie eines Kryptosystems wird anhand der Gr\u00f6\u00dfe des Schl\u00fcsselraums gemessen. Gr\u00f6\u00dfere Schl\u00fcsselr\u00e4ume haben eine h\u00f6here Entropie und sind, wenn sie nicht durch den Algorithmus selbst fehlerhaft sind, schwerer zu knacken als kleinere. F\u00fcr sichere kryptographische Vorg\u00e4nge sind nicht nur zuf\u00e4llige Werte als Input vorgeschrieben, sondern sie sollten auch eine hohe Entropie aufweisen. Die Schaffung von hoher Entropie in einem Computersystem ist nicht trivial und kann die Systemleistung beeintr\u00e4chtigen. Siehe 11.1 Information Theory of Schneier-1996 und Whitewood Inc. zu \u201eUnderstanding and Managing Entropy\" oder SANS \u201eRandomness and Entropy - An Introduction\" . Kategorie: Sicherheit","title":"Term entropy"},{"location":"terms/term-entropy/#entropy","text":"In information theory defined as \"amount of information\" a message has or \"unpredictability of information content\". The entropy of a cryptosystem is measured by the size of the keyspace. Larger keyspaces have an increased entropy and if not flawed by the algorithm itself, harder to break than smaller ones. For secure cryptographic operations it is mandatory to not only use random values as input, they should have also a high entropy. The creation of high entropy on a computer system is non-trivial and can affect the performance of a system. See 11.1 Information Theory of Schneier-1996 and Whitewood Inc. on \"Understanding and Managing Entropy\" or SANS \"Randomness and Entropy - An Introduction\" . Category: Security {lang=de}","title":"Entropy"},{"location":"terms/term-entropy/#entropie","text":"In der Informationstheorie definiert als \u201eMenge an Informationen\" in einer Nachricht oder \u201eUnvorhersehbarkeit des Informationsgehalts\". Die Entropie eines Kryptosystems wird anhand der Gr\u00f6\u00dfe des Schl\u00fcsselraums gemessen. Gr\u00f6\u00dfere Schl\u00fcsselr\u00e4ume haben eine h\u00f6here Entropie und sind, wenn sie nicht durch den Algorithmus selbst fehlerhaft sind, schwerer zu knacken als kleinere. F\u00fcr sichere kryptographische Vorg\u00e4nge sind nicht nur zuf\u00e4llige Werte als Input vorgeschrieben, sondern sie sollten auch eine hohe Entropie aufweisen. Die Schaffung von hoher Entropie in einem Computersystem ist nicht trivial und kann die Systemleistung beeintr\u00e4chtigen. Siehe 11.1 Information Theory of Schneier-1996 und Whitewood Inc. zu \u201eUnderstanding and Managing Entropy\" oder SANS \u201eRandomness and Entropy - An Introduction\" . Kategorie: Sicherheit","title":"Entropie"},{"location":"terms/term-environment/","text":"{lang=en} Environment \u00b6 (System) Context determining the setting and circumstances of all influences upon a system (as defined in ISO/IEC/IEEE 42010). Note, the environment of a system includes developmental, technological, business, operational, organizational, political, economic, legal, regulatory, ecological and social influences. Category: ISO-IEC-IEEE-42010 {lang=de} Umgebung \u00b6 (System) Kontext, der das Setting und die Umst\u00e4nde aller Einfl\u00fcsse auf ein System bestimmt (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Die Umgebung eines Systems schlie\u00dft Entwicklungs-, Gesch\u00e4fts- und Betriebseinfl\u00fcsse sowie technologische, organisatorische, politische, wirtschaftliche, rechtliche, regulatorische, \u00f6kologische und soziale Einfl\u00fcsse ein. Kategorie: ISO-IEC-IEEE-42010","title":"Term environment"},{"location":"terms/term-environment/#environment","text":"(System) Context determining the setting and circumstances of all influences upon a system (as defined in ISO/IEC/IEEE 42010). Note, the environment of a system includes developmental, technological, business, operational, organizational, political, economic, legal, regulatory, ecological and social influences. Category: ISO-IEC-IEEE-42010 {lang=de}","title":"Environment"},{"location":"terms/term-environment/#umgebung","text":"(System) Kontext, der das Setting und die Umst\u00e4nde aller Einfl\u00fcsse auf ein System bestimmt (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Die Umgebung eines Systems schlie\u00dft Entwicklungs-, Gesch\u00e4fts- und Betriebseinfl\u00fcsse sowie technologische, organisatorische, politische, wirtschaftliche, rechtliche, regulatorische, \u00f6kologische und soziale Einfl\u00fcsse ein. Kategorie: ISO-IEC-IEEE-42010","title":"Umgebung"},{"location":"terms/term-facade/","text":"{lang=en} Facade \u00b6 Structural design pattern. A Facade offers a simplified interface to a complex or complicated building block (the provider ) without any modifications to the provider. {lang=de} Fassade \u00b6 Strukturentwurfsmuster. Eine Fassade bietet eine einfache Schnittstelle zu einem komplexen oder komplizierten Baustein (dem Provider ) ohne Modifikationen am Provider.","title":"Term facade"},{"location":"terms/term-facade/#facade","text":"Structural design pattern. A Facade offers a simplified interface to a complex or complicated building block (the provider ) without any modifications to the provider. {lang=de}","title":"Facade"},{"location":"terms/term-facade/#fassade","text":"Strukturentwurfsmuster. Eine Fassade bietet eine einfache Schnittstelle zu einem komplexen oder komplizierten Baustein (dem Provider ) ohne Modifikationen am Provider.","title":"Fassade"},{"location":"terms/term-factory/","text":"{lang=en} Factory \u00b6 (Design pattern) In class-based or object-oriented programming, the factory method pattern is a creational design pattern that uses factory methods or factory components for creating objects, without having to specify the exact class of the object that will be created. In Domain-Driven Design : A factory encapsulates the creation of aggregates , entities , and value objects . Factories work exclusively in the domain and have no access to technical building blocks (e.g. a database). {lang=de} Fabrik \u00b6 (Entwurfsmuster) In der klassenbasierten oder objektorientierten Programmierung ist das Entwurfsmuster Fabrikmethode ein Erzeugungsmuster, das Fabrikmethoden oder Fabrikkomponenten zur Erzeugung von Objekten nutzt, ohne die exakte Klasse des zu erzeugenden Objekts spezifizieren zu m\u00fcssen. Im Domain-Driven Design : Eine Fabrik kapselt die Erzeugung von Aggregaten , Entit\u00e4ten und Wertobjekten . Fabriken arbeiten ausschlie\u00dflich in der Dom\u00e4ne und haben keinen Zugriff auf technische Bausteine (z.B. eine Datenbank).","title":"Term factory"},{"location":"terms/term-factory/#factory","text":"(Design pattern) In class-based or object-oriented programming, the factory method pattern is a creational design pattern that uses factory methods or factory components for creating objects, without having to specify the exact class of the object that will be created. In Domain-Driven Design : A factory encapsulates the creation of aggregates , entities , and value objects . Factories work exclusively in the domain and have no access to technical building blocks (e.g. a database). {lang=de}","title":"Factory"},{"location":"terms/term-factory/#fabrik","text":"(Entwurfsmuster) In der klassenbasierten oder objektorientierten Programmierung ist das Entwurfsmuster Fabrikmethode ein Erzeugungsmuster, das Fabrikmethoden oder Fabrikkomponenten zur Erzeugung von Objekten nutzt, ohne die exakte Klasse des zu erzeugenden Objekts spezifizieren zu m\u00fcssen. Im Domain-Driven Design : Eine Fabrik kapselt die Erzeugung von Aggregaten , Entit\u00e4ten und Wertobjekten . Fabriken arbeiten ausschlie\u00dflich in der Dom\u00e4ne und haben keinen Zugriff auf technische Bausteine (z.B. eine Datenbank).","title":"Fabrik"},{"location":"terms/term-fault-tolerance-quality-attribute/","text":"{lang=en} Fault Tolerance Quality Attribute \u00b6 Degree to which a system, product or component operates as intended despite the presence of hardware or software faults. Is a sub-characteristic of: reliability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Fehlertoleranz \u00b6 Ma\u00df, in dem ein System, ein Produkt oder eine Komponente trotz Hardware- oder Softwarefehlern wie vorgesehen funktioniert. Teilmerkmal von: Zuverl\u00e4ssigkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term fault tolerance quality attribute"},{"location":"terms/term-fault-tolerance-quality-attribute/#fault-tolerance-quality-attribute","text":"Degree to which a system, product or component operates as intended despite the presence of hardware or software faults. Is a sub-characteristic of: reliability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Fault Tolerance Quality Attribute"},{"location":"terms/term-fault-tolerance-quality-attribute/#qualitatsmerkmal-fehlertoleranz","text":"Ma\u00df, in dem ein System, ein Produkt oder eine Komponente trotz Hardware- oder Softwarefehlern wie vorgesehen funktioniert. Teilmerkmal von: Zuverl\u00e4ssigkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Fehlertoleranz"},{"location":"terms/term-filter/","text":"{lang=en} Filter \u00b6 Part of the pipe-and-filter architectural style that creates or transforms data. Filters are typically executed independently from other filters. {lang=de} Filter \u00b6 Teil des \u201ePipes und Filter\"-Architekturstils, der Daten erzeugt oder transformiert. Filter werden \u00fcblicherweise unabh\u00e4ngig von anderen Filtern ausgef\u00fchrt.","title":"Term filter"},{"location":"terms/term-filter/#filter","text":"Part of the pipe-and-filter architectural style that creates or transforms data. Filters are typically executed independently from other filters. {lang=de}","title":"Filter"},{"location":"terms/term-filter/#filter_1","text":"Teil des \u201ePipes und Filter\"-Architekturstils, der Daten erzeugt oder transformiert. Filter werden \u00fcblicherweise unabh\u00e4ngig von anderen Filtern ausgef\u00fchrt.","title":"Filter"},{"location":"terms/term-fitness-function/","text":"{lang=en} Fitness Function \u00b6 \"An architectural fitness function provides an objective integrity assessment of some architectural characteristics.\" ( Ford+2017 ). A fitness function is derived from manual evaluations and automated tests and shows to which extent architectural or quality requirements are met.","title":"Term fitness function"},{"location":"terms/term-fitness-function/#fitness-function","text":"\"An architectural fitness function provides an objective integrity assessment of some architectural characteristics.\" ( Ford+2017 ). A fitness function is derived from manual evaluations and automated tests and shows to which extent architectural or quality requirements are met.","title":"Fitness Function"},{"location":"terms/term-fmc/","text":"{lang=en} Fundamental Modeling Concepts (FMC) \u00b6 Fundamental Modeling Concepts is a graphical notation for modeling and documenting software systems. From their website: \"FMC provide a framework for the comprehensive description of software-intensive systems. It is based on a precise terminology and supported by a graphical notation which can be easily understood\". {lang=de} Fundamental Modeling Concepts (FMC) \u00b6 Grafische Notation f\u00fcr die Modellierung und Dokumentation von Softwaresystemen. Von ihrer Website: FMC bietet einen Rahmen f\u00fcr die umfassende Beschreibung von softwareintensiven Systemen. Es basiert auf einer pr\u00e4zisen Terminologie und wird durch eine leicht verst\u00e4ndliche grafische Notation unterst\u00fctzt.","title":"Term fmc"},{"location":"terms/term-fmc/#fundamental-modeling-concepts-fmc","text":"Fundamental Modeling Concepts is a graphical notation for modeling and documenting software systems. From their website: \"FMC provide a framework for the comprehensive description of software-intensive systems. It is based on a precise terminology and supported by a graphical notation which can be easily understood\". {lang=de}","title":"Fundamental Modeling Concepts (FMC)"},{"location":"terms/term-fmc/#fundamental-modeling-concepts-fmc_1","text":"Grafische Notation f\u00fcr die Modellierung und Dokumentation von Softwaresystemen. Von ihrer Website: FMC bietet einen Rahmen f\u00fcr die umfassende Beschreibung von softwareintensiven Systemen. Es basiert auf einer pr\u00e4zisen Terminologie und wird durch eine leicht verst\u00e4ndliche grafische Notation unterst\u00fctzt.","title":"Fundamental Modeling Concepts (FMC)"},{"location":"terms/term-function-signature/","text":"{lang=en} Function Signature \u00b6 (Synonym: type or method signature) defines input and output of functions or methods. A signature can include: parameters and their types return value and type exception thrown or errors raised","title":"Term function signature"},{"location":"terms/term-function-signature/#function-signature","text":"(Synonym: type or method signature) defines input and output of functions or methods. A signature can include: parameters and their types return value and type exception thrown or errors raised","title":"Function Signature"},{"location":"terms/term-functional-appropriateness-quality-attribute/","text":"{lang=en} Functional Appropriateness Quality Attribute \u00b6 Degree to which the functions facilitate the accomplishment of specified tasks and objectives. Is a sub-characteristic of: functional suitability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal funktionale Angemessenheit \u00b6 Ma\u00df, in dem die Funktionen die Erf\u00fcllung von spezifizierten Aufgaben und Zielen erm\u00f6glichen. Teilmerkmal von: Funktionale Eignung . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term functional appropriateness quality attribute"},{"location":"terms/term-functional-appropriateness-quality-attribute/#functional-appropriateness-quality-attribute","text":"Degree to which the functions facilitate the accomplishment of specified tasks and objectives. Is a sub-characteristic of: functional suitability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Functional Appropriateness Quality Attribute"},{"location":"terms/term-functional-appropriateness-quality-attribute/#qualitatsmerkmal-funktionale-angemessenheit","text":"Ma\u00df, in dem die Funktionen die Erf\u00fcllung von spezifizierten Aufgaben und Zielen erm\u00f6glichen. Teilmerkmal von: Funktionale Eignung . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal funktionale Angemessenheit"},{"location":"terms/term-functional-completeness-quality-attribute/","text":"{lang=en} Functional Completeness Quality Attribute \u00b6 Degree to which the set of functions covers all the specified tasks and user objectives. Is a sub-characteristic of: functional suitability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal funktionale Vollst\u00e4ndigkeit \u00b6 Ma\u00df, in dem der Satz von Funktionen alle spezifizierten Aufgaben und Benutzerziele abdeckt. Teilmerkmal von: Funktionale Eignung . Vgl. Website von ISO 25010 .","title":"Term functional completeness quality attribute"},{"location":"terms/term-functional-completeness-quality-attribute/#functional-completeness-quality-attribute","text":"Degree to which the set of functions covers all the specified tasks and user objectives. Is a sub-characteristic of: functional suitability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Functional Completeness Quality Attribute"},{"location":"terms/term-functional-completeness-quality-attribute/#qualitatsmerkmal-funktionale-vollstandigkeit","text":"Ma\u00df, in dem der Satz von Funktionen alle spezifizierten Aufgaben und Benutzerziele abdeckt. Teilmerkmal von: Funktionale Eignung . Vgl. Website von ISO 25010 .","title":"Qualit\u00e4tsmerkmal funktionale Vollst\u00e4ndigkeit"},{"location":"terms/term-functional-correctness-quality-attribute/","text":"{lang=en} Functional Correctness Quality Attribute \u00b6 Degree to which a product or system provides the correct results with the needed degree of precision. Is a sub-characteristic of: functional suitability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal funktionale Korrektheit \u00b6 Ma\u00df, in dem ein Produkt oder System die korrekten Ergebnisse mit dem ben\u00f6tigten Grad an Pr\u00e4zision liefert. Teilmerkmal von: Funktionale Eignung . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term functional correctness quality attribute"},{"location":"terms/term-functional-correctness-quality-attribute/#functional-correctness-quality-attribute","text":"Degree to which a product or system provides the correct results with the needed degree of precision. Is a sub-characteristic of: functional suitability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Functional Correctness Quality Attribute"},{"location":"terms/term-functional-correctness-quality-attribute/#qualitatsmerkmal-funktionale-korrektheit","text":"Ma\u00df, in dem ein Produkt oder System die korrekten Ergebnisse mit dem ben\u00f6tigten Grad an Pr\u00e4zision liefert. Teilmerkmal von: Funktionale Eignung . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal funktionale Korrektheit"},{"location":"terms/term-functional-suitability-quality-attribute/","text":"{lang=en} Functional Suitability Quality Attribute \u00b6 Degree to which a product or system provides functions that meet stated and implied needs when used under specified conditions. Is composed of the following sub-characteristics: functional completeness , functional correctness , functional appropriateness . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal funktionale Eignung \u00b6 Ma\u00df, in dem ein Produkt oder System bei Nutzung unter spezifizierten Bedingungen Funktionen liefert, die festgelegte und vorausgesetzte Erfordernisse erf\u00fcllen. Es besteht aus folgenden Teilmerkmalen: funktionale Vollst\u00e4ndigkeit , funktionale Korrektheit , funktionale Angemessenheit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term functional suitability quality attribute"},{"location":"terms/term-functional-suitability-quality-attribute/#functional-suitability-quality-attribute","text":"Degree to which a product or system provides functions that meet stated and implied needs when used under specified conditions. Is composed of the following sub-characteristics: functional completeness , functional correctness , functional appropriateness . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Functional Suitability Quality Attribute"},{"location":"terms/term-functional-suitability-quality-attribute/#qualitatsmerkmal-funktionale-eignung","text":"Ma\u00df, in dem ein Produkt oder System bei Nutzung unter spezifizierten Bedingungen Funktionen liefert, die festgelegte und vorausgesetzte Erfordernisse erf\u00fcllen. Es besteht aus folgenden Teilmerkmalen: funktionale Vollst\u00e4ndigkeit , funktionale Korrektheit , funktionale Angemessenheit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal funktionale Eignung"},{"location":"terms/term-gateway/","text":"{lang=en} Gateway \u00b6 A (design or architecture) pattern: An element of that encapsulates access to a (usually external) system or resource. See also wrapper , adapter . {lang=de} Gateway \u00b6 Ein (Entwurfs- oder Architektur-) Muster: Elemente, die den Zugriff auf (\u00fcblicherweise externe) Systeme oder Ressourcen kapseln. Siehe auch Wrapper , Adapter .","title":"Term gateway"},{"location":"terms/term-gateway/#gateway","text":"A (design or architecture) pattern: An element of that encapsulates access to a (usually external) system or resource. See also wrapper , adapter . {lang=de}","title":"Gateway"},{"location":"terms/term-gateway/#gateway_1","text":"Ein (Entwurfs- oder Architektur-) Muster: Elemente, die den Zugriff auf (\u00fcblicherweise externe) Systeme oder Ressourcen kapseln. Siehe auch Wrapper , Adapter .","title":"Gateway"},{"location":"terms/term-global-analysis/","text":"{lang=en} Global Analysis \u00b6 Systematic approach to achieve desired quality attributes. Developed and documented by Christine Hofmeister (Siemens Corporate Research). Global analysis is described in [Hofmeister+2000]. {lang=de} Globale Analyse \u00b6 Systematischer Ansatz zur Erreichung der gew\u00fcnschten Qualit\u00e4tsmerkmale. Entwickelt und dokumentiert von Christine Hofmeister (Siemens Corporate Research). Die globale Analyse wird in [Hofmeister+2000] beschrieben.","title":"Term global analysis"},{"location":"terms/term-global-analysis/#global-analysis","text":"Systematic approach to achieve desired quality attributes. Developed and documented by Christine Hofmeister (Siemens Corporate Research). Global analysis is described in [Hofmeister+2000]. {lang=de}","title":"Global Analysis"},{"location":"terms/term-global-analysis/#globale-analyse","text":"Systematischer Ansatz zur Erreichung der gew\u00fcnschten Qualit\u00e4tsmerkmale. Entwickelt und dokumentiert von Christine Hofmeister (Siemens Corporate Research). Die globale Analyse wird in [Hofmeister+2000] beschrieben.","title":"Globale Analyse"},{"location":"terms/term-heterogeneous-architectural-style/","text":"{lang=en} Heterogeneous Architectural Style \u00b6 see hybrid architecture style . {lang=de} Heterogener Architekturstil \u00b6 Siehe hybrider Architekturstil .","title":"Term heterogeneous architectural style"},{"location":"terms/term-heterogeneous-architectural-style/#heterogeneous-architectural-style","text":"see hybrid architecture style . {lang=de}","title":"Heterogeneous Architectural Style"},{"location":"terms/term-heterogeneous-architectural-style/#heterogener-architekturstil","text":"Siehe hybrider Architekturstil .","title":"Heterogener Architekturstil"},{"location":"terms/term-heuristic/","text":"{lang=en} Heuristic \u00b6 Informal rule, rule-of-thumb. Any way of problem solving not guaranteed to be optimal, but somehow sufficient. Examples from Object-Oriented Design or User Interface Design . {lang=de} Heuristik \u00b6 Informelle Regel, Faustformel. M\u00f6glichkeit zur Probleml\u00f6sung, die nicht mit Sicherheit optimal, aber in gewisser Weise ausreichend ist. Beispiele aus dem Objektorientierten Entwurf oder Benutzeroberfl\u00e4chenentwurf .","title":"Term heuristic"},{"location":"terms/term-heuristic/#heuristic","text":"Informal rule, rule-of-thumb. Any way of problem solving not guaranteed to be optimal, but somehow sufficient. Examples from Object-Oriented Design or User Interface Design . {lang=de}","title":"Heuristic"},{"location":"terms/term-heuristic/#heuristik","text":"Informelle Regel, Faustformel. M\u00f6glichkeit zur Probleml\u00f6sung, die nicht mit Sicherheit optimal, aber in gewisser Weise ausreichend ist. Beispiele aus dem Objektorientierten Entwurf oder Benutzeroberfl\u00e4chenentwurf .","title":"Heuristik"},{"location":"terms/term-hybrid-architecture-style/","text":"{lang=en} Hybrid Architecture Style \u00b6 Combination of two or more existing architecture styles or patterns. For example, an MVC construct embedded in a layer structure. {lang=de} Hybrider Architekturstil \u00b6 Kombination aus zwei oder mehreren existierenden Architekturstilen oder -mustern. Beispielsweise ein in eine Schichtstruktur eingebettetes MVC-Konstrukt.","title":"Term hybrid architecture style"},{"location":"terms/term-hybrid-architecture-style/#hybrid-architecture-style","text":"Combination of two or more existing architecture styles or patterns. For example, an MVC construct embedded in a layer structure. {lang=de}","title":"Hybrid Architecture Style"},{"location":"terms/term-hybrid-architecture-style/#hybrider-architekturstil","text":"Kombination aus zwei oder mehreren existierenden Architekturstilen oder -mustern. Beispielsweise ein in eine Schichtstruktur eingebettetes MVC-Konstrukt.","title":"Hybrider Architekturstil"},{"location":"terms/term-ieee-1471/","text":"{lang=en} IEEE-1471 \u00b6 Standard Recommended Practice for Architectural Description of Software-Intensive Systems , defined as ISO/IEC 42010:2007. Defines a (abstract) framework for the description of software architectures. {lang=de} IEEE-1471 \u00b6 Norm Recommended Practice for Architectural Description of Software-Intensive Systems , definiert als ISO/IEC 42010:2007. Legt einen (abstrakten) Rahmen f\u00fcr die Beschreibung von Softwarearchitekturen fest.","title":"Term ieee 1471"},{"location":"terms/term-ieee-1471/#ieee-1471","text":"Standard Recommended Practice for Architectural Description of Software-Intensive Systems , defined as ISO/IEC 42010:2007. Defines a (abstract) framework for the description of software architectures. {lang=de}","title":"IEEE-1471"},{"location":"terms/term-ieee-1471/#ieee-1471_1","text":"Norm Recommended Practice for Architectural Description of Software-Intensive Systems , definiert als ISO/IEC 42010:2007. Legt einen (abstrakten) Rahmen f\u00fcr die Beschreibung von Softwarearchitekturen fest.","title":"IEEE-1471"},{"location":"terms/term-incremental-development/","text":"{lang=en} Incremental Development \u00b6 see iterative and incremental development . {lang=de} Inkrementelle Entwicklung \u00b6 Siehe iterative und inkrementelle Entwicklung .","title":"Term incremental development"},{"location":"terms/term-incremental-development/#incremental-development","text":"see iterative and incremental development . {lang=de}","title":"Incremental Development"},{"location":"terms/term-incremental-development/#inkrementelle-entwicklung","text":"Siehe iterative und inkrementelle Entwicklung .","title":"Inkrementelle Entwicklung"},{"location":"terms/term-information-hiding/","text":"{lang=en} Information Hiding \u00b6 A fundamental principle in software design: Keep those design or implementation decisions hidden that are likely to change, thus protecting other parts of the system from modification if these decisions or implementations are changed. Is one important attributes of blackboxes . Separates interface from implementation. The term encapsulation is often used interchangeably with information hiding. {lang=de} Verbergen von Informationen \u00b6 Ein grundlegendes Prinzip im Softwareentwurf: Entwurfs- oder Implementierungsentscheidungen, die sich wahrscheinlich \u00e4ndern, werden verborgen gehalten, so dass andere Teile des Systems vor Modifizierungen gesch\u00fctzt sind, wenn diese Entscheidungen oder Implementierungen ge\u00e4ndert werden. Eine der wichtigen Eigenschaften von Blackboxen . Trennt Schnittstelle von Implementierung. Der Begriff Kapselung wird h\u00e4ufig austauschbar mit Verbergen von Informationen verwendet.","title":"Term information hiding"},{"location":"terms/term-information-hiding/#information-hiding","text":"A fundamental principle in software design: Keep those design or implementation decisions hidden that are likely to change, thus protecting other parts of the system from modification if these decisions or implementations are changed. Is one important attributes of blackboxes . Separates interface from implementation. The term encapsulation is often used interchangeably with information hiding. {lang=de}","title":"Information Hiding"},{"location":"terms/term-information-hiding/#verbergen-von-informationen","text":"Ein grundlegendes Prinzip im Softwareentwurf: Entwurfs- oder Implementierungsentscheidungen, die sich wahrscheinlich \u00e4ndern, werden verborgen gehalten, so dass andere Teile des Systems vor Modifizierungen gesch\u00fctzt sind, wenn diese Entscheidungen oder Implementierungen ge\u00e4ndert werden. Eine der wichtigen Eigenschaften von Blackboxen . Trennt Schnittstelle von Implementierung. Der Begriff Kapselung wird h\u00e4ufig austauschbar mit Verbergen von Informationen verwendet.","title":"Verbergen von Informationen"},{"location":"terms/term-installability-quality-attribute/","text":"{lang=en} Installability Quality Attribute \u00b6 Degree of effectiveness and efficiency with which a product or system can be successfully installed and/or uninstalled in a specified environment. Is a sub-characteristic of: portability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Installierbarkeit \u00b6 Ma\u00df der Effektivit\u00e4t und Effizienz, mit dem ein Produkt oder ein System in einer spezifizierten Umgebung erfolgreich installiert und/oder deinstalliert werden kann. Teilmerkmal von: Portierbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term installability quality attribute"},{"location":"terms/term-installability-quality-attribute/#installability-quality-attribute","text":"Degree of effectiveness and efficiency with which a product or system can be successfully installed and/or uninstalled in a specified environment. Is a sub-characteristic of: portability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Installability Quality Attribute"},{"location":"terms/term-installability-quality-attribute/#qualitatsmerkmal-installierbarkeit","text":"Ma\u00df der Effektivit\u00e4t und Effizienz, mit dem ein Produkt oder ein System in einer spezifizierten Umgebung erfolgreich installiert und/oder deinstalliert werden kann. Teilmerkmal von: Portierbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Installierbarkeit"},{"location":"terms/term-integrity-quality-attribute/","text":"{lang=en} Integrity Quality Attribute \u00b6 Degree to which a system, product or component prevents unauthorized access to, or modification of, computer programs or data. Is a sub-characteristic of: security . Refer to ISO 25010 website. Category: Quality, ISO 25010, Security {lang=de} Qualit\u00e4tsmerkmal Integrit\u00e4t \u00b6 Ma\u00df, in dem ein System, ein Produkt oder eine Komponente den unbefugten Zugriff auf Computerprogramme oder Daten oder deren unbefugte Ab\u00e4nderung verhindert. Teilmerkmal von: Sicherheit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010, Sicherheit","title":"Term integrity quality attribute"},{"location":"terms/term-integrity-quality-attribute/#integrity-quality-attribute","text":"Degree to which a system, product or component prevents unauthorized access to, or modification of, computer programs or data. Is a sub-characteristic of: security . Refer to ISO 25010 website. Category: Quality, ISO 25010, Security {lang=de}","title":"Integrity Quality Attribute"},{"location":"terms/term-integrity-quality-attribute/#qualitatsmerkmal-integritat","text":"Ma\u00df, in dem ein System, ein Produkt oder eine Komponente den unbefugten Zugriff auf Computerprogramme oder Daten oder deren unbefugte Ab\u00e4nderung verhindert. Teilmerkmal von: Sicherheit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010, Sicherheit","title":"Qualit\u00e4tsmerkmal Integrit\u00e4t"},{"location":"terms/term-integrity/","text":"{lang=en} Integrity \u00b6 Various meanings: Category: Security One of the basic Security Goals which means maintaining and assuring accuracy and completeness of data. Usually this is achieved by the usage of cryptographic algorithms to create a digital signature. Category: Foundation Data or behavioral integrity: Degree to which clients (of a database) get identical results for identical queries (e.g. Monotonic-Read-Consistency, Montonic-Write-Consistency, Read-Your-Writes-Consistency etc.) Degree, to which a system behaves coherent, replicable and reasonable. See also consistency . {lang=de} Integrit\u00e4t \u00b6 Verschiedene Bedeutungen: Kategorie: Sicherheit Eines der grundlegenden Schutzziele , das die Aufrechterhaltung und Gew\u00e4hrleistung der Richtigkeit und Vollst\u00e4ndigkeit der Daten bezeichnet. Dies wird \u00fcblicherweise durch den Einsatz von kryptographischen Algorithmen zur Erstellung einer digitalen Signatur erreicht. Kategorie: Grundlegend Daten- oder Verhaltensintegrit\u00e4t: * Ma\u00df, in dem Clients (einer Datenbank) bei identischen Abfragen identische Ergebnisse erhalten (z.B. Monotonic-Read-Consistency, Montonic-Write-Consistency, Read-Your-Writes-Consistency etc.)* Ma\u00df, in dem ein System sich koh\u00e4rent, reproduzierbar und vern\u00fcnftig verh\u00e4lt. Siehe auch Konsistenz .","title":"Term integrity"},{"location":"terms/term-integrity/#integrity","text":"Various meanings: Category: Security One of the basic Security Goals which means maintaining and assuring accuracy and completeness of data. Usually this is achieved by the usage of cryptographic algorithms to create a digital signature. Category: Foundation Data or behavioral integrity: Degree to which clients (of a database) get identical results for identical queries (e.g. Monotonic-Read-Consistency, Montonic-Write-Consistency, Read-Your-Writes-Consistency etc.) Degree, to which a system behaves coherent, replicable and reasonable. See also consistency . {lang=de}","title":"Integrity"},{"location":"terms/term-integrity/#integritat","text":"Verschiedene Bedeutungen: Kategorie: Sicherheit Eines der grundlegenden Schutzziele , das die Aufrechterhaltung und Gew\u00e4hrleistung der Richtigkeit und Vollst\u00e4ndigkeit der Daten bezeichnet. Dies wird \u00fcblicherweise durch den Einsatz von kryptographischen Algorithmen zur Erstellung einer digitalen Signatur erreicht. Kategorie: Grundlegend Daten- oder Verhaltensintegrit\u00e4t: * Ma\u00df, in dem Clients (einer Datenbank) bei identischen Abfragen identische Ergebnisse erhalten (z.B. Monotonic-Read-Consistency, Montonic-Write-Consistency, Read-Your-Writes-Consistency etc.)* Ma\u00df, in dem ein System sich koh\u00e4rent, reproduzierbar und vern\u00fcnftig verh\u00e4lt. Siehe auch Konsistenz .","title":"Integrit\u00e4t"},{"location":"terms/term-interface-segregation-principle/","text":"{lang=en} Interface Segregation Principle (ISP) \u00b6 Building blocks (classes, components) should not be forced to depend on methods they don't use. ISP splits larger interfaces into smaller and more (client) specific ones so that clients will only need to know about methods that they actually use. {lang=de} Schnittstellenaufteilungsprinzip (ISP) \u00b6 Bausteine (Klassen, Komponenten) sollen nicht gezwungen werden, von Methoden abzuh\u00e4ngen, die sie nicht nutzen. Nach dem ISP werden gr\u00f6\u00dfere Schnittstellen in kleinere und (client)spezifischere Schnittstellen aufgeteilt, so dass Clients nur Methoden kennen m\u00fcssen, die sie tats\u00e4chlich nutzen.","title":"Term interface segregation principle"},{"location":"terms/term-interface-segregation-principle/#interface-segregation-principle-isp","text":"Building blocks (classes, components) should not be forced to depend on methods they don't use. ISP splits larger interfaces into smaller and more (client) specific ones so that clients will only need to know about methods that they actually use. {lang=de}","title":"Interface Segregation Principle (ISP)"},{"location":"terms/term-interface-segregation-principle/#schnittstellenaufteilungsprinzip-isp","text":"Bausteine (Klassen, Komponenten) sollen nicht gezwungen werden, von Methoden abzuh\u00e4ngen, die sie nicht nutzen. Nach dem ISP werden gr\u00f6\u00dfere Schnittstellen in kleinere und (client)spezifischere Schnittstellen aufgeteilt, so dass Clients nur Methoden kennen m\u00fcssen, die sie tats\u00e4chlich nutzen.","title":"Schnittstellenaufteilungsprinzip (ISP)"},{"location":"terms/term-interface/","text":"{lang=en} Interface \u00b6 Multiple meanings, depending on context: Boundary across which two building blocks interact or communicate with each other. Design construct that provides an abstraction of the behavior of concrete components, declares possible interactions with these components and constraints for these interactions. An example for the second meaning is the programming language construct interface from the object-oriented language Java(tm): /* File name : Animal.java */ interface Animal { public void eat (); public void move (); } /* File name : Horse.java */ public class Horse implements Animal { public void eat () { System . out . println ( \"Horse eats\" ); } public void move () { System . out . println ( \"Horse moves\" ); } {lang=de} Schnittstelle \u00b6 Mehrere Bedeutungen, je nach Kontext: Grenze, \u00fcber die zwei Bausteine \u200b\u200bhinweg interagieren oder miteinander kommunizieren. Entwurfskonstrukt, welches eine Abstraktion des Verhaltens konkreter Komponenten bereitstellt und m\u00f6gliche Interaktionen sowie Einschr\u00e4nkungen f\u00fcr die Interaktionen mit diesen Komponenten deklariert. Ein Beispiel f\u00fcr die zweite Bedeutung ist das Programmiersprachenkonstrukt Interface aus der objektorientierten Sprache Java(tm): /* File name : Animal.java */ interface Animal { public void eat (); public void move (); } /* File name : Horse.java */ public class Horse implements Animal { public void eat () { System . out . println ( \"Horse eats\" ); } public void move () { System . out . println ( \"Horse moves\" ); }","title":"Term interface"},{"location":"terms/term-interface/#interface","text":"Multiple meanings, depending on context: Boundary across which two building blocks interact or communicate with each other. Design construct that provides an abstraction of the behavior of concrete components, declares possible interactions with these components and constraints for these interactions. An example for the second meaning is the programming language construct interface from the object-oriented language Java(tm): /* File name : Animal.java */ interface Animal { public void eat (); public void move (); } /* File name : Horse.java */ public class Horse implements Animal { public void eat () { System . out . println ( \"Horse eats\" ); } public void move () { System . out . println ( \"Horse moves\" ); } {lang=de}","title":"Interface"},{"location":"terms/term-interface/#schnittstelle","text":"Mehrere Bedeutungen, je nach Kontext: Grenze, \u00fcber die zwei Bausteine \u200b\u200bhinweg interagieren oder miteinander kommunizieren. Entwurfskonstrukt, welches eine Abstraktion des Verhaltens konkreter Komponenten bereitstellt und m\u00f6gliche Interaktionen sowie Einschr\u00e4nkungen f\u00fcr die Interaktionen mit diesen Komponenten deklariert. Ein Beispiel f\u00fcr die zweite Bedeutung ist das Programmiersprachenkonstrukt Interface aus der objektorientierten Sprache Java(tm): /* File name : Animal.java */ interface Animal { public void eat (); public void move (); } /* File name : Horse.java */ public class Horse implements Animal { public void eat () { System . out . println ( \"Horse eats\" ); } public void move () { System . out . println ( \"Horse moves\" ); }","title":"Schnittstelle"},{"location":"terms/term-interoperability-quality-attribute/","text":"{lang=en} Interoperability Quality Attribute \u00b6 Degree to which two or more systems, products or components can exchange information and use the information that has been exchanged. Is a sub-characteristic of: compatibility . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Interoperabilit\u00e4t \u00b6 Ma\u00df, in dem zwei oder mehr Systeme, Produkte oder Komponenten Informationen austauschen und die ausgetauschten Informationen nutzen k\u00f6nnen. Teilmerkmal von: Kompatibilit\u00e4t . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term interoperability quality attribute"},{"location":"terms/term-interoperability-quality-attribute/#interoperability-quality-attribute","text":"Degree to which two or more systems, products or components can exchange information and use the information that has been exchanged. Is a sub-characteristic of: compatibility . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Interoperability Quality Attribute"},{"location":"terms/term-interoperability-quality-attribute/#qualitatsmerkmal-interoperabilitat","text":"Ma\u00df, in dem zwei oder mehr Systeme, Produkte oder Komponenten Informationen austauschen und die ausgetauschten Informationen nutzen k\u00f6nnen. Teilmerkmal von: Kompatibilit\u00e4t . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Interoperabilit\u00e4t"},{"location":"terms/term-isaqb/","text":"{lang=en} iSAQB \u00b6 international Software Architecture Qualification Board \u2013 an internationally active organization fostering the development of software architecture education. See also the discussion in the appendix . {lang=de} iSAQB \u00b6 international Software Architecture Qualification Board -- eine international aktive Organisation zur F\u00f6rderung der Entwicklung der Softwarearchitektur-Ausbildung. Siehe auch die Diskussion im Anhang .","title":"Term isaqb"},{"location":"terms/term-isaqb/#isaqb","text":"international Software Architecture Qualification Board \u2013 an internationally active organization fostering the development of software architecture education. See also the discussion in the appendix . {lang=de}","title":"iSAQB"},{"location":"terms/term-isaqb/#isaqb_1","text":"international Software Architecture Qualification Board -- eine international aktive Organisation zur F\u00f6rderung der Entwicklung der Softwarearchitektur-Ausbildung. Siehe auch die Diskussion im Anhang .","title":"iSAQB"},{"location":"terms/term-iso-25010/","text":"{lang=en} ISO 25010 \u00b6 Standards to describe (and evaluate) software product quality . \"The quality model determines which quality characteristics will be taken into account when evaluating the properties of a software product.\" (quote from the ISO website ) For a list of quality attributes defined by the ISO 25010 standard, refer to ISO 25010 {lang=de} ISO 25010 \u00b6 Normen zur Beschreibung (und Bewertung) von Softwareproduktqualit\u00e4t . Das Qualit\u00e4tsmodell legt fest, welche Qualit\u00e4tseigenschaften bei der Bewertung der Eigenschaften eines Softwareprodukts ber\u00fccksichtigt werden. (\u00dcbersetztes englisches Zitat von der ISO-Website ) Eine Liste der in der ISO 25010 Norm definierten Qualit\u00e4tsmerkmale findet sich unter ISO 25010 .","title":"Term iso 25010"},{"location":"terms/term-iso-25010/#iso-25010","text":"Standards to describe (and evaluate) software product quality . \"The quality model determines which quality characteristics will be taken into account when evaluating the properties of a software product.\" (quote from the ISO website ) For a list of quality attributes defined by the ISO 25010 standard, refer to ISO 25010 {lang=de}","title":"ISO 25010"},{"location":"terms/term-iso-25010/#iso-25010_1","text":"Normen zur Beschreibung (und Bewertung) von Softwareproduktqualit\u00e4t . Das Qualit\u00e4tsmodell legt fest, welche Qualit\u00e4tseigenschaften bei der Bewertung der Eigenschaften eines Softwareprodukts ber\u00fccksichtigt werden. (\u00dcbersetztes englisches Zitat von der ISO-Website ) Eine Liste der in der ISO 25010 Norm definierten Qualit\u00e4tsmerkmale findet sich unter ISO 25010 .","title":"ISO 25010"},{"location":"terms/term-iso-9126/","text":"{lang=en} ISO 9126 \u00b6 (Deprecated) standard to describe (and evaluate) software product quality . Has been superseded by ISO 25010 , see below. {lang=de} ISO 9126 \u00b6 (Veraltete) Norm zu Beschreibung (und Bewertung) von Softwareproduktqualit\u00e4t . Inzwischen abgel\u00f6st durch ISO 25010 , siehe unten.","title":"Term iso 9126"},{"location":"terms/term-iso-9126/#iso-9126","text":"(Deprecated) standard to describe (and evaluate) software product quality . Has been superseded by ISO 25010 , see below. {lang=de}","title":"ISO 9126"},{"location":"terms/term-iso-9126/#iso-9126_1","text":"(Veraltete) Norm zu Beschreibung (und Bewertung) von Softwareproduktqualit\u00e4t . Inzwischen abgel\u00f6st durch ISO 25010 , siehe unten.","title":"ISO 9126"},{"location":"terms/term-iterative-and-incremental-development/","text":"{lang=en} Iterative and Incremental Development \u00b6 Combination of iterative and incremental approaches for software development. These are essential parts of the various agile development approaches, e.g. Scrum and XP. {lang=de} Iterative und inkrementelle Entwicklung \u00b6 Kombination von iterativen und inkrementellen Ans\u00e4tzen zur Softwareentwicklung. Sie sind wesentliche Bestandteile verschiedener agiler Entwicklungsans\u00e4tze, z.B. Scrum und XP.","title":"Term iterative and incremental development"},{"location":"terms/term-iterative-and-incremental-development/#iterative-and-incremental-development","text":"Combination of iterative and incremental approaches for software development. These are essential parts of the various agile development approaches, e.g. Scrum and XP. {lang=de}","title":"Iterative and Incremental Development"},{"location":"terms/term-iterative-and-incremental-development/#iterative-und-inkrementelle-entwicklung","text":"Kombination von iterativen und inkrementellen Ans\u00e4tzen zur Softwareentwicklung. Sie sind wesentliche Bestandteile verschiedener agiler Entwicklungsans\u00e4tze, z.B. Scrum und XP.","title":"Iterative und inkrementelle Entwicklung"},{"location":"terms/term-iterative-development/","text":"{lang=en} Iterative Development \u00b6 \"Development approach that cycles through development phases, from gathering requirements to delivering functionality in a working release.\" (quoted from c2-wiki ) Such cycles are repeated to improve either functionality, quality or both. Contrast to the Waterfall Development . {lang=de} Iterative Entwicklung \u00b6 \u201eEntwicklungsansatz, bei dem Entwicklungsphasen, von der Zusammenstellung der Anforderungen bis zur Bereitstellung der Funktionalit\u00e4t in einem funktionierenden Release in Zyklen durchlaufen werden.\" (\u00dcbersetztes englisches Zitat von c2-wiki ). Diese Zyklen werden zur Verbesserung von Funktionalit\u00e4t, Qualit\u00e4t oder beidem wiederholt. Gegensatz zur Wasserfall-Entwicklung .","title":"Term iterative development"},{"location":"terms/term-iterative-development/#iterative-development","text":"\"Development approach that cycles through development phases, from gathering requirements to delivering functionality in a working release.\" (quoted from c2-wiki ) Such cycles are repeated to improve either functionality, quality or both. Contrast to the Waterfall Development . {lang=de}","title":"Iterative Development"},{"location":"terms/term-iterative-development/#iterative-entwicklung","text":"\u201eEntwicklungsansatz, bei dem Entwicklungsphasen, von der Zusammenstellung der Anforderungen bis zur Bereitstellung der Funktionalit\u00e4t in einem funktionierenden Release in Zyklen durchlaufen werden.\" (\u00dcbersetztes englisches Zitat von c2-wiki ). Diese Zyklen werden zur Verbesserung von Funktionalit\u00e4t, Qualit\u00e4t oder beidem wiederholt. Gegensatz zur Wasserfall-Entwicklung .","title":"Iterative Entwicklung"},{"location":"terms/term-kerckhoffs-principle/","text":"{lang=en} Kerckhoffs' Principle \u00b6 One of the six cryptographic axioms described 1883 in an article \"La cryptographie militaire\" by the dutch cryptographer and linguist Auguste Kerckhoffs. This axiom is still relevant today and therefore refered to as \"Kerckhoffs' Principle\". It describes that a cryptographic method must not need to be kept secret in order to achive the security of the encrypted messages. \"The enemy knows the system\" is another expression coined by the mathematician Claude Shannon as Shannon's Maxim. See Bruce Schneiers Crypto-Gram, May 15, 2002 Category: Security {lang=de} Kerckhoffs\\'sches Prinzip \u00b6 Eines der sechs kryptographischen Axiome, die 1883 von dem niederl\u00e4ndischen Kryptographen und Linguisten Auguste Kerckhoffs in dem Artikel \u201eLa cryptographie militaire\" beschrieben wurde. Dieses Axiom ist heute noch relevant und wird daher als \u201eKerckhoffs\\'sches Prinzip\" bezeichnet. Es schildert, dass eine kryptographische Methode nicht geheim gehalten werden muss, um die verschl\u00fcsselte Botschaft zu sch\u00fctzen. \u201eDer Feind kennt das System\" ist ein weiterer Ausdruck, den der Mathematiker Claude Shannon als Shannons Maxime gepr\u00e4gt hat. Siehe Bruce Schneiers Crypto-Gram, May 15, 2002 Kategorie: Sicherheit","title":"Term kerckhoffs principle"},{"location":"terms/term-kerckhoffs-principle/#kerckhoffs-principle","text":"One of the six cryptographic axioms described 1883 in an article \"La cryptographie militaire\" by the dutch cryptographer and linguist Auguste Kerckhoffs. This axiom is still relevant today and therefore refered to as \"Kerckhoffs' Principle\". It describes that a cryptographic method must not need to be kept secret in order to achive the security of the encrypted messages. \"The enemy knows the system\" is another expression coined by the mathematician Claude Shannon as Shannon's Maxim. See Bruce Schneiers Crypto-Gram, May 15, 2002 Category: Security {lang=de}","title":"Kerckhoffs' Principle"},{"location":"terms/term-kerckhoffs-principle/#kerckhoffssches-prinzip","text":"Eines der sechs kryptographischen Axiome, die 1883 von dem niederl\u00e4ndischen Kryptographen und Linguisten Auguste Kerckhoffs in dem Artikel \u201eLa cryptographie militaire\" beschrieben wurde. Dieses Axiom ist heute noch relevant und wird daher als \u201eKerckhoffs\\'sches Prinzip\" bezeichnet. Es schildert, dass eine kryptographische Methode nicht geheim gehalten werden muss, um die verschl\u00fcsselte Botschaft zu sch\u00fctzen. \u201eDer Feind kennt das System\" ist ein weiterer Ausdruck, den der Mathematiker Claude Shannon als Shannons Maxime gepr\u00e4gt hat. Siehe Bruce Schneiers Crypto-Gram, May 15, 2002 Kategorie: Sicherheit","title":"Kerckhoffs\\'sches Prinzip"},{"location":"terms/term-latency/","text":"{lang=en} Latency \u00b6 Latency is the time delay between the cause and the effect of some change in a system. In computer networks, latency describes the time it takes for an amount of data ( packet ) to get from one specific location to another. In interactive systems, latency is the time interval between some input to the system and the audio-visual response. Often a delay exists, often caused by network delays.","title":"Term latency"},{"location":"terms/term-latency/#latency","text":"Latency is the time delay between the cause and the effect of some change in a system. In computer networks, latency describes the time it takes for an amount of data ( packet ) to get from one specific location to another. In interactive systems, latency is the time interval between some input to the system and the audio-visual response. Often a delay exists, often caused by network delays.","title":"Latency"},{"location":"terms/term-layer/","text":"{lang=en} Layer \u00b6 Grouping of building blocks or components that (together) offer a cohesive set of services to other layers. Layers are related to each other by the ordered relation allowed to use . {lang=de} Schicht \u00b6 Zusammenstellung von Bausteinen oder Komponenten die (zusammen) anderen Schichten einen koh\u00e4renten Satz an Services bieten. Die Beziehung zwischen Schichten wird durch die geordnete Beziehung erlaubt zu nutzen geregelt.","title":"Term layer"},{"location":"terms/term-layer/#layer","text":"Grouping of building blocks or components that (together) offer a cohesive set of services to other layers. Layers are related to each other by the ordered relation allowed to use . {lang=de}","title":"Layer"},{"location":"terms/term-layer/#schicht","text":"Zusammenstellung von Bausteinen oder Komponenten die (zusammen) anderen Schichten einen koh\u00e4renten Satz an Services bieten. Die Beziehung zwischen Schichten wird durch die geordnete Beziehung erlaubt zu nutzen geregelt.","title":"Schicht"},{"location":"terms/term-learnability-quality-attribute/","text":"{lang=en} Learnability Quality Attribute \u00b6 Degree to which a product or system can be used by specified users to achieve specified goals of learning to use the product or system with effectiveness, efficiency, freedom from risk and satisfaction in a specified context of use. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Erlernbarkeit \u00b6 Ma\u00df, in dem ein Produkt oder System von spezifizierten Benutzern verwendet werden kann, um spezifizierte Lernziele zur Nutzung des Produkts oder Systems in einem spezifizierten Nutzungskontext effektiv, effizient, risikofrei und zufriedenstellend zu erreichen. Teilmerkmal von: Benutzerfreundlichkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term learnability quality attribute"},{"location":"terms/term-learnability-quality-attribute/#learnability-quality-attribute","text":"Degree to which a product or system can be used by specified users to achieve specified goals of learning to use the product or system with effectiveness, efficiency, freedom from risk and satisfaction in a specified context of use. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Learnability Quality Attribute"},{"location":"terms/term-learnability-quality-attribute/#qualitatsmerkmal-erlernbarkeit","text":"Ma\u00df, in dem ein Produkt oder System von spezifizierten Benutzern verwendet werden kann, um spezifizierte Lernziele zur Nutzung des Produkts oder Systems in einem spezifizierten Nutzungskontext effektiv, effizient, risikofrei und zufriedenstellend zu erreichen. Teilmerkmal von: Benutzerfreundlichkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Erlernbarkeit"},{"location":"terms/term-liskov-substitution-principle/","text":"{lang=en} Liskov Substitution Principle \u00b6 Refers to object oriented programming: If you use inheritance, do it right: Instances of derived types (subclasses) must be completely substitutable for their base types. If code uses a base class, these references can be replaced with any instance of a derived class without affecting the functionality of that code. {lang=de} Liskovsches Substitutionsprinzip \u00b6 Bezieht sich auf die objektorientierte Programmierung: Wenn Vererbung genutzt wird, dann richtig: Instanzen von abgeleiteten Typen (Unterklassen) m\u00fcssen vollst\u00e4ndig an die Stelle ihrer Basistypen treten k\u00f6nnen. Wenn der Code Basisklassen verwendet, k\u00f6nnen diese Referenzen durch jede beliebige Instanz einer abgeleiteten Klasse ersetzt werden, ohne dass dies die Funktionalit\u00e4t des Codes beeintr\u00e4chtigt.","title":"Term liskov substitution principle"},{"location":"terms/term-liskov-substitution-principle/#liskov-substitution-principle","text":"Refers to object oriented programming: If you use inheritance, do it right: Instances of derived types (subclasses) must be completely substitutable for their base types. If code uses a base class, these references can be replaced with any instance of a derived class without affecting the functionality of that code. {lang=de}","title":"Liskov Substitution Principle"},{"location":"terms/term-liskov-substitution-principle/#liskovsches-substitutionsprinzip","text":"Bezieht sich auf die objektorientierte Programmierung: Wenn Vererbung genutzt wird, dann richtig: Instanzen von abgeleiteten Typen (Unterklassen) m\u00fcssen vollst\u00e4ndig an die Stelle ihrer Basistypen treten k\u00f6nnen. Wenn der Code Basisklassen verwendet, k\u00f6nnen diese Referenzen durch jede beliebige Instanz einer abgeleiteten Klasse ersetzt werden, ohne dass dies die Funktionalit\u00e4t des Codes beeintr\u00e4chtigt.","title":"Liskovsches Substitutionsprinzip"},{"location":"terms/term-maintainability-quality-attribute/","text":"{lang=en} Maintainability Quality Attribute \u00b6 Degree of effectiveness and efficiency with which a product or system can be modified to improve it, correct it or adapt it to changes in environment, and in requirements. Is composed of the following sub-characteristics: modularity , reusability , analysability , modifiability , testability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Wartbarkeit \u00b6 Grad an Effektivit\u00e4t und Effizienz, mit dem ein Produkt modifiziert werden kann, um es zu verbessern, zu korrigieren oder an Ver\u00e4nderungen der Umgebung oder der Anforderungen anzupassen. Es besteht aus folgenden Teilmerkmalen: Modularit\u00e4t , Wiederverwendbarkeit , Analysierbarkeit , Modifizierbarkeit , Testbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term maintainability quality attribute"},{"location":"terms/term-maintainability-quality-attribute/#maintainability-quality-attribute","text":"Degree of effectiveness and efficiency with which a product or system can be modified to improve it, correct it or adapt it to changes in environment, and in requirements. Is composed of the following sub-characteristics: modularity , reusability , analysability , modifiability , testability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Maintainability Quality Attribute"},{"location":"terms/term-maintainability-quality-attribute/#qualitatsmerkmal-wartbarkeit","text":"Grad an Effektivit\u00e4t und Effizienz, mit dem ein Produkt modifiziert werden kann, um es zu verbessern, zu korrigieren oder an Ver\u00e4nderungen der Umgebung oder der Anforderungen anzupassen. Es besteht aus folgenden Teilmerkmalen: Modularit\u00e4t , Wiederverwendbarkeit , Analysierbarkeit , Modifizierbarkeit , Testbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Wartbarkeit"},{"location":"terms/term-maturity-quality-attribute/","text":"{lang=en} Maturity Quality Attribute \u00b6 Degree to which a system, product or component meets needs for reliability under normal operation. Is a sub-characteristic of: reliability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Reifegrad \u00b6 Ma\u00df, in dem ein System, ein Produkt oder eine Komponente im Normalbetrieb die Zuverl\u00e4ssigkeitsanforderungen erf\u00fcllt. Teilmerkmal von: Zuverl\u00e4ssigkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term maturity quality attribute"},{"location":"terms/term-maturity-quality-attribute/#maturity-quality-attribute","text":"Degree to which a system, product or component meets needs for reliability under normal operation. Is a sub-characteristic of: reliability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Maturity Quality Attribute"},{"location":"terms/term-maturity-quality-attribute/#qualitatsmerkmal-reifegrad","text":"Ma\u00df, in dem ein System, ein Produkt oder eine Komponente im Normalbetrieb die Zuverl\u00e4ssigkeitsanforderungen erf\u00fcllt. Teilmerkmal von: Zuverl\u00e4ssigkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Reifegrad"},{"location":"terms/term-microservice/","text":"{lang=en} Microservice \u00b6 An architectural style, proposing to divide large systems into small units. \"Microservices have to be implemented as virtual machines, as more light-weight alternatives such as Docker containers or as individual processes. Thereby they can easily be brought into production individually.\" (quoted from the (free) LeanPub booklet on Microservices by Eberhard Wolff ) {lang=de} Microservice \u00b6 Architekturstil, der die Unterteilung von gro\u00dfen Systemen in kleine Einheiten vorschl\u00e4gt. \u201eMicroservices m\u00fcssen als virtuelle Maschinen, als leichtere Alternativen, wie Docker-Container, oder als individuelle Prozesse implementiert werden. Dadurch k\u00f6nnen sie leicht einzeln in Produktion genommen werden.\" (\u00dcbersetztes englisches Zitat aus dem (kostenlosen) LeanPub booklet on Microservices von Eberhard Wolff .","title":"Term microservice"},{"location":"terms/term-microservice/#microservice","text":"An architectural style, proposing to divide large systems into small units. \"Microservices have to be implemented as virtual machines, as more light-weight alternatives such as Docker containers or as individual processes. Thereby they can easily be brought into production individually.\" (quoted from the (free) LeanPub booklet on Microservices by Eberhard Wolff ) {lang=de}","title":"Microservice"},{"location":"terms/term-microservice/#microservice_1","text":"Architekturstil, der die Unterteilung von gro\u00dfen Systemen in kleine Einheiten vorschl\u00e4gt. \u201eMicroservices m\u00fcssen als virtuelle Maschinen, als leichtere Alternativen, wie Docker-Container, oder als individuelle Prozesse implementiert werden. Dadurch k\u00f6nnen sie leicht einzeln in Produktion genommen werden.\" (\u00dcbersetztes englisches Zitat aus dem (kostenlosen) LeanPub booklet on Microservices von Eberhard Wolff .","title":"Microservice"},{"location":"terms/term-model-driven-architecture/","text":"{lang=en} Model Driven Architecture (MDA) \u00b6 Model Driven Architecture (MDA) is an OMG-Standard for model based software development. Definition: \"An approach to IT system specification that separates the specification of functionality from the specification of the implementation of that functionality on a specific technology platform.\" {lang=de} Modellgetriebene Architektur \u00b6 Modellgetriebene Architektur / Model Driven Architecture (MDA) ist ein OMG-Standard f\u00fcr die modellbasierte Softwareentwicklung. Definition: Ein Ansatz zur IT-Systemspezifikation, bei dem die Spezifikation der Funktionalit\u00e4t von der Spezifikation der Implementierung dieser Funktionalit\u00e4t auf einer spezifischen Technologieplattform getrennt wird.","title":"Term model driven architecture"},{"location":"terms/term-model-driven-architecture/#model-driven-architecture-mda","text":"Model Driven Architecture (MDA) is an OMG-Standard for model based software development. Definition: \"An approach to IT system specification that separates the specification of functionality from the specification of the implementation of that functionality on a specific technology platform.\" {lang=de}","title":"Model Driven Architecture (MDA)"},{"location":"terms/term-model-driven-architecture/#modellgetriebene-architektur","text":"Modellgetriebene Architektur / Model Driven Architecture (MDA) ist ein OMG-Standard f\u00fcr die modellbasierte Softwareentwicklung. Definition: Ein Ansatz zur IT-Systemspezifikation, bei dem die Spezifikation der Funktionalit\u00e4t von der Spezifikation der Implementierung dieser Funktionalit\u00e4t auf einer spezifischen Technologieplattform getrennt wird.","title":"Modellgetriebene Architektur"},{"location":"terms/term-model-driven-software-development/","text":"{lang=en} Model-Driven Software Development (MDSD) \u00b6 The underlying idea is to generate code from more abstract models of requirements or the domain. {lang=de} Modellgetriebene Softwareentwicklung / Model-driven software development (MDSD) \u00b6 Die zugrunde liegende Idee besteht darin, Code aus abstrakteren Anforderungsmodellen oder der Dom\u00e4ne zu generieren.","title":"Term model driven software development"},{"location":"terms/term-model-driven-software-development/#model-driven-software-development-mdsd","text":"The underlying idea is to generate code from more abstract models of requirements or the domain. {lang=de}","title":"Model-Driven Software Development (MDSD)"},{"location":"terms/term-model-driven-software-development/#modellgetriebene-softwareentwicklung-model-driven-software-development-mdsd","text":"Die zugrunde liegende Idee besteht darin, Code aus abstrakteren Anforderungsmodellen oder der Dom\u00e4ne zu generieren.","title":"Modellgetriebene Softwareentwicklung / Model-driven software development (MDSD)"},{"location":"terms/term-model-kind/","text":"{lang=en} Model Kind \u00b6 Conventions for a type of modeling (as defined in ISO/IEC/IEEE 42010). Note, examples of model kinds include data flow diagrams, class diagrams, Petri nets, balance sheets, organization charts and state transition models. Category: ISO-IEC-IEEE-42010 {lang=de} Modellart \u00b6 Konventionen f\u00fcr einen Modellierungstyp (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Beispiele f\u00fcr Modellarten sind Datenflussdiagramme, Klassendiagramme, Petri-Netze, Bilanzen, Organigramme und Zustands\u00fcbergangsmodelle. Kategorie: ISO-IEC-IEEE-42010","title":"Term model kind"},{"location":"terms/term-model-kind/#model-kind","text":"Conventions for a type of modeling (as defined in ISO/IEC/IEEE 42010). Note, examples of model kinds include data flow diagrams, class diagrams, Petri nets, balance sheets, organization charts and state transition models. Category: ISO-IEC-IEEE-42010 {lang=de}","title":"Model Kind"},{"location":"terms/term-model-kind/#modellart","text":"Konventionen f\u00fcr einen Modellierungstyp (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Beispiele f\u00fcr Modellarten sind Datenflussdiagramme, Klassendiagramme, Petri-Netze, Bilanzen, Organigramme und Zustands\u00fcbergangsmodelle. Kategorie: ISO-IEC-IEEE-42010","title":"Modellart"},{"location":"terms/term-model-view-controller/","text":"{lang=en} Model-View-Controller \u00b6 Architecture pattern, often used to implement user interfaces. It divides a system into three interconnected parts (model, view and controller) to separate the following responsibilities: Model manages data and logic of the system. The \"truth\" that will be shown or displayed by one or many views. Model does not know (depend on) its views. View can be any number of (arbitrary) output representation of (model) information. Multiple views of the same model are possible. Controller accepts (user) input and converts those to commands for the model or view. {lang=de} Model-View-Controller \u00b6 Architekturmuster, das h\u00e4ufig zur Implementierung von Benutzeroberfl\u00e4chen verwendet wird. Unterteilt ein System in drei miteinander verbundene Teile (Modell / model, Pr\u00e4sentation / view und Steuerung / controller), um die folgenden Verantwortlichkeiten zu trennen: Das Modell verwaltet Daten und Logik des Systems. Die \u201eWahrheit\", die von einer oder vielen Pr\u00e4sentationen gezeigt oder angezeigt wird. Das Modell kennt seine Pr\u00e4sentationen nicht (und ist nicht von ihnen abh\u00e4ngig). Die Pr\u00e4sentation kann eine Reihe von (beliebigen) Outputdarstellungen der (Modell-) Informationen sein. Mehrere Pr\u00e4sentationen desselben Modells sind m\u00f6glich. Die Steuerung akzeptiert (Benutzer-) Eingaben und wandelt diese in Befehle f\u00fcr das Modell oder die Pr\u00e4sentation um.","title":"Term model view controller"},{"location":"terms/term-model-view-controller/#model-view-controller","text":"Architecture pattern, often used to implement user interfaces. It divides a system into three interconnected parts (model, view and controller) to separate the following responsibilities: Model manages data and logic of the system. The \"truth\" that will be shown or displayed by one or many views. Model does not know (depend on) its views. View can be any number of (arbitrary) output representation of (model) information. Multiple views of the same model are possible. Controller accepts (user) input and converts those to commands for the model or view. {lang=de}","title":"Model-View-Controller"},{"location":"terms/term-model-view-controller/#model-view-controller_1","text":"Architekturmuster, das h\u00e4ufig zur Implementierung von Benutzeroberfl\u00e4chen verwendet wird. Unterteilt ein System in drei miteinander verbundene Teile (Modell / model, Pr\u00e4sentation / view und Steuerung / controller), um die folgenden Verantwortlichkeiten zu trennen: Das Modell verwaltet Daten und Logik des Systems. Die \u201eWahrheit\", die von einer oder vielen Pr\u00e4sentationen gezeigt oder angezeigt wird. Das Modell kennt seine Pr\u00e4sentationen nicht (und ist nicht von ihnen abh\u00e4ngig). Die Pr\u00e4sentation kann eine Reihe von (beliebigen) Outputdarstellungen der (Modell-) Informationen sein. Mehrere Pr\u00e4sentationen desselben Modells sind m\u00f6glich. Die Steuerung akzeptiert (Benutzer-) Eingaben und wandelt diese in Befehle f\u00fcr das Modell oder die Pr\u00e4sentation um.","title":"Model-View-Controller"},{"location":"terms/term-modeling-tool/","text":"{lang=en} Modeling Tool \u00b6 A tool that creates models (e.g. UML or BPMN models). Can be used to create consistent diagrams for documentation because it has the advantage that each model element exists only once but can be consistently displayed in many diagrams (as opposed to a mere Drawing Tool ). {lang=de} Modellierungswerkzeug \u00b6 Ein Werkzeug, das Modelle erstellt (z.B. UML- oder BPMN-Modelle). Kann zur Erstellung von konsistenten Diagrammen zur Dokumentation verwendet werden, da es den Vorteil hat, dass jedes Modellelement nur einmal vorhanden ist, aber in vielen Diagrammen konsistent angezeigt wird (anders als bei einem einfachen Mal-/Zeichenprogramm ).","title":"Term modeling tool"},{"location":"terms/term-modeling-tool/#modeling-tool","text":"A tool that creates models (e.g. UML or BPMN models). Can be used to create consistent diagrams for documentation because it has the advantage that each model element exists only once but can be consistently displayed in many diagrams (as opposed to a mere Drawing Tool ). {lang=de}","title":"Modeling Tool"},{"location":"terms/term-modeling-tool/#modellierungswerkzeug","text":"Ein Werkzeug, das Modelle erstellt (z.B. UML- oder BPMN-Modelle). Kann zur Erstellung von konsistenten Diagrammen zur Dokumentation verwendet werden, da es den Vorteil hat, dass jedes Modellelement nur einmal vorhanden ist, aber in vielen Diagrammen konsistent angezeigt wird (anders als bei einem einfachen Mal-/Zeichenprogramm ).","title":"Modellierungswerkzeug"},{"location":"terms/term-modifiability-quality-attribute/","text":"{lang=en} Modifiability Quality Attribute \u00b6 Degree to which a product or system can be effectively and efficiently modified without introducing defects or degrading existing product quality. Is a sub-characteristic of: maintainability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Modifizierbarkeit \u00b6 Ma\u00df, in dem ein Produkt oder System effektiv und effizient modifiziert werden kann, ohne dass Fehler eingebracht werden oder die bestehende Produktqualit\u00e4t beeintr\u00e4chtigt wird. Teilmerkmal von: Wartbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term modifiability quality attribute"},{"location":"terms/term-modifiability-quality-attribute/#modifiability-quality-attribute","text":"Degree to which a product or system can be effectively and efficiently modified without introducing defects or degrading existing product quality. Is a sub-characteristic of: maintainability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Modifiability Quality Attribute"},{"location":"terms/term-modifiability-quality-attribute/#qualitatsmerkmal-modifizierbarkeit","text":"Ma\u00df, in dem ein Produkt oder System effektiv und effizient modifiziert werden kann, ohne dass Fehler eingebracht werden oder die bestehende Produktqualit\u00e4t beeintr\u00e4chtigt wird. Teilmerkmal von: Wartbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Modifizierbarkeit"},{"location":"terms/term-modular-programming/","text":"{lang=en} Modular Programming \u00b6 \"Software design technique that separates the functionality of a program into independent, interchangeable modules , so that each module contains everything necessary to execute only one aspect of the desired functionality. Modules have interfaces expressing the elements provided and required by the module. The elements defined in the interface are detectable by other modules.\" (quoted from Wikipedia ) {lang=de} Modulare Programmierung \u00b6 \u201eSoftwareentwurfstechnik, die die Funktionalit\u00e4t eines Programms in unabh\u00e4ngige, austauschbare Module unterteilt, so dass jedes Modul alles enth\u00e4lt, was zur Ausf\u00fchrung von nur einem Aspekt der gew\u00fcnschten Funktionalit\u00e4t erforderlich ist. Module haben Schnittstellen , die die vom Modul bereitgestellten und ben\u00f6tigten Elemente angeben. Die in der Schnittstelle definierten Elemente k\u00f6nnen von anderen Modulen erkannt werden.\" (\u00dcbersetztes englisches Zitat aus Wikipedia )","title":"Term modular programming"},{"location":"terms/term-modular-programming/#modular-programming","text":"\"Software design technique that separates the functionality of a program into independent, interchangeable modules , so that each module contains everything necessary to execute only one aspect of the desired functionality. Modules have interfaces expressing the elements provided and required by the module. The elements defined in the interface are detectable by other modules.\" (quoted from Wikipedia ) {lang=de}","title":"Modular Programming"},{"location":"terms/term-modular-programming/#modulare-programmierung","text":"\u201eSoftwareentwurfstechnik, die die Funktionalit\u00e4t eines Programms in unabh\u00e4ngige, austauschbare Module unterteilt, so dass jedes Modul alles enth\u00e4lt, was zur Ausf\u00fchrung von nur einem Aspekt der gew\u00fcnschten Funktionalit\u00e4t erforderlich ist. Module haben Schnittstellen , die die vom Modul bereitgestellten und ben\u00f6tigten Elemente angeben. Die in der Schnittstelle definierten Elemente k\u00f6nnen von anderen Modulen erkannt werden.\" (\u00dcbersetztes englisches Zitat aus Wikipedia )","title":"Modulare Programmierung"},{"location":"terms/term-modularity-quality-attribute/","text":"{lang=en} Modularity Quality Attribute \u00b6 Degree to which a system or computer program is composed of discrete components such that a change to one component has minimal impact on other components. Is a sub-characteristic of: maintainability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Modularit\u00e4t \u00b6 Ma\u00df, inwieweit ein System oder Computerprogramm aus diskreten Komponenten besteht, so dass eine \u00c4nderung an einer Komponente minimale Auswirkungen auf andere Komponenten hat. Teilmerkmal von: Wartbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term modularity quality attribute"},{"location":"terms/term-modularity-quality-attribute/#modularity-quality-attribute","text":"Degree to which a system or computer program is composed of discrete components such that a change to one component has minimal impact on other components. Is a sub-characteristic of: maintainability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Modularity Quality Attribute"},{"location":"terms/term-modularity-quality-attribute/#qualitatsmerkmal-modularitat","text":"Ma\u00df, inwieweit ein System oder Computerprogramm aus diskreten Komponenten besteht, so dass eine \u00c4nderung an einer Komponente minimale Auswirkungen auf andere Komponenten hat. Teilmerkmal von: Wartbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Modularit\u00e4t"},{"location":"terms/term-module/","text":"{lang=en} Module \u00b6 (see also Modular programming ) structural element or building block, usually regarded as a black box with a clearly defined responsibility. It encapsulates data and code and provides public interfaces, so clients can access its functionality. This meaning has first been described in a groundbreaking and fundamental paper from David L. Parnas: On the Criteria to be Used in Decomposing Software into Modules In several programming languages, module is a construct for aggregating smaller programming units, e.g. in Python. In other languages (like Java), modules are called packages . The CPSA(R)-Advanced Level is currently divided into several modules, which can be learned or taught separately and in any order. The exact relationships between these modules and the contents of these modules are defined in the respective curricula. {lang=de} Modul \u00b6 (Siehe auch Modulare Programmierung ) Strukturelement oder Baustein, \u00fcblicherweise als Blackbox angesehen, mit einer klar definierten Verantwortlichkeit. Kapselt Daten und Code und bietet \u00f6ffentliche Schnittstellen, so dass Clients auf seine Funktionalit\u00e4t zugreifen k\u00f6nnen. Diese Bedeutung wurde erstmals in einem bahnbrechenden Grundlagenpapier von David L. Parnas beschrieben: On the Criteria to be Used in Decomposing Software into Modules In mehreren Programmiersprachen ist ein Modul ein Konstrukt zur Zusammenstellung kleinerer Programmiereinheiten, z.B. in Python. In anderen Sprachen (wie Java) werden Module Pakete genannt. Das CPSA(R)-Advanced Level ist derzeit in mehrere Module unterteilt, die getrennt und in beliebiger Reihenfolge gelernt oder unterrichtet werden k\u00f6nnen. Die genauen Beziehungen zwischen diesen Modulen und die Inhalte dieser Module sind in den jeweiligen Lehrpl\u00e4nen festgelegt.","title":"Term module"},{"location":"terms/term-module/#module","text":"(see also Modular programming ) structural element or building block, usually regarded as a black box with a clearly defined responsibility. It encapsulates data and code and provides public interfaces, so clients can access its functionality. This meaning has first been described in a groundbreaking and fundamental paper from David L. Parnas: On the Criteria to be Used in Decomposing Software into Modules In several programming languages, module is a construct for aggregating smaller programming units, e.g. in Python. In other languages (like Java), modules are called packages . The CPSA(R)-Advanced Level is currently divided into several modules, which can be learned or taught separately and in any order. The exact relationships between these modules and the contents of these modules are defined in the respective curricula. {lang=de}","title":"Module"},{"location":"terms/term-module/#modul","text":"(Siehe auch Modulare Programmierung ) Strukturelement oder Baustein, \u00fcblicherweise als Blackbox angesehen, mit einer klar definierten Verantwortlichkeit. Kapselt Daten und Code und bietet \u00f6ffentliche Schnittstellen, so dass Clients auf seine Funktionalit\u00e4t zugreifen k\u00f6nnen. Diese Bedeutung wurde erstmals in einem bahnbrechenden Grundlagenpapier von David L. Parnas beschrieben: On the Criteria to be Used in Decomposing Software into Modules In mehreren Programmiersprachen ist ein Modul ein Konstrukt zur Zusammenstellung kleinerer Programmiereinheiten, z.B. in Python. In anderen Sprachen (wie Java) werden Module Pakete genannt. Das CPSA(R)-Advanced Level ist derzeit in mehrere Module unterteilt, die getrennt und in beliebiger Reihenfolge gelernt oder unterrichtet werden k\u00f6nnen. Die genauen Beziehungen zwischen diesen Modulen und die Inhalte dieser Module sind in den jeweiligen Lehrpl\u00e4nen festgelegt.","title":"Modul"},{"location":"terms/term-node-js/","text":"{lang=en} Node (Node.js) \u00b6 In modern web development: Short form for the open source JavaScript runtime Node.js\u00ae , which is built on Chrome's V8 JavaScript engine. Node.js is famous for its an event-driven, non-blocking I/O model and its vast ecosystem of supporting libraries. {lang=de} Node (Node.js) \u00b6 In der modernen Webentwicklung: Kurz f\u00fcr die quelloffene JavaScript-Laufzeitumgebung Node.js\u00ae , die auf V8 JavaScript von Chrome aufbaut. Node.js ist f\u00fcr sein ereignisgesteuertes, nicht blockierendes E/A-Modell und sein gro\u00dfes \u00d6kosystem unterst\u00fctzender Bibliotheken bekannt.","title":"Term node js"},{"location":"terms/term-node-js/#node-nodejs","text":"In modern web development: Short form for the open source JavaScript runtime Node.js\u00ae , which is built on Chrome's V8 JavaScript engine. Node.js is famous for its an event-driven, non-blocking I/O model and its vast ecosystem of supporting libraries. {lang=de}","title":"Node (Node.js)"},{"location":"terms/term-node-js/#node-nodejs_1","text":"In der modernen Webentwicklung: Kurz f\u00fcr die quelloffene JavaScript-Laufzeitumgebung Node.js\u00ae , die auf V8 JavaScript von Chrome aufbaut. Node.js ist f\u00fcr sein ereignisgesteuertes, nicht blockierendes E/A-Modell und sein gro\u00dfes \u00d6kosystem unterst\u00fctzender Bibliotheken bekannt.","title":"Node (Node.js)"},{"location":"terms/term-node-uml/","text":"{lang=en} Node (in UML) \u00b6 A processing resource (execution environment, processor, machine, virtual machine, application server) where artifacts can be deployed and executed. {lang=de} Knoten (in UML) \u00b6 Eine Verarbeitungsressource (Ausf\u00fchrungsumgebung, Prozessor, Maschine, virtuelle Maschine, Anwendungsserver) zur Verteilung und Ausf\u00fchrung von Artefakten.","title":"Term node uml"},{"location":"terms/term-node-uml/#node-in-uml","text":"A processing resource (execution environment, processor, machine, virtual machine, application server) where artifacts can be deployed and executed. {lang=de}","title":"Node (in UML)"},{"location":"terms/term-node-uml/#knoten-in-uml","text":"Eine Verarbeitungsressource (Ausf\u00fchrungsumgebung, Prozessor, Maschine, virtuelle Maschine, Anwendungsserver) zur Verteilung und Ausf\u00fchrung von Artefakten.","title":"Knoten (in UML)"},{"location":"terms/term-non-functional-requirement/","text":"{lang=en} Non Functional Requirement (NFR) \u00b6 Requirements that constrain the solution . Nonfunctional requirements are also known as quality attribute requirements or quality requirements . The term NFR is actually misleading, as many of the attributes involved directly relate to specific system functions (so modern requirements engineering likes to call these things required constraints ). {lang=de} Nichtfunktionale Anforderung \u00b6 Anforderungen, die die L\u00f6sung einschr\u00e4nken . Nichtfunktionale Anforderungen werden auch als Qualit\u00e4tsanforderungen bezeichnet. Der Begriff nichtfunktional ist eigentlich irref\u00fchrend, da viele der betreffenden Eigenschaften sich direkt auf spezifische System funktionen beziehen (weshalb sie im modernen Anforderungsmanagements gerne als vorgegebene Randbedingungen bezeichnet werden).","title":"Term non functional requirement"},{"location":"terms/term-non-functional-requirement/#non-functional-requirement-nfr","text":"Requirements that constrain the solution . Nonfunctional requirements are also known as quality attribute requirements or quality requirements . The term NFR is actually misleading, as many of the attributes involved directly relate to specific system functions (so modern requirements engineering likes to call these things required constraints ). {lang=de}","title":"Non Functional Requirement (NFR)"},{"location":"terms/term-non-functional-requirement/#nichtfunktionale-anforderung","text":"Anforderungen, die die L\u00f6sung einschr\u00e4nken . Nichtfunktionale Anforderungen werden auch als Qualit\u00e4tsanforderungen bezeichnet. Der Begriff nichtfunktional ist eigentlich irref\u00fchrend, da viele der betreffenden Eigenschaften sich direkt auf spezifische System funktionen beziehen (weshalb sie im modernen Anforderungsmanagements gerne als vorgegebene Randbedingungen bezeichnet werden).","title":"Nichtfunktionale Anforderung"},{"location":"terms/term-non-repudiation-quality-attribute/","text":"{lang=en} Non-repudiation Quality Attribute \u00b6 Degree to which actions or events can be proven to have taken place, so that the events or actions cannot be repudiated later. Is a sub-characteristic of: security . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Nichtabstreitbarkeit \u00b6 Ma\u00df, in dem nachgewiesen werden kann, dass Ma\u00dfnahmen oder Ereignisse stattgefunden haben, so dass sie sp\u00e4ter nicht bestritten werden k\u00f6nnen. Teilmerkmal von: Sicherheit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term non repudiation quality attribute"},{"location":"terms/term-non-repudiation-quality-attribute/#non-repudiation-quality-attribute","text":"Degree to which actions or events can be proven to have taken place, so that the events or actions cannot be repudiated later. Is a sub-characteristic of: security . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Non-repudiation Quality Attribute"},{"location":"terms/term-non-repudiation-quality-attribute/#qualitatsmerkmal-nichtabstreitbarkeit","text":"Ma\u00df, in dem nachgewiesen werden kann, dass Ma\u00dfnahmen oder Ereignisse stattgefunden haben, so dass sie sp\u00e4ter nicht bestritten werden k\u00f6nnen. Teilmerkmal von: Sicherheit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Nichtabstreitbarkeit"},{"location":"terms/term-notation/","text":"{lang=en} Notation \u00b6 A system of marks, signs, figures, or characters that is used to represent information. Examples: prose, table, bullet point list, numbered list, UML, BPMN. {lang=de} Notation \u00b6 Ein System aus Zeichen, Symbolen, Bildern oder Schriftzeichen zur Darstellung von Informationen. Beispiele: Flie\u00dftexte, Tabellen, Stichpunktlisten, nummeriere Listen, UML, BPMN.","title":"Term notation"},{"location":"terms/term-notation/#notation","text":"A system of marks, signs, figures, or characters that is used to represent information. Examples: prose, table, bullet point list, numbered list, UML, BPMN. {lang=de}","title":"Notation"},{"location":"terms/term-notation/#notation_1","text":"Ein System aus Zeichen, Symbolen, Bildern oder Schriftzeichen zur Darstellung von Informationen. Beispiele: Flie\u00dftexte, Tabellen, Stichpunktlisten, nummeriere Listen, UML, BPMN.","title":"Notation"},{"location":"terms/term-observer/","text":"{lang=en} Observer \u00b6 (Design pattern) \"... in which an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods.\" (quoted from Wikipedia ) The Observer pattern is a key pattern to complement the model\u2013view\u2013controller (MVC) architectural pattern. {lang=de} Beobachter / Observer \u00b6 (Entwurfsmuster) \u201e... in dem ein Objekt eine Liste seiner abh\u00e4ngigen Strukturen, Observer genannt, f\u00fchrt und sie automatisch, in der Regel durch Aufruf einer ihrer Methoden, \u00fcber Zustands\u00e4nderungen benachrichtigt. Das Beobachtermuster ist ein wesentlicher Bestandteil des MVC-Architekturmusters (model-view-controller).\" (\u00dcbersetztes englisches Zitat aus Wikipedia )","title":"Term observer"},{"location":"terms/term-observer/#observer","text":"(Design pattern) \"... in which an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods.\" (quoted from Wikipedia ) The Observer pattern is a key pattern to complement the model\u2013view\u2013controller (MVC) architectural pattern. {lang=de}","title":"Observer"},{"location":"terms/term-observer/#beobachter-observer","text":"(Entwurfsmuster) \u201e... in dem ein Objekt eine Liste seiner abh\u00e4ngigen Strukturen, Observer genannt, f\u00fchrt und sie automatisch, in der Regel durch Aufruf einer ihrer Methoden, \u00fcber Zustands\u00e4nderungen benachrichtigt. Das Beobachtermuster ist ein wesentlicher Bestandteil des MVC-Architekturmusters (model-view-controller).\" (\u00dcbersetztes englisches Zitat aus Wikipedia )","title":"Beobachter / Observer"},{"location":"terms/term-open-close-principle/","text":"{lang=en} Open-Close-Principle (OCP) \u00b6 \"Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification\" (Bertrand Meyer, 1998). In plain words: To add functionality (extension) to a system, you should not need to modify existing code. Part of Robin Martins \"SOLID\" principles for object-oriented systems. Can be implemented in object oriented languages by interface inheritance, in a more general way as plugins . {lang=de} Open-Close-Prinzip (OCP) \u00b6 Softwareentit\u00e4ten (Klassen, Module, Funktionen usw.) sollten f\u00fcr Erweiterungen offen, aber f\u00fcr Modifikationen geschlossen sein (Bertrand Meyer, 1998). Einfach gesagt: Um eine Funktionalit\u00e4t zu einem System hinzuzuf\u00fcgen (Erweiterung), sollte keine Modifikation des vorhandenen Codes erforderlich sein. Teil der \u201eSOLID-\"Prinzipien von Robin Martins f\u00fcr objektorientierte Systeme. Kann in objektorientierten Sprachen durch Schnittstellenvererbung, allgemeiner als Plugins , implementiert werden.","title":"Term open close principle"},{"location":"terms/term-open-close-principle/#open-close-principle-ocp","text":"\"Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification\" (Bertrand Meyer, 1998). In plain words: To add functionality (extension) to a system, you should not need to modify existing code. Part of Robin Martins \"SOLID\" principles for object-oriented systems. Can be implemented in object oriented languages by interface inheritance, in a more general way as plugins . {lang=de}","title":"Open-Close-Principle (OCP)"},{"location":"terms/term-open-close-principle/#open-close-prinzip-ocp","text":"Softwareentit\u00e4ten (Klassen, Module, Funktionen usw.) sollten f\u00fcr Erweiterungen offen, aber f\u00fcr Modifikationen geschlossen sein (Bertrand Meyer, 1998). Einfach gesagt: Um eine Funktionalit\u00e4t zu einem System hinzuzuf\u00fcgen (Erweiterung), sollte keine Modifikation des vorhandenen Codes erforderlich sein. Teil der \u201eSOLID-\"Prinzipien von Robin Martins f\u00fcr objektorientierte Systeme. Kann in objektorientierten Sprachen durch Schnittstellenvererbung, allgemeiner als Plugins , implementiert werden.","title":"Open-Close-Prinzip (OCP)"},{"location":"terms/term-operability-quality-attribute/","text":"{lang=en} Operability Quality Attribute \u00b6 Degree to which a product or system has attributes that make it easy to operate and control. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Bedienbarkeit \u00b6 Ma\u00df, in dem ein Produkt oder System Eigenschaften aufweist, die es einfach bedien- und steuerbar machen. Teilmerkmal von: Benutzerfreundlichkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term operability quality attribute"},{"location":"terms/term-operability-quality-attribute/#operability-quality-attribute","text":"Degree to which a product or system has attributes that make it easy to operate and control. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Operability Quality Attribute"},{"location":"terms/term-operability-quality-attribute/#qualitatsmerkmal-bedienbarkeit","text":"Ma\u00df, in dem ein Produkt oder System Eigenschaften aufweist, die es einfach bedien- und steuerbar machen. Teilmerkmal von: Benutzerfreundlichkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Bedienbarkeit"},{"location":"terms/term-owasp/","text":"{lang=en} OWASP \u00b6 The Open Web Application Security Project is a worldwide non-profit online organization founded 2001 for improving the security of software. It is a rich source for information and best practices in the field of web security. See https://www.owasp.org/ . The OWASP-Top-10 is a frequently referenced list of attack categories based on the projects data survey. Category: Security {lang=de} OWASP \u00b6 Das Open Web Application Security Project ist eine 2001 gegr\u00fcndete, weltweite, gemeinn\u00fctzige Onlineorganisation zur Verbesserung der Softwaresicherheit. Es ist eine reichhaltige Quelle f\u00fcr Informationen und beste Praktiken im Bereich Websicherheit. Siehe https://www.owasp.org/ . Die OWASP-Top-10 ist eine h\u00e4ufig angef\u00fchrte Liste von Angriffskategorien basierend auf der Datenerhebung des Projekts. Kategorie: Sicherheit","title":"Term owasp"},{"location":"terms/term-owasp/#owasp","text":"The Open Web Application Security Project is a worldwide non-profit online organization founded 2001 for improving the security of software. It is a rich source for information and best practices in the field of web security. See https://www.owasp.org/ . The OWASP-Top-10 is a frequently referenced list of attack categories based on the projects data survey. Category: Security {lang=de}","title":"OWASP"},{"location":"terms/term-owasp/#owasp_1","text":"Das Open Web Application Security Project ist eine 2001 gegr\u00fcndete, weltweite, gemeinn\u00fctzige Onlineorganisation zur Verbesserung der Softwaresicherheit. Es ist eine reichhaltige Quelle f\u00fcr Informationen und beste Praktiken im Bereich Websicherheit. Siehe https://www.owasp.org/ . Die OWASP-Top-10 ist eine h\u00e4ufig angef\u00fchrte Liste von Angriffskategorien basierend auf der Datenerhebung des Projekts. Kategorie: Sicherheit","title":"OWASP"},{"location":"terms/term-package-principles/","text":"{lang=en} Package Principles \u00b6 Fundamental principles for designing the structure of software systems ( Martin-2003 ): Reuse/Release Equivalence Principle (REP) Common Reuse Principle (CRP) Common Closure Principle (CCP) Acyclic Dependencies Principle (ADP) Stable Dependencies Principle (SDP) Stable Abstractions Principle (SAP) Robert C. Martin, who coined the \" SOLID \" acronym, also introduced the Package Principles and frequently reiterated both in conjunction. Whereas the SOLID Principles target the level of classes, the Package Principles target the level of larger components that contain multiple classes and might get deployed independently. Package- and SOLID Principles share the explicit goal of keeping software maintainable and avoiding the symptoms of degraded design: rigidity, fragility, immobility, and viscosity. While Martin expressed the Package Principles in terms of large-scale components, they apply at other scales as well. Their core are universal principles like low coupling, high cohesion, single responsibility, hierarchical (acyclic) decomposition, and the insight that meaningful dependencies go from specific/unstable concepts to more abstract/stable ones (which echoes the DIP ). Category: Design-Principle {lang=de} Packaging-Prinzipien \u00b6 Grunds\u00e4tze f\u00fcr die Gestaltung der Struktur von Softwaresystemen ( Martin-2003 ): Reuse-Release-Equivalence-Prinzip (REP) Common-Reuse-Prinzip (CRP) Common-Closure-Prinzip (CCP) Acyclic-Dependencies-Prinzip (ADP) Stable-Dependencies-Prinzip (SDP) Stable-Abstractions-Prinzip (SAP) Robert C. Martin, der das Akronym \u201e SOLID \" gepr\u00e4gt hat, hat auch die Packaging-Prinzipien eingef\u00fchrt und h\u00e4ufig beide zusammen angef\u00fchrt. W\u00e4hrend die SOLID-Prinzipien auf die Klassen-Ebene abzielen, beziehen sich die Packaging-Prinzipien auf die Ebene gr\u00f6\u00dferer Komponenten, die mehrere Klassen enthalten und eventuell unabh\u00e4ngig verteilt werden. Package- und SOLID-Prinzipien haben beide das ausdr\u00fcckliche Ziel, Software wartbar zu halten und die Anzeichen von schlechtem Design, Rigidit\u00e4t, Fragilit\u00e4t, Immobilit\u00e4t und Viskosit\u00e4t zu vermeiden. Martin hat die Packaging-Prinzipien zwar bezogen auf gro\u00dfe Komponenten formuliert, sie gelten jedoch auch f\u00fcr alle anderen Gr\u00f6\u00dfen. Ihr Kern sind universelle Prinzipien, wie lose Kopplung, eindeutige Verantwortung, hierarchische (azyklische) Zerlegung und die Erkenntnis, dass sinnvolle Abh\u00e4ngigkeiten von spezifischen/instabilen Konzepten zu abstrakteren/stabileren verlaufen (was sich im DIP wiederfindet). Kategorie: Entwurfsprinzip","title":"Term package principles"},{"location":"terms/term-package-principles/#package-principles","text":"Fundamental principles for designing the structure of software systems ( Martin-2003 ): Reuse/Release Equivalence Principle (REP) Common Reuse Principle (CRP) Common Closure Principle (CCP) Acyclic Dependencies Principle (ADP) Stable Dependencies Principle (SDP) Stable Abstractions Principle (SAP) Robert C. Martin, who coined the \" SOLID \" acronym, also introduced the Package Principles and frequently reiterated both in conjunction. Whereas the SOLID Principles target the level of classes, the Package Principles target the level of larger components that contain multiple classes and might get deployed independently. Package- and SOLID Principles share the explicit goal of keeping software maintainable and avoiding the symptoms of degraded design: rigidity, fragility, immobility, and viscosity. While Martin expressed the Package Principles in terms of large-scale components, they apply at other scales as well. Their core are universal principles like low coupling, high cohesion, single responsibility, hierarchical (acyclic) decomposition, and the insight that meaningful dependencies go from specific/unstable concepts to more abstract/stable ones (which echoes the DIP ). Category: Design-Principle {lang=de}","title":"Package Principles"},{"location":"terms/term-package-principles/#packaging-prinzipien","text":"Grunds\u00e4tze f\u00fcr die Gestaltung der Struktur von Softwaresystemen ( Martin-2003 ): Reuse-Release-Equivalence-Prinzip (REP) Common-Reuse-Prinzip (CRP) Common-Closure-Prinzip (CCP) Acyclic-Dependencies-Prinzip (ADP) Stable-Dependencies-Prinzip (SDP) Stable-Abstractions-Prinzip (SAP) Robert C. Martin, der das Akronym \u201e SOLID \" gepr\u00e4gt hat, hat auch die Packaging-Prinzipien eingef\u00fchrt und h\u00e4ufig beide zusammen angef\u00fchrt. W\u00e4hrend die SOLID-Prinzipien auf die Klassen-Ebene abzielen, beziehen sich die Packaging-Prinzipien auf die Ebene gr\u00f6\u00dferer Komponenten, die mehrere Klassen enthalten und eventuell unabh\u00e4ngig verteilt werden. Package- und SOLID-Prinzipien haben beide das ausdr\u00fcckliche Ziel, Software wartbar zu halten und die Anzeichen von schlechtem Design, Rigidit\u00e4t, Fragilit\u00e4t, Immobilit\u00e4t und Viskosit\u00e4t zu vermeiden. Martin hat die Packaging-Prinzipien zwar bezogen auf gro\u00dfe Komponenten formuliert, sie gelten jedoch auch f\u00fcr alle anderen Gr\u00f6\u00dfen. Ihr Kern sind universelle Prinzipien, wie lose Kopplung, eindeutige Verantwortung, hierarchische (azyklische) Zerlegung und die Erkenntnis, dass sinnvolle Abh\u00e4ngigkeiten von spezifischen/instabilen Konzepten zu abstrakteren/stabileren verlaufen (was sich im DIP wiederfindet). Kategorie: Entwurfsprinzip","title":"Packaging-Prinzipien"},{"location":"terms/term-pattern/","text":"{lang=en} Pattern \u00b6 A reusable or repeatable solution to a common problem in software design or architecture. See architecture pattern or design pattern . {lang=de} Muster \u00b6 Wiederverwendbare oder wiederholbare L\u00f6sung f\u00fcr ein g\u00e4ngiges Problem beim Softwareentwurf oder in der Softwarearchitektur. Siehe Architekturmuster oder Entwurfsmuster .","title":"Term pattern"},{"location":"terms/term-pattern/#pattern","text":"A reusable or repeatable solution to a common problem in software design or architecture. See architecture pattern or design pattern . {lang=de}","title":"Pattern"},{"location":"terms/term-pattern/#muster","text":"Wiederverwendbare oder wiederholbare L\u00f6sung f\u00fcr ein g\u00e4ngiges Problem beim Softwareentwurf oder in der Softwarearchitektur. Siehe Architekturmuster oder Entwurfsmuster .","title":"Muster"},{"location":"terms/term-perfect-forward-secrecy/","text":"{lang=en} Perfect Forward Secrecy \u00b6 Property of a cryptographic protocol were an attacker can't gain any information about short-term session keys by compromising long-term keys. Examples for protocols with perfect forward secrecy are TLS and OTR. If this feature is enabled for TLS and an attacker gains access to a servers private key, previously recorded communication sessions can still not be decrypted. Category: Security {lang=de} Perfect Forward Secrecy / Perfekte vorw\u00e4rts gerichtete Geheimhaltung \u00b6 Eigenschaft eines kryptografischen Protokolls, die darin besteht, dass ein Angreifer durch Kompromittierung von Langzeitschl\u00fcsseln keine Informationen \u00fcber Kurzzeit-Sitzungsschl\u00fcssel erhalten kann. Beispiele f\u00fcr Protokolle mit perfekter vorw\u00e4rts gerichteter Geheimhaltung sind TLS und OTR. Wenn diese Funktion f\u00fcr TLS aktiviert ist und ein Angreifer Zugriff auf den privaten Schl\u00fcssel erh\u00e4lt, k\u00f6nnen fr\u00fcher aufgezeichnete Kommunikationssitzungen dennoch nicht entschl\u00fcsselt werden. Kategorie: Sicherheit","title":"Term perfect forward secrecy"},{"location":"terms/term-perfect-forward-secrecy/#perfect-forward-secrecy","text":"Property of a cryptographic protocol were an attacker can't gain any information about short-term session keys by compromising long-term keys. Examples for protocols with perfect forward secrecy are TLS and OTR. If this feature is enabled for TLS and an attacker gains access to a servers private key, previously recorded communication sessions can still not be decrypted. Category: Security {lang=de}","title":"Perfect Forward Secrecy"},{"location":"terms/term-perfect-forward-secrecy/#perfect-forward-secrecy-perfekte-vorwarts-gerichtete-geheimhaltung","text":"Eigenschaft eines kryptografischen Protokolls, die darin besteht, dass ein Angreifer durch Kompromittierung von Langzeitschl\u00fcsseln keine Informationen \u00fcber Kurzzeit-Sitzungsschl\u00fcssel erhalten kann. Beispiele f\u00fcr Protokolle mit perfekter vorw\u00e4rts gerichteter Geheimhaltung sind TLS und OTR. Wenn diese Funktion f\u00fcr TLS aktiviert ist und ein Angreifer Zugriff auf den privaten Schl\u00fcssel erh\u00e4lt, k\u00f6nnen fr\u00fcher aufgezeichnete Kommunikationssitzungen dennoch nicht entschl\u00fcsselt werden. Kategorie: Sicherheit","title":"Perfect Forward Secrecy / Perfekte vorw\u00e4rts gerichtete Geheimhaltung"},{"location":"terms/term-performance-efficiency-quality-attribute/","text":"{lang=en} Performance Efficiency Quality Attribute \u00b6 Performance relative to the amount of resources used under stated conditions. Resources can include other software products, the software and hardware configuration of the system, and materials (e.g. print paper, storage media). Is composed of the following sub-characteristics: time behaviour , resource utilization , capacity . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Leistungseffizienz \u00b6 Leistung im Verh\u00e4ltnis zur Menge der unter angegebenen Bedingungen genutzten Ressourcen. Ressourcen k\u00f6nnen andere Softwareprodukte, die Software- und Hardwarekonfiguration des Systems und Materialien (z.B. Druckerpapier, Speichermedien) umfassen. Es besteht aus folgenden Teilmerkmalen: Zeitverhalten , Ressourcenverbrauch , Kapazit\u00e4t . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term performance efficiency quality attribute"},{"location":"terms/term-performance-efficiency-quality-attribute/#performance-efficiency-quality-attribute","text":"Performance relative to the amount of resources used under stated conditions. Resources can include other software products, the software and hardware configuration of the system, and materials (e.g. print paper, storage media). Is composed of the following sub-characteristics: time behaviour , resource utilization , capacity . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Performance Efficiency Quality Attribute"},{"location":"terms/term-performance-efficiency-quality-attribute/#qualitatsmerkmal-leistungseffizienz","text":"Leistung im Verh\u00e4ltnis zur Menge der unter angegebenen Bedingungen genutzten Ressourcen. Ressourcen k\u00f6nnen andere Softwareprodukte, die Software- und Hardwarekonfiguration des Systems und Materialien (z.B. Druckerpapier, Speichermedien) umfassen. Es besteht aus folgenden Teilmerkmalen: Zeitverhalten , Ressourcenverbrauch , Kapazit\u00e4t . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Leistungseffizienz"},{"location":"terms/term-perspective/","text":"{lang=en} Perspective \u00b6 A perspective is used to consider a set of related quality properties and concerns of a system. Architects apply perspectives iteratively to the system's architectural views in order to assess the effects of architectural design decisions across multiple viewpoints and architectural views . Rozanski+11 associates with the term perspective also activities, tactics, and guidelines that must be considered if a system should provide a set of related quality properties and suggests the following perspectives: Accessibility Availability and Resilience Development Resource Evolution Internationalization Location Performance and Scalability Regulation Security Usability {lang=de} Perspektive \u00b6 Eine Perspektive dient der Ber\u00fccksichtigung einer Reihe von zusammenh\u00e4ngenden Qualit\u00e4tseigenschaften und Belangen eines Systems. Architekten wenden Perspektiven iterativ auf die Architektursichten eines Systems an, um die Auswirkungen von Architekturentwurfsentscheidungen \u00fcber mehrere Blickwinkel und Architektursichten hinweg zu beurteilen. [Rozanski+11] verbindet mit dem Begriff Perspektive auch Aktivit\u00e4ten, Taktiken und Richtlinien, die zu ber\u00fccksichtigen sind, wenn ein System eine Reihe von zusammenh\u00e4ngenden Qualit\u00e4tseigenschaften erf\u00fcllen soll, und schl\u00e4gt folgende Perspektiven vor: Zug\u00e4nglichkeit Verf\u00fcgbarkeit und Resilienz Entwicklungsressource Weiterentwicklung Internationalisierung Standort Performance und Skalierbarkeit Regulierung Sicherheit Benutzerfreundlichkeit","title":"Term perspective"},{"location":"terms/term-perspective/#perspective","text":"A perspective is used to consider a set of related quality properties and concerns of a system. Architects apply perspectives iteratively to the system's architectural views in order to assess the effects of architectural design decisions across multiple viewpoints and architectural views . Rozanski+11 associates with the term perspective also activities, tactics, and guidelines that must be considered if a system should provide a set of related quality properties and suggests the following perspectives: Accessibility Availability and Resilience Development Resource Evolution Internationalization Location Performance and Scalability Regulation Security Usability {lang=de}","title":"Perspective"},{"location":"terms/term-perspective/#perspektive","text":"Eine Perspektive dient der Ber\u00fccksichtigung einer Reihe von zusammenh\u00e4ngenden Qualit\u00e4tseigenschaften und Belangen eines Systems. Architekten wenden Perspektiven iterativ auf die Architektursichten eines Systems an, um die Auswirkungen von Architekturentwurfsentscheidungen \u00fcber mehrere Blickwinkel und Architektursichten hinweg zu beurteilen. [Rozanski+11] verbindet mit dem Begriff Perspektive auch Aktivit\u00e4ten, Taktiken und Richtlinien, die zu ber\u00fccksichtigen sind, wenn ein System eine Reihe von zusammenh\u00e4ngenden Qualit\u00e4tseigenschaften erf\u00fcllen soll, und schl\u00e4gt folgende Perspektiven vor: Zug\u00e4nglichkeit Verf\u00fcgbarkeit und Resilienz Entwicklungsressource Weiterentwicklung Internationalisierung Standort Performance und Skalierbarkeit Regulierung Sicherheit Benutzerfreundlichkeit","title":"Perspektive"},{"location":"terms/term-pikachu/","text":"{lang=en} Pikachu \u00b6 A yellowish mouse-like character from the (quite famous) Pok\u00e9mon world . Actually, you don't need to know that. But it does not hurt either - and you might impress your kids with this knowledge... {lang=de} Pikachu \u00b6 Eine gelbliche maus\u00e4hnliche Figur aus der (recht ber\u00fchmten) Pok\u00e9mon-Welt . Das brauchen Sie eigentlich nicht zu wissen. Aber es schadet auch nicht -- und vielleicht beeindrucken Sie Ihre Kinder mit diesem Wissen...","title":"Term pikachu"},{"location":"terms/term-pikachu/#pikachu","text":"A yellowish mouse-like character from the (quite famous) Pok\u00e9mon world . Actually, you don't need to know that. But it does not hurt either - and you might impress your kids with this knowledge... {lang=de}","title":"Pikachu"},{"location":"terms/term-pikachu/#pikachu_1","text":"Eine gelbliche maus\u00e4hnliche Figur aus der (recht ber\u00fchmten) Pok\u00e9mon-Welt . Das brauchen Sie eigentlich nicht zu wissen. Aber es schadet auch nicht -- und vielleicht beeindrucken Sie Ihre Kinder mit diesem Wissen...","title":"Pikachu"},{"location":"terms/term-pipe/","text":"{lang=en} Pipe \u00b6 Connector in the pipes-and-filters architectural style that transfers streams or chunks of data from the output of one filter to the input of another filter without modifying values or order of data. {lang=de} Pipe \u00b6 Verbindung im \u201ePipes und Filter\"-Architekturstil, die Datenstr\u00f6me oder -bl\u00f6cke von der Ausgabe eines Filters zur Eingabe eines anderen Filters \u00fcbertr\u00e4gt, ohne Werte oder die Datenreihenfolge zu ver\u00e4ndern.","title":"Term pipe"},{"location":"terms/term-pipe/#pipe","text":"Connector in the pipes-and-filters architectural style that transfers streams or chunks of data from the output of one filter to the input of another filter without modifying values or order of data. {lang=de}","title":"Pipe"},{"location":"terms/term-pipe/#pipe_1","text":"Verbindung im \u201ePipes und Filter\"-Architekturstil, die Datenstr\u00f6me oder -bl\u00f6cke von der Ausgabe eines Filters zur Eingabe eines anderen Filters \u00fcbertr\u00e4gt, ohne Werte oder die Datenreihenfolge zu ver\u00e4ndern.","title":"Pipe"},{"location":"terms/term-pki/","text":"{lang=en} PKI \u00b6 Short for Public-Key-Infrastructure . A concept of managing digital certificates usually involving asymmetric cryptography . The term \"public\" refers most of the time to the used type of cryptographic key and not necessarily to infrastructure open to a public audience. To prevent semantic confusion the terms \"open PKI\" or \"closed PKI\" can be used, see Anderson, Chapter 21.4.5.7 PKI, page 672 . PKI is usually based on a CA or a Web-of-Trust . Category: Security {lang=de} PKI \u00b6 Abk\u00fcrzung von Public-Key-Infrastruktur. Ein Konzept zum Management von digitalen Zertifikaten, das \u00fcblicherweise asymmetrische Kryptographie nutzt. Der Begriff \u201epublic\" (\u00f6ffentlich) bezieht sich zumeist auf die Art des verwendeten Kryptographieschl\u00fcssels und nicht notwendigerweise auf eine \u00f6ffentlich zug\u00e4ngliche Infrastruktur. Zur Vermeidung von Begriffsverwirrungen kann \u201eoffene PKI\" oder \u201egeschlossene PKI\" verwendet werden, vgl. Anderson, Kapitel 21.4.5.7 PLI, Seite 672 . Eine PKI basiert in der Regel auf einer CA oder einem Netz des Vertrauens . Kategorie: Sicherheit","title":"Term pki"},{"location":"terms/term-pki/#pki","text":"Short for Public-Key-Infrastructure . A concept of managing digital certificates usually involving asymmetric cryptography . The term \"public\" refers most of the time to the used type of cryptographic key and not necessarily to infrastructure open to a public audience. To prevent semantic confusion the terms \"open PKI\" or \"closed PKI\" can be used, see Anderson, Chapter 21.4.5.7 PKI, page 672 . PKI is usually based on a CA or a Web-of-Trust . Category: Security {lang=de}","title":"PKI"},{"location":"terms/term-pki/#pki_1","text":"Abk\u00fcrzung von Public-Key-Infrastruktur. Ein Konzept zum Management von digitalen Zertifikaten, das \u00fcblicherweise asymmetrische Kryptographie nutzt. Der Begriff \u201epublic\" (\u00f6ffentlich) bezieht sich zumeist auf die Art des verwendeten Kryptographieschl\u00fcssels und nicht notwendigerweise auf eine \u00f6ffentlich zug\u00e4ngliche Infrastruktur. Zur Vermeidung von Begriffsverwirrungen kann \u201eoffene PKI\" oder \u201egeschlossene PKI\" verwendet werden, vgl. Anderson, Kapitel 21.4.5.7 PLI, Seite 672 . Eine PKI basiert in der Regel auf einer CA oder einem Netz des Vertrauens . Kategorie: Sicherheit","title":"PKI"},{"location":"terms/term-port/","text":"{lang=en} Port \u00b6 UML construct, used in component diagrams. An interface, defining a point of interaction of a component with its environment. {lang=de} Port \u00b6 UML-Konstrukt, das in Komponentendiagrammen verwendet wird. Eine Schnittstelle, die einen Punkt, an dem eine Komponente .anchor} mit ihrer Umgebung interagiert, definiert.","title":"Term port"},{"location":"terms/term-port/#port","text":"UML construct, used in component diagrams. An interface, defining a point of interaction of a component with its environment. {lang=de}","title":"Port"},{"location":"terms/term-port/#port_1","text":"UML-Konstrukt, das in Komponentendiagrammen verwendet wird. Eine Schnittstelle, die einen Punkt, an dem eine Komponente .anchor} mit ihrer Umgebung interagiert, definiert.","title":"Port"},{"location":"terms/term-portability-quality-attribute/","text":"{lang=en} Portability Quality Attribute \u00b6 Degree of effectiveness and efficiency with which a system, product or component can be transferred from one hardware, software or other operational or usage environment to another. Is composed of the following sub-characteristics: adaptability , installability , replaceability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Portierbarkeit \u00b6 Ma\u00df der Effektivit\u00e4t und Effizienz, mit dem ein System, ein Produkt oder eine Komponente von einer Hardware-, Software- oder sonstigen Betriebs- oder Nutzungsumgebung in eine andere \u00fcbertragen werden kann. Es besteht aus folgenden Teilmerkmalen: Adaptierbarkeit , Installierbarkeit , Austauschbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term portability quality attribute"},{"location":"terms/term-portability-quality-attribute/#portability-quality-attribute","text":"Degree of effectiveness and efficiency with which a system, product or component can be transferred from one hardware, software or other operational or usage environment to another. Is composed of the following sub-characteristics: adaptability , installability , replaceability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Portability Quality Attribute"},{"location":"terms/term-portability-quality-attribute/#qualitatsmerkmal-portierbarkeit","text":"Ma\u00df der Effektivit\u00e4t und Effizienz, mit dem ein System, ein Produkt oder eine Komponente von einer Hardware-, Software- oder sonstigen Betriebs- oder Nutzungsumgebung in eine andere \u00fcbertragen werden kann. Es besteht aus folgenden Teilmerkmalen: Adaptierbarkeit , Installierbarkeit , Austauschbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Portierbarkeit"},{"location":"terms/term-posa/","text":"{lang=en} POSA \u00b6 Pattern-oriented Software Architecture. Series of books on software architecture patterns. {lang=de} POSA \u00b6 Pattern-oriented Software Architecture. Buchreihe zu Softwarearchitekturmustern.","title":"Term posa"},{"location":"terms/term-posa/#posa","text":"Pattern-oriented Software Architecture. Series of books on software architecture patterns. {lang=de}","title":"POSA"},{"location":"terms/term-posa/#posa_1","text":"Pattern-oriented Software Architecture. Buchreihe zu Softwarearchitekturmustern.","title":"POSA"},{"location":"terms/term-principal/","text":"{lang=en} Principal \u00b6 Principals in a security context are entities which have been authenticated and can be assigned permissions to. A principal can be a user but for example also other services or a process running on a system. The term is used in the Java environment and throughout different authentication protocols (see GSSAPI RFC2744 or Kerberos RFC4121 ). Category: Security {lang=de} Principal \u00b6 Im Sicherheitskontext sind Principals Entit\u00e4ten, die authentifiziert wurden und denen Berechtigungen zugewiesen werden k\u00f6nnen. Principals k\u00f6nnen Benutzer, aber auch andere Dienste oder ein auf einem System laufender Prozess sein. Der Begriff wird in der Java-Umgebung und in verschiedenen Authentifizierungsprotokollen verwendet (siehe GSSAPI RFC2744 oder Kerberos RFC4121 ). Kategorie: Sicherheit","title":"Term principal"},{"location":"terms/term-principal/#principal","text":"Principals in a security context are entities which have been authenticated and can be assigned permissions to. A principal can be a user but for example also other services or a process running on a system. The term is used in the Java environment and throughout different authentication protocols (see GSSAPI RFC2744 or Kerberos RFC4121 ). Category: Security {lang=de}","title":"Principal"},{"location":"terms/term-principal/#principal_1","text":"Im Sicherheitskontext sind Principals Entit\u00e4ten, die authentifiziert wurden und denen Berechtigungen zugewiesen werden k\u00f6nnen. Principals k\u00f6nnen Benutzer, aber auch andere Dienste oder ein auf einem System laufender Prozess sein. Der Begriff wird in der Java-Umgebung und in verschiedenen Authentifizierungsprotokollen verwendet (siehe GSSAPI RFC2744 oder Kerberos RFC4121 ). Kategorie: Sicherheit","title":"Principal"},{"location":"terms/term-proxy/","text":"{lang=en} Proxy \u00b6 (Design pattern) \"A wrapper or agent object that is being called by the client to access the real serving object behind the scenes. Use of the proxy can simply be forwarding to the real object, or can provide additional logic. In the proxy extra functionality can be provided, for example caching when operations on the real object are resource intensive, or checking preconditions before operations on the real object are invoked. For the client, usage of a proxy object is similar to using the real object, because both implement the same interface.\" (quoted from Wikipedia ) {lang=de} Stellvertreter / Proxy \u00b6 (Entwurfsmuster) \u201eEin Wrapper oder Stellvertreterobjekt, das vom Client aufgerufen wird, um auf das reale Serving-Objekt im Hintergrund zuzugreifen. Die Funktion des Stellvertreters kann einfach in der Weiterleitung an das reale Objekt oder die Bereitstellung zus\u00e4tzlicher Logik sein. Im Stellvertreter kann eine zus\u00e4tzliche Funktionalit\u00e4t bereitgestellt werden, beispielsweise Caching, wenn die Operationen des realen Objekts ressourcenintensiv sind, oder \u00dcberpr\u00fcfung von Voraussetzungen vor dem Aufruf von Operationen des realen Objekts. F\u00fcr den Client ist die Verwendung eines Stellvertreterobjekts mit der Verwendung des realen Objekts vergleichbar, da beide die gleiche Schnittstelle implementieren.\" (\u00dcbersetztes englisches Zitat aus Wikipedia )","title":"Term proxy"},{"location":"terms/term-proxy/#proxy","text":"(Design pattern) \"A wrapper or agent object that is being called by the client to access the real serving object behind the scenes. Use of the proxy can simply be forwarding to the real object, or can provide additional logic. In the proxy extra functionality can be provided, for example caching when operations on the real object are resource intensive, or checking preconditions before operations on the real object are invoked. For the client, usage of a proxy object is similar to using the real object, because both implement the same interface.\" (quoted from Wikipedia ) {lang=de}","title":"Proxy"},{"location":"terms/term-proxy/#stellvertreter-proxy","text":"(Entwurfsmuster) \u201eEin Wrapper oder Stellvertreterobjekt, das vom Client aufgerufen wird, um auf das reale Serving-Objekt im Hintergrund zuzugreifen. Die Funktion des Stellvertreters kann einfach in der Weiterleitung an das reale Objekt oder die Bereitstellung zus\u00e4tzlicher Logik sein. Im Stellvertreter kann eine zus\u00e4tzliche Funktionalit\u00e4t bereitgestellt werden, beispielsweise Caching, wenn die Operationen des realen Objekts ressourcenintensiv sind, oder \u00dcberpr\u00fcfung von Voraussetzungen vor dem Aufruf von Operationen des realen Objekts. F\u00fcr den Client ist die Verwendung eines Stellvertreterobjekts mit der Verwendung des realen Objekts vergleichbar, da beide die gleiche Schnittstelle implementieren.\" (\u00dcbersetztes englisches Zitat aus Wikipedia )","title":"Stellvertreter / Proxy"},{"location":"terms/term-pseudo-randomness/","text":"{lang=en} Pseudo-Randomness \u00b6 Often used in conjunction with pseudo-random-number-generators. Gathering randomness with a high entropy is resource intensive and usually not required by many applications, cryptography left aside. To address this issue pseudo-random-generators are initialized with a seed of data and create random values based on this seed. The data will be generated by random, but will always be the same if the generator is initialized with an identical seed. This is called pseudo-randomness and is less performance intensive. Category: Security {lang=de} Pseudo-Zuf\u00e4lligkeit \u00b6 H\u00e4ufig in Verbindung mit Pseudozufallszahlengeneratoren verwendet. Die Erzeugung von Zuf\u00e4lligkeit mit hoher Entropie ist ressourcenintensiv und, abgesehen von Kryptographie, nicht f\u00fcr viele Anwendungen erforderlich. Zur Behebung dieses Problems werden Pseudozufallszahlengeneratoren mit einen Daten-Startwert initialisiert und erzeugen basierend auf diesem Startwert zuf\u00e4llige Werte. Die Daten werden zuf\u00e4llig erzeugt, aber sind immer gleich, wenn der Generator mit dem gleichen Startwert initialisiert wird. Dies wird als Pseudo-Zuf\u00e4lligkeit bezeichnet und ist weniger leistungsintensiv. Kategorie: Sicherheit","title":"Term pseudo randomness"},{"location":"terms/term-pseudo-randomness/#pseudo-randomness","text":"Often used in conjunction with pseudo-random-number-generators. Gathering randomness with a high entropy is resource intensive and usually not required by many applications, cryptography left aside. To address this issue pseudo-random-generators are initialized with a seed of data and create random values based on this seed. The data will be generated by random, but will always be the same if the generator is initialized with an identical seed. This is called pseudo-randomness and is less performance intensive. Category: Security {lang=de}","title":"Pseudo-Randomness"},{"location":"terms/term-pseudo-randomness/#pseudo-zufalligkeit","text":"H\u00e4ufig in Verbindung mit Pseudozufallszahlengeneratoren verwendet. Die Erzeugung von Zuf\u00e4lligkeit mit hoher Entropie ist ressourcenintensiv und, abgesehen von Kryptographie, nicht f\u00fcr viele Anwendungen erforderlich. Zur Behebung dieses Problems werden Pseudozufallszahlengeneratoren mit einen Daten-Startwert initialisiert und erzeugen basierend auf diesem Startwert zuf\u00e4llige Werte. Die Daten werden zuf\u00e4llig erzeugt, aber sind immer gleich, wenn der Generator mit dem gleichen Startwert initialisiert wird. Dies wird als Pseudo-Zuf\u00e4lligkeit bezeichnet und ist weniger leistungsintensiv. Kategorie: Sicherheit","title":"Pseudo-Zuf\u00e4lligkeit"},{"location":"terms/term-qualitative-evaluation/","text":"{lang=en} Qualitative Evaluation \u00b6 Finding risks concerning the desired quality attributes of a system. Analyzing or assessing if a system or its architecture can meet the desired or required quality goals. Instead of calculating or measuring certain characteristics of systems or architectures, qualitative evaluation is concerned with risks, trade-offs and sensitivity points. See also assessment . {lang=de} Qualitative Bewertung \u00b6 Erkennung von Risiken bez\u00fcglich der gew\u00fcnschten Qualit\u00e4tsmerkmale eines Systems. Analyse oder Beurteilung, ob ein System oder seine Architektur die gew\u00fcnschten oder geforderten Qualit\u00e4tsziele erreichen kann. Statt mit der Berechnung oder Messung bestimmter Eigenschaften von Systemen oder Architekturen befasst sich die qualitative Bewertung mit Risiken, Kompromissen und Sensitivit\u00e4tspunkten. Siehe auch Beurteilung .","title":"Term qualitative evaluation"},{"location":"terms/term-qualitative-evaluation/#qualitative-evaluation","text":"Finding risks concerning the desired quality attributes of a system. Analyzing or assessing if a system or its architecture can meet the desired or required quality goals. Instead of calculating or measuring certain characteristics of systems or architectures, qualitative evaluation is concerned with risks, trade-offs and sensitivity points. See also assessment . {lang=de}","title":"Qualitative Evaluation"},{"location":"terms/term-qualitative-evaluation/#qualitative-bewertung","text":"Erkennung von Risiken bez\u00fcglich der gew\u00fcnschten Qualit\u00e4tsmerkmale eines Systems. Analyse oder Beurteilung, ob ein System oder seine Architektur die gew\u00fcnschten oder geforderten Qualit\u00e4tsziele erreichen kann. Statt mit der Berechnung oder Messung bestimmter Eigenschaften von Systemen oder Architekturen befasst sich die qualitative Bewertung mit Risiken, Kompromissen und Sensitivit\u00e4tspunkten. Siehe auch Beurteilung .","title":"Qualitative Bewertung"},{"location":"terms/term-quality-attribute/","text":"{lang=en} Quality Attribute \u00b6 Software quality is the degree to which a system possesses the desired combination of attributes (see: software quality ). The Standard ISO-25010 defines the following quality attributes: Functional suitability Functional completeness Functional correctness Functional appropriateness Performance efficiency Time behaviour Resource utilization Capacity Compatibility Co-existence Interoperability Usability Appropriateness recognizability Learnability Operability User error protection User interface aesthetics Accessibility Reliability Availability Fault tolerance Recoverability Security Confidentiality Integrity Non-repudiation Accountability Authenticity Maintainability Modularity Reusability Analysability Modifiability Testability Portability Adaptability Installability Replaceability It's helpful to distinguish between: runtime quality attributes (which can be observed at execution time of the system), non-runtime quality attributes_ (which cannot be observed as the system executes) and business quality attributes (cost, schedule, marketability, appropriateness for organization) Examples of runtime quality attributes are functional suitability, performance efficiency, security, reliability, usability and interoperability. Examples of non-runtime quality attributes are modifiability, portability, reusability, integratability, and testability. {lang=de} Qualit\u00e4tsmerkmal \u00b6 Die Softwarequalit\u00e4t ist das Ma\u00df, in dem ein System die gew\u00fcnschte Kombination von Merkmalen besitzt. (Siehe: Softwarequalit\u00e4t ). In der ISO-25010 Norm sind folgende Qualit\u00e4tsmerkmale definiert: -- Funktionale Eignung -- Funktionale Vollst\u00e4ndigkeit, -- Funktionale Korrektheit -- Funktionale Angemessenheit -- Leistungseffizienz -- Zeitverhalten -- Ressourcenverbrauch -- Kapazit\u00e4t -- Kompatibilit\u00e4t -- Koexistenz -- Interoperabilit\u00e4t -- Benutzerfreundlichkeit -- Erkennbarkeit der Brauchbarkeit -- Erlernbarkeit -- Bedienbarkeit -- Schutz vor Fehlbedienung -- \u00c4sthetik der Benutzeroberfl\u00e4che -- Zug\u00e4nglichkeit -- Zuverl\u00e4ssigkeit -- Verf\u00fcgbarkeit -- Fehlertoleranz -- Wiederherstellbarkeit -- Sicherheit -- Vertraulichkeit -- Integrit\u00e4t -- Nichtabstreitbarkeit -- Verantwortlichkeit -- Authentifizierbarkeit -- Wartbarkeit -- Modularit\u00e4t -- Wiederverwendbarkeit -- Analysierbarkeit -- Modifizierbarkeit -- Testbarkeit -- Portierbarkeit -- Adaptierbarkeit -- Installierbarkeit -- Austauschbarkeit Es ist hilfreich, zwischen folgenden Merkmalen zu unterscheiden: Laufzeit-Qualit\u00e4tsmerkmalen (die w\u00e4hrend der Ausf\u00fchrungszeit des Systems beobachtet werden k\u00f6nnen), Nicht-Laufzeit-Qualit\u00e4tsmerkmalen (die w\u00e4hrend der Ausf\u00fchrung des Systems nicht beobachtet werden k\u00f6nnen) und Gesch\u00e4ftsqualit\u00e4tsmerkmalen (Kosten, Zeitplan, Marktf\u00e4higkeit, Eignung f\u00fcr Unternehmen) Beispiele f\u00fcr Laufzeit-Qualit\u00e4tsmerkmale sind funktionale Eignung, Leistungseffizienz, Sicherheit, Zuverl\u00e4ssigkeit, Benutzerfreundlichkeit und Interoperabilit\u00e4t. Beispiele f\u00fcr Nicht-Laufzeit-Qualit\u00e4tsmerkmale sind Modifizierbarkeit, Portierbarkeit, Wiederverwendbarkeit, Integrierbarkeit und Testbarkeit.","title":"Term quality attribute"},{"location":"terms/term-quality-attribute/#quality-attribute","text":"Software quality is the degree to which a system possesses the desired combination of attributes (see: software quality ). The Standard ISO-25010 defines the following quality attributes: Functional suitability Functional completeness Functional correctness Functional appropriateness Performance efficiency Time behaviour Resource utilization Capacity Compatibility Co-existence Interoperability Usability Appropriateness recognizability Learnability Operability User error protection User interface aesthetics Accessibility Reliability Availability Fault tolerance Recoverability Security Confidentiality Integrity Non-repudiation Accountability Authenticity Maintainability Modularity Reusability Analysability Modifiability Testability Portability Adaptability Installability Replaceability It's helpful to distinguish between: runtime quality attributes (which can be observed at execution time of the system), non-runtime quality attributes_ (which cannot be observed as the system executes) and business quality attributes (cost, schedule, marketability, appropriateness for organization) Examples of runtime quality attributes are functional suitability, performance efficiency, security, reliability, usability and interoperability. Examples of non-runtime quality attributes are modifiability, portability, reusability, integratability, and testability. {lang=de}","title":"Quality Attribute"},{"location":"terms/term-quality-attribute/#qualitatsmerkmal","text":"Die Softwarequalit\u00e4t ist das Ma\u00df, in dem ein System die gew\u00fcnschte Kombination von Merkmalen besitzt. (Siehe: Softwarequalit\u00e4t ). In der ISO-25010 Norm sind folgende Qualit\u00e4tsmerkmale definiert: -- Funktionale Eignung -- Funktionale Vollst\u00e4ndigkeit, -- Funktionale Korrektheit -- Funktionale Angemessenheit -- Leistungseffizienz -- Zeitverhalten -- Ressourcenverbrauch -- Kapazit\u00e4t -- Kompatibilit\u00e4t -- Koexistenz -- Interoperabilit\u00e4t -- Benutzerfreundlichkeit -- Erkennbarkeit der Brauchbarkeit -- Erlernbarkeit -- Bedienbarkeit -- Schutz vor Fehlbedienung -- \u00c4sthetik der Benutzeroberfl\u00e4che -- Zug\u00e4nglichkeit -- Zuverl\u00e4ssigkeit -- Verf\u00fcgbarkeit -- Fehlertoleranz -- Wiederherstellbarkeit -- Sicherheit -- Vertraulichkeit -- Integrit\u00e4t -- Nichtabstreitbarkeit -- Verantwortlichkeit -- Authentifizierbarkeit -- Wartbarkeit -- Modularit\u00e4t -- Wiederverwendbarkeit -- Analysierbarkeit -- Modifizierbarkeit -- Testbarkeit -- Portierbarkeit -- Adaptierbarkeit -- Installierbarkeit -- Austauschbarkeit Es ist hilfreich, zwischen folgenden Merkmalen zu unterscheiden: Laufzeit-Qualit\u00e4tsmerkmalen (die w\u00e4hrend der Ausf\u00fchrungszeit des Systems beobachtet werden k\u00f6nnen), Nicht-Laufzeit-Qualit\u00e4tsmerkmalen (die w\u00e4hrend der Ausf\u00fchrung des Systems nicht beobachtet werden k\u00f6nnen) und Gesch\u00e4ftsqualit\u00e4tsmerkmalen (Kosten, Zeitplan, Marktf\u00e4higkeit, Eignung f\u00fcr Unternehmen) Beispiele f\u00fcr Laufzeit-Qualit\u00e4tsmerkmale sind funktionale Eignung, Leistungseffizienz, Sicherheit, Zuverl\u00e4ssigkeit, Benutzerfreundlichkeit und Interoperabilit\u00e4t. Beispiele f\u00fcr Nicht-Laufzeit-Qualit\u00e4tsmerkmale sind Modifizierbarkeit, Portierbarkeit, Wiederverwendbarkeit, Integrierbarkeit und Testbarkeit.","title":"Qualit\u00e4tsmerkmal"},{"location":"terms/term-quality-characteristic/","text":"{lang=en} Quality Characteristic \u00b6 synonym: quality attribute . {lang=de} Qualit\u00e4tseigenschaft \u00b6 Synonym: Qualit\u00e4tsmerkmal .","title":"Term quality characteristic"},{"location":"terms/term-quality-characteristic/#quality-characteristic","text":"synonym: quality attribute . {lang=de}","title":"Quality Characteristic"},{"location":"terms/term-quality-characteristic/#qualitatseigenschaft","text":"Synonym: Qualit\u00e4tsmerkmal .","title":"Qualit\u00e4tseigenschaft"},{"location":"terms/term-quality-model/","text":"{lang=en} Quality Model \u00b6 (from ISO 25010) A model that defines quality characteristics that relate to static properties of software and dynamic properties of the computer system and software products. The quality model provides consistent terminology for specifying, measuring and evaluating system and software product quality. The scope of application of the quality models includes supporting specification and evaluation of software and software-intensive computer systems from different perspectives by those associated with their acquisition, requirements, development, use, evaluation, support, maintenance, quality assurance and control, and audit. {lang=de} Qualit\u00e4tsmodell \u00b6 (Aus ISO 25010) Ein Modell, das sich auf die statischen Eigenschaften von Software und die dynamischen Eigenschaften von Computersystemen und Softwareprodukten beziehende Qualit\u00e4tseigenschaften definiert. Das Qualit\u00e4tsmodell liefert eine konsistente Terminologie zur Spezifikation, Messung und Bewertung der System- und Softwareproduktqualit\u00e4t. Der Anwendungsumfang von Qualit\u00e4tsmodellen umfasst die Unterst\u00fctzung der Spezifikation und Bewertung von Software und softwareintensiven Computersystemen aus unterschiedlichen Perspektiven durch an ihrem Erwerb, ihren Anforderungen, ihrer Entwicklung, ihrer Nutzung, ihrer Bewertung, ihrem Support, ihrer Wartung, ihrer Qualit\u00e4tssicherung und -kontrolle sowie ihrem Audit beteiligte Personen.","title":"Term quality model"},{"location":"terms/term-quality-model/#quality-model","text":"(from ISO 25010) A model that defines quality characteristics that relate to static properties of software and dynamic properties of the computer system and software products. The quality model provides consistent terminology for specifying, measuring and evaluating system and software product quality. The scope of application of the quality models includes supporting specification and evaluation of software and software-intensive computer systems from different perspectives by those associated with their acquisition, requirements, development, use, evaluation, support, maintenance, quality assurance and control, and audit. {lang=de}","title":"Quality Model"},{"location":"terms/term-quality-model/#qualitatsmodell","text":"(Aus ISO 25010) Ein Modell, das sich auf die statischen Eigenschaften von Software und die dynamischen Eigenschaften von Computersystemen und Softwareprodukten beziehende Qualit\u00e4tseigenschaften definiert. Das Qualit\u00e4tsmodell liefert eine konsistente Terminologie zur Spezifikation, Messung und Bewertung der System- und Softwareproduktqualit\u00e4t. Der Anwendungsumfang von Qualit\u00e4tsmodellen umfasst die Unterst\u00fctzung der Spezifikation und Bewertung von Software und softwareintensiven Computersystemen aus unterschiedlichen Perspektiven durch an ihrem Erwerb, ihren Anforderungen, ihrer Entwicklung, ihrer Nutzung, ihrer Bewertung, ihrem Support, ihrer Wartung, ihrer Qualit\u00e4tssicherung und -kontrolle sowie ihrem Audit beteiligte Personen.","title":"Qualit\u00e4tsmodell"},{"location":"terms/term-quality-requirement/","text":"{lang=en} Quality Requirement \u00b6 Characteristic or attribute of a component of a system. Examples include runtime performance, safety, security, reliability or maintainability. See also software quality . {lang=de} Qualit\u00e4tsanforderung \u00b6 Eigenschaft oder Merkmal einer Komponente eines Systems. Beispiele sind Laufzeitleistung, Schutz, Sicherheit, Zuverl\u00e4ssigkeit oder Wartbarkeit. Siehe auch Softwarequalit\u00e4t .","title":"Term quality requirement"},{"location":"terms/term-quality-requirement/#quality-requirement","text":"Characteristic or attribute of a component of a system. Examples include runtime performance, safety, security, reliability or maintainability. See also software quality . {lang=de}","title":"Quality Requirement"},{"location":"terms/term-quality-requirement/#qualitatsanforderung","text":"Eigenschaft oder Merkmal einer Komponente eines Systems. Beispiele sind Laufzeitleistung, Schutz, Sicherheit, Zuverl\u00e4ssigkeit oder Wartbarkeit. Siehe auch Softwarequalit\u00e4t .","title":"Qualit\u00e4tsanforderung"},{"location":"terms/term-quality-tree/","text":"{lang=en} Quality Tree \u00b6 (syn: quality attribute utility tree). A hierarchical model to describe product quality: The root \"quality\" is hierarchically refined in areas or topics, which itself are refined again. Quality scenarios form the leaves of this tree. Standards for product quality, like ISO 25010 , propose generic quality trees. The quality of a specific system can be described by a specific quality tree (see the example below). {width=60%} {lang=de} Qualit\u00e4tsbaum \u00b6 (Syn.: Qualit\u00e4tsattributbaum). Ein hierarchisches Modell zur Beschreibung von Produktqualit\u00e4t: Die Wurzel \u201eQualit\u00e4t\" wird hierarchisch in Bereiche oder Themen verfeinert, welche wiederum verfeinert werden. Qualit\u00e4tsszenarien bilden die Bl\u00e4tter dieses Baums. Standards zu Produktqualit\u00e4t, wie [ISO 25010](#term-iso-25010, enthalten Vorschl\u00e4ge von allgemeinen Qualit\u00e4tsb\u00e4umen. Die Qualit\u00e4t eines spezifischen Systems kann mit einem spezifischen Qualit\u00e4tsbaum beschrieben werden (siehe nachfolgendes Beispiel). {width=\"3.5522911198600173in\" height=\"2.0834372265966756in\"} Beispiel eines Qualit\u00e4tsbaums","title":"Term quality tree"},{"location":"terms/term-quality-tree/#quality-tree","text":"(syn: quality attribute utility tree). A hierarchical model to describe product quality: The root \"quality\" is hierarchically refined in areas or topics, which itself are refined again. Quality scenarios form the leaves of this tree. Standards for product quality, like ISO 25010 , propose generic quality trees. The quality of a specific system can be described by a specific quality tree (see the example below). {width=60%} {lang=de}","title":"Quality Tree"},{"location":"terms/term-quality-tree/#qualitatsbaum","text":"(Syn.: Qualit\u00e4tsattributbaum). Ein hierarchisches Modell zur Beschreibung von Produktqualit\u00e4t: Die Wurzel \u201eQualit\u00e4t\" wird hierarchisch in Bereiche oder Themen verfeinert, welche wiederum verfeinert werden. Qualit\u00e4tsszenarien bilden die Bl\u00e4tter dieses Baums. Standards zu Produktqualit\u00e4t, wie [ISO 25010](#term-iso-25010, enthalten Vorschl\u00e4ge von allgemeinen Qualit\u00e4tsb\u00e4umen. Die Qualit\u00e4t eines spezifischen Systems kann mit einem spezifischen Qualit\u00e4tsbaum beschrieben werden (siehe nachfolgendes Beispiel). {width=\"3.5522911198600173in\" height=\"2.0834372265966756in\"} Beispiel eines Qualit\u00e4tsbaums","title":"Qualit\u00e4tsbaum"},{"location":"terms/term-quality/","text":"{lang=en} Quality \u00b6 see software quality and quality attributes . {lang=de} Qualit\u00e4t \u00b6 Siehe Softwarequalit\u00e4t und Qualit\u00e4tsmerkmale .","title":"Term quality"},{"location":"terms/term-quality/#quality","text":"see software quality and quality attributes . {lang=de}","title":"Quality"},{"location":"terms/term-quality/#qualitat","text":"Siehe Softwarequalit\u00e4t und Qualit\u00e4tsmerkmale .","title":"Qualit\u00e4t"},{"location":"terms/term-quantative-evaluation/","text":"{lang=en} Quantitative Evaluation \u00b6 (syn: quantative analysis): Measure or count values of software artifacts, e.g. coupling , cyclomatic complexity, size, test coverage. Metrics like these can help to identify critical parts or elements of systems. {lang=de} Quantitative Bewertung \u00b6 (Syn.: quantitative Analyse): Messung oder Z\u00e4hlung von Werten von Softwareartefakten, z.B. Kopplung , zyklomatische Komplexit\u00e4t, Gr\u00f6\u00dfe, Testabdeckung. Kennzahlen wie diese helfen bei der Identifizierung von kritischen Teilen oder Elementen von Systemen.","title":"Term quantative evaluation"},{"location":"terms/term-quantative-evaluation/#quantitative-evaluation","text":"(syn: quantative analysis): Measure or count values of software artifacts, e.g. coupling , cyclomatic complexity, size, test coverage. Metrics like these can help to identify critical parts or elements of systems. {lang=de}","title":"Quantitative Evaluation"},{"location":"terms/term-quantative-evaluation/#quantitative-bewertung","text":"(Syn.: quantitative Analyse): Messung oder Z\u00e4hlung von Werten von Softwareartefakten, z.B. Kopplung , zyklomatische Komplexit\u00e4t, Gr\u00f6\u00dfe, Testabdeckung. Kennzahlen wie diese helfen bei der Identifizierung von kritischen Teilen oder Elementen von Systemen.","title":"Quantitative Bewertung"},{"location":"terms/term-randomness/","text":"{lang=en} Randomness \u00b6 See Entropy or Pseudo-Randomness . Category: Security {lang=de} Zuf\u00e4lligkeit \u00b6 Siehe Entropie oder Pseudo-Zuf\u00e4lligkeit . Kategorie: Sicherheit","title":"Term randomness"},{"location":"terms/term-randomness/#randomness","text":"See Entropy or Pseudo-Randomness . Category: Security {lang=de}","title":"Randomness"},{"location":"terms/term-randomness/#zufalligkeit","text":"Siehe Entropie oder Pseudo-Zuf\u00e4lligkeit . Kategorie: Sicherheit","title":"Zuf\u00e4lligkeit"},{"location":"terms/term-rationale/","text":"{lang=en} Rationale \u00b6 Explanation of the reasoning or arguments that lie behind an architecture decision. {lang=de} Begr\u00fcndung \u00b6 Erl\u00e4uterung der Argumentation oder Argumente, die einer Architekturentscheidung zugrunde liegen.","title":"Term rationale"},{"location":"terms/term-rationale/#rationale","text":"Explanation of the reasoning or arguments that lie behind an architecture decision. {lang=de}","title":"Rationale"},{"location":"terms/term-rationale/#begrundung","text":"Erl\u00e4uterung der Argumentation oder Argumente, die einer Architekturentscheidung zugrunde liegen.","title":"Begr\u00fcndung"},{"location":"terms/term-rbac/","text":"{lang=en} RBAC (Role Based Access Control) \u00b6 A role is a fixed set of permissions usually assigned to a group of principals . This allows a Role-Based-Access-Control usually to be implemented more efficient than an ACL based system and makes for example deputy arrangements possible. Category: Security {lang=de} RBAC (Role Based Access Control / Rollenbasierte Zugriffskontrolle) \u00b6 Eine Rolle ist ein fester Satz an Berechtigungen, der \u00fcblicherweise einer Gruppe von Principals zugewiesen wird. So kann eine rollenbasierte Zugriffskontrolle zumeist effizienter umgesetzt werden als ein ACL -basiertes System und erm\u00f6glicht beispielsweise Vertreterreglungen. Kategorie: Sicherheit","title":"Term rbac"},{"location":"terms/term-rbac/#rbac-role-based-access-control","text":"A role is a fixed set of permissions usually assigned to a group of principals . This allows a Role-Based-Access-Control usually to be implemented more efficient than an ACL based system and makes for example deputy arrangements possible. Category: Security {lang=de}","title":"RBAC (Role Based Access Control)"},{"location":"terms/term-rbac/#rbac-role-based-access-control-rollenbasierte-zugriffskontrolle","text":"Eine Rolle ist ein fester Satz an Berechtigungen, der \u00fcblicherweise einer Gruppe von Principals zugewiesen wird. So kann eine rollenbasierte Zugriffskontrolle zumeist effizienter umgesetzt werden als ein ACL -basiertes System und erm\u00f6glicht beispielsweise Vertreterreglungen. Kategorie: Sicherheit","title":"RBAC (Role Based Access Control / Rollenbasierte Zugriffskontrolle)"},{"location":"terms/term-recoverability-quality-attribute/","text":"{lang=en} Recoverability Quality Attribute \u00b6 Degree to which, in the event of an interruption or a failure, a product or system can recover the data directly affected and re-establish the desired state of the system. Is a sub-characteristic of: reliability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Wiederherstellbarkeit \u00b6 Ma\u00df, in dem ein Produkt oder System im Falle einer Unterbrechung oder eines Fehlers die direkt betroffenen Daten und den gew\u00fcnschten Systemstatus wiederherstellen kann. Teilmerkmal von: Zuverl\u00e4ssigkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term recoverability quality attribute"},{"location":"terms/term-recoverability-quality-attribute/#recoverability-quality-attribute","text":"Degree to which, in the event of an interruption or a failure, a product or system can recover the data directly affected and re-establish the desired state of the system. Is a sub-characteristic of: reliability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Recoverability Quality Attribute"},{"location":"terms/term-recoverability-quality-attribute/#qualitatsmerkmal-wiederherstellbarkeit","text":"Ma\u00df, in dem ein Produkt oder System im Falle einer Unterbrechung oder eines Fehlers die direkt betroffenen Daten und den gew\u00fcnschten Systemstatus wiederherstellen kann. Teilmerkmal von: Zuverl\u00e4ssigkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Wiederherstellbarkeit"},{"location":"terms/term-redesign/","text":"{lang=en} Redesign \u00b6 The alteration of software units in such a way that they fulfill a similar purpose as before, but in a different manner and possibly by different means. Often mistakenly called refactoring. {lang=de} Redesign \u00b6 Die Ver\u00e4nderung von Softwareeinheiten, so dass sie den gleichen Zweck wie zuvor erf\u00fcllen, jedoch auf andere Weise und gegebenenfalls mit anderen Mitteln. H\u00e4ufig f\u00e4lschlicherweise Refactoring genannt.","title":"Term redesign"},{"location":"terms/term-redesign/#redesign","text":"The alteration of software units in such a way that they fulfill a similar purpose as before, but in a different manner and possibly by different means. Often mistakenly called refactoring. {lang=de}","title":"Redesign"},{"location":"terms/term-redesign/#redesign_1","text":"Die Ver\u00e4nderung von Softwareeinheiten, so dass sie den gleichen Zweck wie zuvor erf\u00fcllen, jedoch auf andere Weise und gegebenenfalls mit anderen Mitteln. H\u00e4ufig f\u00e4lschlicherweise Refactoring genannt.","title":"Redesign"},{"location":"terms/term-refactoring/","text":"{lang=en} Refactoring \u00b6 A term denoting the improvement of software units by changing their internal structure without changing the behavior. (see \u201cRefactoring is the process of changing a software system in such a way that it does not alter the external behavior of the code yet improves the internal structure.\u201d Refactoring, Martin Fowler, 1999 Not to be confused with re design {lang=de} Refactoring \u00b6 Begriff zur Bezeichnung der Verbesserung von Softwareeinheiten durch Ver\u00e4nderung ihrer internen Struktur ohne Ver\u00e4nderung des Verhaltens. (vgl.: Refactoring ist der Prozess der \u00c4nderung eines Softwaresystems, so dass sich das externe Verhalten des Codes nicht ver\u00e4ndert, aber die interne Struktur verbessert wird.) Refactoring, Martin Fowler, 1999 Nicht mit Re design zu verwechseln.","title":"Term refactoring"},{"location":"terms/term-refactoring/#refactoring","text":"A term denoting the improvement of software units by changing their internal structure without changing the behavior. (see \u201cRefactoring is the process of changing a software system in such a way that it does not alter the external behavior of the code yet improves the internal structure.\u201d Refactoring, Martin Fowler, 1999 Not to be confused with re design {lang=de}","title":"Refactoring"},{"location":"terms/term-refactoring/#refactoring_1","text":"Begriff zur Bezeichnung der Verbesserung von Softwareeinheiten durch Ver\u00e4nderung ihrer internen Struktur ohne Ver\u00e4nderung des Verhaltens. (vgl.: Refactoring ist der Prozess der \u00c4nderung eines Softwaresystems, so dass sich das externe Verhalten des Codes nicht ver\u00e4ndert, aber die interne Struktur verbessert wird.) Refactoring, Martin Fowler, 1999 Nicht mit Re design zu verwechseln.","title":"Refactoring"},{"location":"terms/term-registry/","text":"{lang=en} Registry \u00b6 \"A well-known object that other objects can use to find common objects and services.\" (quoted from PoEAA ). Often implemented as a Singleton (also a well-known design pattern.) {lang=de} Registry \u00b6 \u201eSehr bekanntes Objekt, das andere Objekte nutzen k\u00f6nnen, um gemeinsame Objekte und Dienste zu finden.\" (\u00dcbersetztes englisches Zitat PoEAA ). H\u00e4ufig als Singleton (auch ein bekanntes Entwurfsmuster) implementiert.","title":"Term registry"},{"location":"terms/term-registry/#registry","text":"\"A well-known object that other objects can use to find common objects and services.\" (quoted from PoEAA ). Often implemented as a Singleton (also a well-known design pattern.) {lang=de}","title":"Registry"},{"location":"terms/term-registry/#registry_1","text":"\u201eSehr bekanntes Objekt, das andere Objekte nutzen k\u00f6nnen, um gemeinsame Objekte und Dienste zu finden.\" (\u00dcbersetztes englisches Zitat PoEAA ). H\u00e4ufig als Singleton (auch ein bekanntes Entwurfsmuster) implementiert.","title":"Registry"},{"location":"terms/term-relationship/","text":"{lang=en} Relationship \u00b6 Generic term denoting some kind of dependency between elements of an architecture. Different types of relationship are used within architectures, e.g. call, notification, ownership, containment, creation or inheritance. {lang=de} Beziehung \u00b6 Allgemeiner Begriff zur Bezeichnung einer Art von Abh\u00e4ngigkeit zwischen Elementen einer Architektur. In Architekturen werden unterschiedliche Arten von Beziehungen verwendet, z.B. Aufruf, Benachrichtigung, Besitz, Containment, Erzeugung oder Vererbung.","title":"Term relationship"},{"location":"terms/term-relationship/#relationship","text":"Generic term denoting some kind of dependency between elements of an architecture. Different types of relationship are used within architectures, e.g. call, notification, ownership, containment, creation or inheritance. {lang=de}","title":"Relationship"},{"location":"terms/term-relationship/#beziehung","text":"Allgemeiner Begriff zur Bezeichnung einer Art von Abh\u00e4ngigkeit zwischen Elementen einer Architektur. In Architekturen werden unterschiedliche Arten von Beziehungen verwendet, z.B. Aufruf, Benachrichtigung, Besitz, Containment, Erzeugung oder Vererbung.","title":"Beziehung"},{"location":"terms/term-reliability-quality-attribute/","text":"{lang=en} Reliability Quality Attribute \u00b6 Degree to which a system, product or component performs specified functions under specified conditions for a specified period of time. Is composed of the following sub-characteristics: maturity , availability , fault tolerance , recoverability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Zuverl\u00e4ssigkeit \u00b6 Ma\u00df, in dem ein System, ein Produkt oder eine Komponente unter spezifizierten Bedingungen f\u00fcr eine spezifizierte Zeitdauer spezifizierte Funktionen erf\u00fcllt. Es besteht aus folgenden Teilmerkmalen: Reifegrad , Verf\u00fcgbarkeit , Fehlertoleranz , Wiederherstellbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term reliability quality attribute"},{"location":"terms/term-reliability-quality-attribute/#reliability-quality-attribute","text":"Degree to which a system, product or component performs specified functions under specified conditions for a specified period of time. Is composed of the following sub-characteristics: maturity , availability , fault tolerance , recoverability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Reliability Quality Attribute"},{"location":"terms/term-reliability-quality-attribute/#qualitatsmerkmal-zuverlassigkeit","text":"Ma\u00df, in dem ein System, ein Produkt oder eine Komponente unter spezifizierten Bedingungen f\u00fcr eine spezifizierte Zeitdauer spezifizierte Funktionen erf\u00fcllt. Es besteht aus folgenden Teilmerkmalen: Reifegrad , Verf\u00fcgbarkeit , Fehlertoleranz , Wiederherstellbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Zuverl\u00e4ssigkeit"},{"location":"terms/term-replaceability-quality-attribute/","text":"{lang=en} Replaceability Quality Attribute \u00b6 Degree to which a product can replace another specified software product for the same purpose in the same environment. Is a sub-characteristic of: portability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Austauschbarkeit \u00b6 Ma\u00df, in dem ein Produkt ein anderes spezifiziertes Softwareprodukt f\u00fcr den gleichen Zweck in der gleichen Umgebung ersetzen kann. Teilmerkmal von: Portierbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term replaceability quality attribute"},{"location":"terms/term-replaceability-quality-attribute/#replaceability-quality-attribute","text":"Degree to which a product can replace another specified software product for the same purpose in the same environment. Is a sub-characteristic of: portability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Replaceability Quality Attribute"},{"location":"terms/term-replaceability-quality-attribute/#qualitatsmerkmal-austauschbarkeit","text":"Ma\u00df, in dem ein Produkt ein anderes spezifiziertes Softwareprodukt f\u00fcr den gleichen Zweck in der gleichen Umgebung ersetzen kann. Teilmerkmal von: Portierbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Austauschbarkeit"},{"location":"terms/term-repository/","text":"{lang=en} Repository \u00b6 In architecture documentation: A place where artifacts are stored before an automatic build process collects them into one consistent document. In Domain-Driven Design : Repository is a building block of Domain-Driven Design . A repository hides technical details of the infrastructure layer to the domain layer. Repositories return entities that are persisted in the database. {lang=de} Ablage \u00b6 In der Architekturdokumentation: Ort, an dem Artefakte gespeichert werden, ehe sie durch einen automatischen Prozess zu einem konsistenten Dokument zusammengestellt werden. Im Domain-Driven Design : Die Ablage ist ein Baustein des Domain-Driven Designs . Eine Ablage verbirgt technische Details der Infrastrukturschicht vor der Dom\u00e4nenschicht. Ablagen geben Entit\u00e4ten zur\u00fcck, die in der Datenbank bestehen.","title":"Term repository"},{"location":"terms/term-repository/#repository","text":"In architecture documentation: A place where artifacts are stored before an automatic build process collects them into one consistent document. In Domain-Driven Design : Repository is a building block of Domain-Driven Design . A repository hides technical details of the infrastructure layer to the domain layer. Repositories return entities that are persisted in the database. {lang=de}","title":"Repository"},{"location":"terms/term-repository/#ablage","text":"In der Architekturdokumentation: Ort, an dem Artefakte gespeichert werden, ehe sie durch einen automatischen Prozess zu einem konsistenten Dokument zusammengestellt werden. Im Domain-Driven Design : Die Ablage ist ein Baustein des Domain-Driven Designs . Eine Ablage verbirgt technische Details der Infrastrukturschicht vor der Dom\u00e4nenschicht. Ablagen geben Entit\u00e4ten zur\u00fcck, die in der Datenbank bestehen.","title":"Ablage"},{"location":"terms/term-resource-utilization-quality-attribute/","text":"{lang=en} Resource Utilization Quality Attribute \u00b6 Degree to which the amounts and types of resources used by a product or system, when performing its functions, meet requirements. Is a sub-characteristic of: performance efficiency . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Ressourcenverbrauch \u00b6 Ma\u00df, in dem die von einem Produkt oder einem System bei der Erf\u00fcllung seiner Funktionen verbrauchten Mengen und Arten von Ressourcen den Anforderungen entsprechen. Teilmerkmal von: Leistungseffizienz . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term resource utilization quality attribute"},{"location":"terms/term-resource-utilization-quality-attribute/#resource-utilization-quality-attribute","text":"Degree to which the amounts and types of resources used by a product or system, when performing its functions, meet requirements. Is a sub-characteristic of: performance efficiency . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Resource Utilization Quality Attribute"},{"location":"terms/term-resource-utilization-quality-attribute/#qualitatsmerkmal-ressourcenverbrauch","text":"Ma\u00df, in dem die von einem Produkt oder einem System bei der Erf\u00fcllung seiner Funktionen verbrauchten Mengen und Arten von Ressourcen den Anforderungen entsprechen. Teilmerkmal von: Leistungseffizienz . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Ressourcenverbrauch"},{"location":"terms/term-reusability-quality-attribute/","text":"{lang=en} Reusability Quality Attribute \u00b6 Degree to which an asset can be used in more than one system, or in building other assets. Is a sub-characteristic of: maintainability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Wiederverwendbarkeit \u00b6 Ma\u00df, in dem ein Asset in mehr als einem System oder zum Aufbau anderer Assets genutzt werden kann. Teilmerkmal von: Wartbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term reusability quality attribute"},{"location":"terms/term-reusability-quality-attribute/#reusability-quality-attribute","text":"Degree to which an asset can be used in more than one system, or in building other assets. Is a sub-characteristic of: maintainability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Reusability Quality Attribute"},{"location":"terms/term-reusability-quality-attribute/#qualitatsmerkmal-wiederverwendbarkeit","text":"Ma\u00df, in dem ein Asset in mehr als einem System oder zum Aufbau anderer Assets genutzt werden kann. Teilmerkmal von: Wartbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Wiederverwendbarkeit"},{"location":"terms/term-reuse-release-equivalence-principle/","text":"{lang=en} Reuse/Release Equivalence Principle \u00b6 A fundamental principle for designing the structure of software systems (also see Package Principles ). It demands that large components are \"released\" and under version control, in particular if the system uses them from multiple points. Even if we don't release them publicly, we should extract such components from the system and provide them through an external dependency manager with proper version control. The REP contains two different insights: On the large scale, modularity and low coupling require more than type separation. Reusability of components (even if all \"reuse\" is internal) translates to overall maintainability . Category: Design-Principle {lang=de} Reuse-Release-Equivalence-Prinzip \u00b6 Ein Grundsatz f\u00fcr die Gestaltung der Struktur von Softwaresystemen (siehe auch Packaging-Prinzipien ). Es verlangt einen \u201eRelease\" und eine Versionskontrolle von gro\u00dfen Komponenten, insbesondere wenn das System sie von mehreren Punkten aus nutzt. Auch wenn sie nicht \u00f6ffentlich herausgegeben werden, sollten diese Komponenten aus dem System extrahiert werden und durch einen externen Dependency Manager eine ordnungsgem\u00e4\u00dfe Versionskontrolle erhalten. Das REP enth\u00e4lt zwei unterschiedliche Erkenntnisse: Im gro\u00dfen Ma\u00dfstab erfordern Modularit\u00e4t und lose Kopplung mehr als Typentrennung. Die Wiederverwendbarkeit von Komponenten (auch wenn die gesamte \u201eWiederverwendung\" intern erfolgt) f\u00fchrt zu allgemeiner Wartbarkeit . Kategorie: Entwurfsprinzip","title":"Term reuse release equivalence principle"},{"location":"terms/term-reuse-release-equivalence-principle/#reuserelease-equivalence-principle","text":"A fundamental principle for designing the structure of software systems (also see Package Principles ). It demands that large components are \"released\" and under version control, in particular if the system uses them from multiple points. Even if we don't release them publicly, we should extract such components from the system and provide them through an external dependency manager with proper version control. The REP contains two different insights: On the large scale, modularity and low coupling require more than type separation. Reusability of components (even if all \"reuse\" is internal) translates to overall maintainability . Category: Design-Principle {lang=de}","title":"Reuse/Release Equivalence Principle"},{"location":"terms/term-reuse-release-equivalence-principle/#reuse-release-equivalence-prinzip","text":"Ein Grundsatz f\u00fcr die Gestaltung der Struktur von Softwaresystemen (siehe auch Packaging-Prinzipien ). Es verlangt einen \u201eRelease\" und eine Versionskontrolle von gro\u00dfen Komponenten, insbesondere wenn das System sie von mehreren Punkten aus nutzt. Auch wenn sie nicht \u00f6ffentlich herausgegeben werden, sollten diese Komponenten aus dem System extrahiert werden und durch einen externen Dependency Manager eine ordnungsgem\u00e4\u00dfe Versionskontrolle erhalten. Das REP enth\u00e4lt zwei unterschiedliche Erkenntnisse: Im gro\u00dfen Ma\u00dfstab erfordern Modularit\u00e4t und lose Kopplung mehr als Typentrennung. Die Wiederverwendbarkeit von Komponenten (auch wenn die gesamte \u201eWiederverwendung\" intern erfolgt) f\u00fchrt zu allgemeiner Wartbarkeit . Kategorie: Entwurfsprinzip","title":"Reuse-Release-Equivalence-Prinzip"},{"location":"terms/term-risk/","text":"{lang=en} Risk \u00b6 Simply said, a risk is the possibility that a problem occurs. A risk involves uncertainty about the effects, consequences or implications of an activity or decision, usually with a negative connotation concerning a certain value (such as health, money, or qualities of a system like availability or security).","title":"Term risk"},{"location":"terms/term-risk/#risk","text":"Simply said, a risk is the possibility that a problem occurs. A risk involves uncertainty about the effects, consequences or implications of an activity or decision, usually with a negative connotation concerning a certain value (such as health, money, or qualities of a system like availability or security).","title":"Risk"},{"location":"terms/term-rm-odp/","text":"{lang=en} RM/ODP \u00b6 The Reference Model for Open Distributed Processing is an (abstract) metamodel for documentation of information systems. Defined in ISO/IEC 10746. {lang=de} RM/ODP \u00b6 Reference Model for Open Distributed Processing . (Abstraktes) Metamodell zur Dokumentation von Informationssystemen. Definiert in ISO/IEC 10746.","title":"Term rm odp"},{"location":"terms/term-rm-odp/#rmodp","text":"The Reference Model for Open Distributed Processing is an (abstract) metamodel for documentation of information systems. Defined in ISO/IEC 10746. {lang=de}","title":"RM/ODP"},{"location":"terms/term-rm-odp/#rmodp_1","text":"Reference Model for Open Distributed Processing . (Abstraktes) Metamodell zur Dokumentation von Informationssystemen. Definiert in ISO/IEC 10746.","title":"RM/ODP"},{"location":"terms/term-round-trip-engineering/","text":"{lang=en} Round-trip Engineering \u00b6 \"Concept of being able to make any kind of change to a model as well as to the code generated from that model. The changes always propagate bidirectional and both artifacts are always consistent.\" (quoted from Wikipedia ) D> ###### Comment (Gernot Starke) D> In my personal opinion, it does not work in practical situations, only in hello-world-like scenarios, as the inverse abstraction (from low-level sourcecode to higher-level architectural elements) usually involves design-decisions and cannot realistically be automated. D> D> ###### Comment (Matthias Bohlen) D>Recently I have seen code that originated from DDD where reverse engineering did indeed work. {lang=de} Round-Trip-Engineering \u00b6 \u201eKonzept, gem\u00e4\u00df dem an einem Modell sowie am aus diesem Modell generierten Code alle Arten von \u00c4nderungen vorgenommen werden k\u00f6nnen. Die \u00c4nderungen werden immer in beide Richtungen propagiert und beide Artefakte sind immer konsistent.\" (\u00dcbersetztes englisches Zitat aus Wikipedia ). D> ###### Anmerkung (Gernot Starke) D> Meiner pers\u00f6nlichen Meinung nach funktioniert dies in der Praxis D> nicht, sondern nur in \u201eHello-World\"-\u00e4hnlichen Szenarien, da die D> umgekehrte Abstraktion (von Quellcode niedriger Ebene zu D> Architekturelementen h\u00f6herer Ebene) in der Regel D> Entwurfsentscheidungen erfordert und realistischerweise nicht D> automatisiert werden kann. D> ###### Anmerkung (Matthias Bohlen) D> Vor Kurzem habe ich aus DDD stammenden Code gesehen, bei dem Reverse D> Engineering tats\u00e4chlich funktioniert hat.","title":"Term round trip engineering"},{"location":"terms/term-round-trip-engineering/#round-trip-engineering","text":"\"Concept of being able to make any kind of change to a model as well as to the code generated from that model. The changes always propagate bidirectional and both artifacts are always consistent.\" (quoted from Wikipedia ) D> ###### Comment (Gernot Starke) D> In my personal opinion, it does not work in practical situations, only in hello-world-like scenarios, as the inverse abstraction (from low-level sourcecode to higher-level architectural elements) usually involves design-decisions and cannot realistically be automated. D> D> ###### Comment (Matthias Bohlen) D>Recently I have seen code that originated from DDD where reverse engineering did indeed work. {lang=de}","title":"Round-trip Engineering"},{"location":"terms/term-round-trip-engineering/#round-trip-engineering_1","text":"\u201eKonzept, gem\u00e4\u00df dem an einem Modell sowie am aus diesem Modell generierten Code alle Arten von \u00c4nderungen vorgenommen werden k\u00f6nnen. Die \u00c4nderungen werden immer in beide Richtungen propagiert und beide Artefakte sind immer konsistent.\" (\u00dcbersetztes englisches Zitat aus Wikipedia ). D> ###### Anmerkung (Gernot Starke) D> Meiner pers\u00f6nlichen Meinung nach funktioniert dies in der Praxis D> nicht, sondern nur in \u201eHello-World\"-\u00e4hnlichen Szenarien, da die D> umgekehrte Abstraktion (von Quellcode niedriger Ebene zu D> Architekturelementen h\u00f6herer Ebene) in der Regel D> Entwurfsentscheidungen erfordert und realistischerweise nicht D> automatisiert werden kann. D> ###### Anmerkung (Matthias Bohlen) D> Vor Kurzem habe ich aus DDD stammenden Code gesehen, bei dem Reverse D> Engineering tats\u00e4chlich funktioniert hat.","title":"Round-Trip-Engineering"},{"location":"terms/term-ruby/","text":"{lang=en} Ruby \u00b6 A wonderful programming language. Category: Programming {lang=de} Ruby \u00b6 Eine gro\u00dfartige Programmiersprache. Kategorie: Programmierung","title":"Term ruby"},{"location":"terms/term-ruby/#ruby","text":"A wonderful programming language. Category: Programming {lang=de}","title":"Ruby"},{"location":"terms/term-ruby/#ruby_1","text":"Eine gro\u00dfartige Programmiersprache. Kategorie: Programmierung","title":"Ruby"},{"location":"terms/term-runtime-view/","text":"{lang=en} Runtime View \u00b6 Shows the cooperation or collaboration of building blocks (respectively their instances) at runtime in concrete scenarios. Should refer to elements of the Building Block View . Could for example (but doesn't need to) be expressed in UML sequence or activity diagrams. {lang=de} Laufzeitsicht \u00b6 Zeigt die Zusammenarbeit von Bausteinen (beziehungsweise ihrer Instanzen) zur Laufzeit in konkreten Szenarien. Sollte auf Elemente der Bausteinsicht verweisen. Kann beispielsweise (muss aber nicht) als UML-Sequenz oder Aktivit\u00e4tsdiagramm ausgedr\u00fcckt werden.","title":"Term runtime view"},{"location":"terms/term-runtime-view/#runtime-view","text":"Shows the cooperation or collaboration of building blocks (respectively their instances) at runtime in concrete scenarios. Should refer to elements of the Building Block View . Could for example (but doesn't need to) be expressed in UML sequence or activity diagrams. {lang=de}","title":"Runtime View"},{"location":"terms/term-runtime-view/#laufzeitsicht","text":"Zeigt die Zusammenarbeit von Bausteinen (beziehungsweise ihrer Instanzen) zur Laufzeit in konkreten Szenarien. Sollte auf Elemente der Bausteinsicht verweisen. Kann beispielsweise (muss aber nicht) als UML-Sequenz oder Aktivit\u00e4tsdiagramm ausgedr\u00fcckt werden.","title":"Laufzeitsicht"},{"location":"terms/term-scenario/","text":"{lang=en} Scenario \u00b6 Quality scenarios document required quality attributes. They \"... are brief narratives of expected or anticipated use of a system from both development and end-user viewpoints.\" ( Kazman+1996 ) Thus, they help to describe required or desired qualities of a system in pragmatic and informal manner, yet making the abstract notion of \u201cquality\u201d concrete and tangible. {width=50%} Event/stimulus: Any condition or event arriving at the system System (or part of the system) is stimulated by the event. Response: The activity undertaken after the arrival of the stimulus. Metric (response measure): The response should be measurable in some fashion. Usually scenarios are differentiated into: Usage scenarios (application scenarios) Change scenarios (modification or growth scenarios) Failure scenarios (boundary, stress, or exploratory scenarios) {lang=de} Szenario \u00b6 Qualit\u00e4tsszenarien dokumentieren die vorgegebenen Qualit\u00e4tsmerkmale. Sie helfen bei der Beschreibung der vorgegebenen oder gew\u00fcnschten Eigenschaften eines Systems auf pragmatische und informelle Weise und machen dennoch das abstrakte Konzept \u201eQualit\u00e4t\" konkret und greifbar. {width=\"3.0416666666666665in\" height=\"1.9483333333333333in\"} Allgemeine Form eines (Qualit\u00e4ts-) Szenarios Ereignis/Stimulus: Jegliche Bedingungen oder Ereignisse, die das System erreichen System (oder ein Teil des Systems) wird durch Ereignis stimuliert. Antwort: Nach Eintreffen des Stimulus durchgef\u00fchrte Aktivit\u00e4t. Kennzahl (Antwortma\u00df): Die Antwort sollte auf irgendeine Weise gemessen werden.","title":"Term scenario"},{"location":"terms/term-scenario/#scenario","text":"Quality scenarios document required quality attributes. They \"... are brief narratives of expected or anticipated use of a system from both development and end-user viewpoints.\" ( Kazman+1996 ) Thus, they help to describe required or desired qualities of a system in pragmatic and informal manner, yet making the abstract notion of \u201cquality\u201d concrete and tangible. {width=50%} Event/stimulus: Any condition or event arriving at the system System (or part of the system) is stimulated by the event. Response: The activity undertaken after the arrival of the stimulus. Metric (response measure): The response should be measurable in some fashion. Usually scenarios are differentiated into: Usage scenarios (application scenarios) Change scenarios (modification or growth scenarios) Failure scenarios (boundary, stress, or exploratory scenarios) {lang=de}","title":"Scenario"},{"location":"terms/term-scenario/#szenario","text":"Qualit\u00e4tsszenarien dokumentieren die vorgegebenen Qualit\u00e4tsmerkmale. Sie helfen bei der Beschreibung der vorgegebenen oder gew\u00fcnschten Eigenschaften eines Systems auf pragmatische und informelle Weise und machen dennoch das abstrakte Konzept \u201eQualit\u00e4t\" konkret und greifbar. {width=\"3.0416666666666665in\" height=\"1.9483333333333333in\"} Allgemeine Form eines (Qualit\u00e4ts-) Szenarios Ereignis/Stimulus: Jegliche Bedingungen oder Ereignisse, die das System erreichen System (oder ein Teil des Systems) wird durch Ereignis stimuliert. Antwort: Nach Eintreffen des Stimulus durchgef\u00fchrte Aktivit\u00e4t. Kennzahl (Antwortma\u00df): Die Antwort sollte auf irgendeine Weise gemessen werden.","title":"Szenario"},{"location":"terms/term-sdl/","text":"{lang=en} SDL \u00b6 A Secure-Development-Lifecycle is a companies usual software development process with additional practices of engineering secure software. This involves for example code reviews, architectural risk analyses, black/whitebox and penetration testing and many more additions. The whole lifecycle of an application should be covered by the SDL, beginning with the first requirements engineering tasks and ending with feedback from operating the released software by fixing security issues. See McGraw \"An Enterprise Software Security Program\", page 239 . Category: Security {lang=de} SDL \u00b6 Ein Secure-Development-Lifecycle ist der \u00fcbliche Softwareentwicklungsprozess eines Unternehmens mit zus\u00e4tzlichen Praktiken zur Entwicklung von sicherer Software. Er umfasst beispielsweise Code-Reviews, Architektur-Risikoanalysen, Black-/Whitebox und Penetrationstests und zahlreiche weitere Erg\u00e4nzungen. Der SDL sollte den gesamten Lebenszyklus einer Anwendung, von den ersten Anforderungsmanagementaufgaben bis zum Feedback aus dem Betrieb der herausgegebenen Software durch Behebung von Sicherheitsproblemen, abdecken. Siehe McGraw \u201eAn Enterprise Software Security Program\", Seite 239 . Kategorie: Sicherheit","title":"Term sdl"},{"location":"terms/term-sdl/#sdl","text":"A Secure-Development-Lifecycle is a companies usual software development process with additional practices of engineering secure software. This involves for example code reviews, architectural risk analyses, black/whitebox and penetration testing and many more additions. The whole lifecycle of an application should be covered by the SDL, beginning with the first requirements engineering tasks and ending with feedback from operating the released software by fixing security issues. See McGraw \"An Enterprise Software Security Program\", page 239 . Category: Security {lang=de}","title":"SDL"},{"location":"terms/term-sdl/#sdl_1","text":"Ein Secure-Development-Lifecycle ist der \u00fcbliche Softwareentwicklungsprozess eines Unternehmens mit zus\u00e4tzlichen Praktiken zur Entwicklung von sicherer Software. Er umfasst beispielsweise Code-Reviews, Architektur-Risikoanalysen, Black-/Whitebox und Penetrationstests und zahlreiche weitere Erg\u00e4nzungen. Der SDL sollte den gesamten Lebenszyklus einer Anwendung, von den ersten Anforderungsmanagementaufgaben bis zum Feedback aus dem Betrieb der herausgegebenen Software durch Behebung von Sicherheitsproblemen, abdecken. Siehe McGraw \u201eAn Enterprise Software Security Program\", Seite 239 . Kategorie: Sicherheit","title":"SDL"},{"location":"terms/term-security-goals/","text":"{lang=en} Security Goals \u00b6 The goals are the key point of information security. They are a basic set of information attributes which can be fulfilled or not depending on a systems architecture and processes. The most common agreed set of security goals is the so called \"CIA triad\": Confidentiality Integrity Availability The \"Reference Model of Information Assuarance and Security\" (RIMAS) extends this list by Accountability, Auditability, Authenticity/Trustworthiness, Non-repudiation and Privacy. These are typical examples for non-functional requirements related to security. See \"What is Security Engineering - Definitions\", page 11 or RMIAS . Category: Security {lang=de} Schutzziele \u00b6 Die Ziele sind der Hauptpunkt von Informationssicherheit. Sie sind ein Basissatz an Informationseigenschaften, die abh\u00e4ngig von der Architektur und den Prozessen eines Systems erf\u00fcllt werden k\u00f6nnen oder nicht. Die g\u00e4ngigste Gruppe von vereinbarten Schutzzielen ist die sogenannte \u201eCIA-Triade\": Vertraulichkeit (Confidentiality) Integrit\u00e4t (Integrity) Verf\u00fcgbarkeit (Availability) Das \u201eReference Model of Information Assurance and Security\" (RIMAS) erweitert diese Liste um Verantwortlichkeit, Pr\u00fcfbarkeit, Authentifizierbarkeit/Vertrauensw\u00fcrdigkeit, Nichtabstreitbarkeit und Datenschutz. Dies sind die typischen Beispiele f\u00fcr nichtfunktionale Anforderungen in Zusammenhang mit Sicherheit. Siehe \u201eWhat is Security Engineering - Definitions\", Seite 11 oder RMIAS . Kategorie: Sicherheit","title":"Term security goals"},{"location":"terms/term-security-goals/#security-goals","text":"The goals are the key point of information security. They are a basic set of information attributes which can be fulfilled or not depending on a systems architecture and processes. The most common agreed set of security goals is the so called \"CIA triad\": Confidentiality Integrity Availability The \"Reference Model of Information Assuarance and Security\" (RIMAS) extends this list by Accountability, Auditability, Authenticity/Trustworthiness, Non-repudiation and Privacy. These are typical examples for non-functional requirements related to security. See \"What is Security Engineering - Definitions\", page 11 or RMIAS . Category: Security {lang=de}","title":"Security Goals"},{"location":"terms/term-security-goals/#schutzziele","text":"Die Ziele sind der Hauptpunkt von Informationssicherheit. Sie sind ein Basissatz an Informationseigenschaften, die abh\u00e4ngig von der Architektur und den Prozessen eines Systems erf\u00fcllt werden k\u00f6nnen oder nicht. Die g\u00e4ngigste Gruppe von vereinbarten Schutzzielen ist die sogenannte \u201eCIA-Triade\": Vertraulichkeit (Confidentiality) Integrit\u00e4t (Integrity) Verf\u00fcgbarkeit (Availability) Das \u201eReference Model of Information Assurance and Security\" (RIMAS) erweitert diese Liste um Verantwortlichkeit, Pr\u00fcfbarkeit, Authentifizierbarkeit/Vertrauensw\u00fcrdigkeit, Nichtabstreitbarkeit und Datenschutz. Dies sind die typischen Beispiele f\u00fcr nichtfunktionale Anforderungen in Zusammenhang mit Sicherheit. Siehe \u201eWhat is Security Engineering - Definitions\", Seite 11 oder RMIAS . Kategorie: Sicherheit","title":"Schutzziele"},{"location":"terms/term-security-quality-attribute/","text":"{lang=en} Security Quality Attribute \u00b6 Degree to which a product or system protects information and data so that persons or other products or systems have the degree of data access appropriate to their types and levels of authorization. Is composed of the following sub-characteristics: confidentiality , integrity , non-repudiation , accountability , authenticity . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Sicherheit \u00b6 Ma\u00df, in dem ein Produkt oder System Informationen und Daten sch\u00fctzt, so dass Personen oder andere Produkte oder Systeme den ihren Berechtigungsarten oder -stufen entsprechenden Datenzugriffsgrad haben. Es besteht aus folgenden Teilmerkmalen: Vertraulichkeit , Integrit\u00e4t , Nichtabstreitbarkeit , Verantwortlichkeit , Authentifizierbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term security quality attribute"},{"location":"terms/term-security-quality-attribute/#security-quality-attribute","text":"Degree to which a product or system protects information and data so that persons or other products or systems have the degree of data access appropriate to their types and levels of authorization. Is composed of the following sub-characteristics: confidentiality , integrity , non-repudiation , accountability , authenticity . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Security Quality Attribute"},{"location":"terms/term-security-quality-attribute/#qualitatsmerkmal-sicherheit","text":"Ma\u00df, in dem ein Produkt oder System Informationen und Daten sch\u00fctzt, so dass Personen oder andere Produkte oder Systeme den ihren Berechtigungsarten oder -stufen entsprechenden Datenzugriffsgrad haben. Es besteht aus folgenden Teilmerkmalen: Vertraulichkeit , Integrit\u00e4t , Nichtabstreitbarkeit , Verantwortlichkeit , Authentifizierbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Sicherheit"},{"location":"terms/term-self-contained-system/","text":"{lang=en} Self Contained System (SCS) \u00b6 An architectural style, similar to Microservices . To quote from the site scs-architecture.org : \"The Self-contained System (SCS) approach is an architecture that focuses on a separation of the functionality into many independent systems, making the complete system a collaboration of many smaller software systems. This avoids the problem of large monoliths that grow constantly and eventually become unmaintainable\" {lang=de} SCS (Self Contained System) \u00b6 Ein Architekturstil, \u00e4hnlich wie Microservices . Auf scs-architecture.org hei\u00dft es hierzu (\u00fcbersetzt aus dem Englischen): \u201eDer Ansatz Self-contained System (SCS) ist eine Architektur, die sich auf eine Trennung der Funktionalit\u00e4t in zahlreiche unabh\u00e4ngige Systeme konzentriert, so dass das vollst\u00e4ndige System eine Zusammenarbeit vieler kleinerer Softwaresysteme ist. Dies verhindert das Problem gro\u00dfer Monolithen, die stetig wachsen und irgendwann nicht mehr wartbar sind.\"","title":"Term self contained system"},{"location":"terms/term-self-contained-system/#self-contained-system-scs","text":"An architectural style, similar to Microservices . To quote from the site scs-architecture.org : \"The Self-contained System (SCS) approach is an architecture that focuses on a separation of the functionality into many independent systems, making the complete system a collaboration of many smaller software systems. This avoids the problem of large monoliths that grow constantly and eventually become unmaintainable\" {lang=de}","title":"Self Contained System (SCS)"},{"location":"terms/term-self-contained-system/#scs-self-contained-system","text":"Ein Architekturstil, \u00e4hnlich wie Microservices . Auf scs-architecture.org hei\u00dft es hierzu (\u00fcbersetzt aus dem Englischen): \u201eDer Ansatz Self-contained System (SCS) ist eine Architektur, die sich auf eine Trennung der Funktionalit\u00e4t in zahlreiche unabh\u00e4ngige Systeme konzentriert, so dass das vollst\u00e4ndige System eine Zusammenarbeit vieler kleinerer Softwaresysteme ist. Dies verhindert das Problem gro\u00dfer Monolithen, die stetig wachsen und irgendwann nicht mehr wartbar sind.\"","title":"SCS (Self Contained System)"},{"location":"terms/term-sensitivity-point/","text":"{lang=en} Sensitivity Point \u00b6 (in qualitative evaluation like ATAM): Element of the architecture or system influencing several quality attributes. For example, if one component is responsible for both runtime performance and robustness, that component is a sensitivity point. Casually said, if you mess up a sensitivity point, you will most often have more than one problem. {lang=de} Sensitivit\u00e4tspunkt \u00b6 (In der qualitativen Bewertung, wie ATAM): Element des Architektursystems, das mehrere Qualit\u00e4tsmerkmale beeinflusst. Wenn beispielsweise eine Komponente sowohl f\u00fcr die Laufzeitleistung als auch die Robustheit verantwortlich ist, ist diese Komponente ein Sensitivit\u00e4tspunkt. Salopp gesagt, wenn man einen Sensitivit\u00e4tspunkt in den Sand setzt, hat man zumeist mehr als ein Problem.","title":"Term sensitivity point"},{"location":"terms/term-sensitivity-point/#sensitivity-point","text":"(in qualitative evaluation like ATAM): Element of the architecture or system influencing several quality attributes. For example, if one component is responsible for both runtime performance and robustness, that component is a sensitivity point. Casually said, if you mess up a sensitivity point, you will most often have more than one problem. {lang=de}","title":"Sensitivity Point"},{"location":"terms/term-sensitivity-point/#sensitivitatspunkt","text":"(In der qualitativen Bewertung, wie ATAM): Element des Architektursystems, das mehrere Qualit\u00e4tsmerkmale beeinflusst. Wenn beispielsweise eine Komponente sowohl f\u00fcr die Laufzeitleistung als auch die Robustheit verantwortlich ist, ist diese Komponente ein Sensitivit\u00e4tspunkt. Salopp gesagt, wenn man einen Sensitivit\u00e4tspunkt in den Sand setzt, hat man zumeist mehr als ein Problem.","title":"Sensitivit\u00e4tspunkt"},{"location":"terms/term-separation-of-concern/","text":"{lang=en} Separation of Concerns (SoC) \u00b6 Any element of an architecture should have exclusivity and singularity of responsibility and purpose: No element should share the responsibilities of another element or contain unrelated responsibilities. Another definition is \"breaking down a system into elements that overlap as little as possible.\" Famous Edgar Dijkstra said in 1974: \u201cSeparation of concerns ... even if not perfectly possible, is the only available technique for effective ordering of one\u2019s thoughts\u201d. Similar to the Single Responsibility Principle . {lang=de} Separation of concern (SoC) \u00b6 Jedes Element einer Architektur sollte \u00fcber Exklusivit\u00e4t und Einzigartigkeit von Verantwortlichkeit und Zweck verf\u00fcgen: Kein Element sollte die Verantwortlichkeiten eines anderen Elements teilen oder unverbundene Verantwortlichkeiten enthalten. Eine weitere Definition lautet: Aufteilung eines Systems in Elemente, die sich m\u00f6glichst wenig \u00fcberschneiden. Der ber\u00fchmte Edgar Dijkstra sagte 1974: \u201eSeparation of concerns ... ist, auch wenn es nicht perfekt m\u00f6glich ist, die einzig verf\u00fcgbare Technik zur effektiven Ordnung der eigenen Gedanken.\" \u00c4hnlich wie das Single-Responsibility-Prinzip .","title":"Term separation of concern"},{"location":"terms/term-separation-of-concern/#separation-of-concerns-soc","text":"Any element of an architecture should have exclusivity and singularity of responsibility and purpose: No element should share the responsibilities of another element or contain unrelated responsibilities. Another definition is \"breaking down a system into elements that overlap as little as possible.\" Famous Edgar Dijkstra said in 1974: \u201cSeparation of concerns ... even if not perfectly possible, is the only available technique for effective ordering of one\u2019s thoughts\u201d. Similar to the Single Responsibility Principle . {lang=de}","title":"Separation of Concerns (SoC)"},{"location":"terms/term-separation-of-concern/#separation-of-concern-soc","text":"Jedes Element einer Architektur sollte \u00fcber Exklusivit\u00e4t und Einzigartigkeit von Verantwortlichkeit und Zweck verf\u00fcgen: Kein Element sollte die Verantwortlichkeiten eines anderen Elements teilen oder unverbundene Verantwortlichkeiten enthalten. Eine weitere Definition lautet: Aufteilung eines Systems in Elemente, die sich m\u00f6glichst wenig \u00fcberschneiden. Der ber\u00fchmte Edgar Dijkstra sagte 1974: \u201eSeparation of concerns ... ist, auch wenn es nicht perfekt m\u00f6glich ist, die einzig verf\u00fcgbare Technik zur effektiven Ordnung der eigenen Gedanken.\" \u00c4hnlich wie das Single-Responsibility-Prinzip .","title":"Separation of concern (SoC)"},{"location":"terms/term-sequence-diagram/","text":"{lang=en} Sequence Diagram \u00b6 Type of diagram to illustrate how elements of an architecture interact to achieve a certain scenario. It shows the sequence (flow) of messages between elements. As parallel vertical lines it shows the lifespan of objects or components, horizontal lines depict interactions between these components. See the following example. {lang=de} Sequenzdiagramm \u00b6 Diagrammart zur Illustration, wie Elemente einer Architektur interagieren, um ein bestimmtes Szenario zu erreichen. Es zeigt die Sequenz (Abfolge) von Mitteilungen zwischen Elementen. Die parallelen vertikalen Linien stellen die Lebensspanne von Objekten oder Komponenten dar, und die horizontalen Linien zeigen die Interaktionen zwischen diesen Komponenten. Siehe folgendes Beispiel.","title":"Term sequence diagram"},{"location":"terms/term-sequence-diagram/#sequence-diagram","text":"Type of diagram to illustrate how elements of an architecture interact to achieve a certain scenario. It shows the sequence (flow) of messages between elements. As parallel vertical lines it shows the lifespan of objects or components, horizontal lines depict interactions between these components. See the following example. {lang=de}","title":"Sequence Diagram"},{"location":"terms/term-sequence-diagram/#sequenzdiagramm","text":"Diagrammart zur Illustration, wie Elemente einer Architektur interagieren, um ein bestimmtes Szenario zu erreichen. Es zeigt die Sequenz (Abfolge) von Mitteilungen zwischen Elementen. Die parallelen vertikalen Linien stellen die Lebensspanne von Objekten oder Komponenten dar, und die horizontalen Linien zeigen die Interaktionen zwischen diesen Komponenten. Siehe folgendes Beispiel.","title":"Sequenzdiagramm"},{"location":"terms/term-service-ddd/","text":"{lang=en} Service (DDD) \u00b6 Service is a building block of Domain-Driven Design . Services implement logic or processes of the business domain that are not executed by entities alone. A service is stateless and the parameters and return values of its operations are entities , aggregates and value objects . {lang=de} Service (DDD) \u00b6 Ein Service ist ein Baustein des Domain-Driven Designs . Services implementieren eine Logik oder Prozesse der Gesch\u00e4ftsdom\u00e4ne, die nicht von Entit\u00e4ten alleine ausgef\u00fchrt werden. Ein Service ist zustandslos, und die Parameter und R\u00fcckgabewerte seiner Operationen sind Entit\u00e4ten , Aggregate und Wertobjekte .","title":"Term service ddd"},{"location":"terms/term-service-ddd/#service-ddd","text":"Service is a building block of Domain-Driven Design . Services implement logic or processes of the business domain that are not executed by entities alone. A service is stateless and the parameters and return values of its operations are entities , aggregates and value objects . {lang=de}","title":"Service (DDD)"},{"location":"terms/term-service-ddd/#service-ddd_1","text":"Ein Service ist ein Baustein des Domain-Driven Designs . Services implementieren eine Logik oder Prozesse der Gesch\u00e4ftsdom\u00e4ne, die nicht von Entit\u00e4ten alleine ausgef\u00fchrt werden. Ein Service ist zustandslos, und die Parameter und R\u00fcckgabewerte seiner Operationen sind Entit\u00e4ten , Aggregate und Wertobjekte .","title":"Service (DDD)"},{"location":"terms/term-service/","text":"{lang=en} Service \u00b6 t.b.d. {lang=de} Dienst \u00b6 zu erledigen","title":"Term service"},{"location":"terms/term-service/#service","text":"t.b.d. {lang=de}","title":"Service"},{"location":"terms/term-service/#dienst","text":"zu erledigen","title":"Dienst"},{"location":"terms/term-signature/","text":"{lang=en} Signature \u00b6 Signature of function or method: See function signature Digital signature: Method for verifying the authenticity of data or documents.","title":"Term signature"},{"location":"terms/term-signature/#signature","text":"Signature of function or method: See function signature Digital signature: Method for verifying the authenticity of data or documents.","title":"Signature"},{"location":"terms/term-single-responsibility-principle/","text":"{lang=en} Single Responsibility Principle (SRP) \u00b6 Each element within a system or architecture should have a single responsibility, and that all its functions or services should be aligned with that responsibility. Cohesion is sometimes considered to be associated with the SRP. {lang=de} Single-Responsibility-Prinzip (SRP) \u00b6 Jedes Element in einem System oder einer Architektur sollte eine einzige Verantwortlichkeit haben, und alle seine Funktionen oder Dienste sollten auf diese Verantwortlichkeit abgestimmt sein. Koh\u00e4sion wird manchmal als gleichbedeutend mit SRP angesehen.","title":"Term single responsibility principle"},{"location":"terms/term-single-responsibility-principle/#single-responsibility-principle-srp","text":"Each element within a system or architecture should have a single responsibility, and that all its functions or services should be aligned with that responsibility. Cohesion is sometimes considered to be associated with the SRP. {lang=de}","title":"Single Responsibility Principle (SRP)"},{"location":"terms/term-single-responsibility-principle/#single-responsibility-prinzip-srp","text":"Jedes Element in einem System oder einer Architektur sollte eine einzige Verantwortlichkeit haben, und alle seine Funktionen oder Dienste sollten auf diese Verantwortlichkeit abgestimmt sein. Koh\u00e4sion wird manchmal als gleichbedeutend mit SRP angesehen.","title":"Single-Responsibility-Prinzip (SRP)"},{"location":"terms/term-singleton/","text":"{lang=en} Singleton \u00b6 \"Design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system.\" (quoted from Wikipedia . {lang=de} Singleton \u00b6 \u201eEntwurfsmuster, das die Instanziierung einer Klasse auf ein Objekt beschr\u00e4nkt. Dies ist sinnvoll, wenn genau ein Objekt ben\u00f6tigt wird, um Aktionen im System zu koordinieren.\" (\u00dcbersetztes englisches Zitat aus Wikipedia .)","title":"Term singleton"},{"location":"terms/term-singleton/#singleton","text":"\"Design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system.\" (quoted from Wikipedia . {lang=de}","title":"Singleton"},{"location":"terms/term-singleton/#singleton_1","text":"\u201eEntwurfsmuster, das die Instanziierung einer Klasse auf ein Objekt beschr\u00e4nkt. Dies ist sinnvoll, wenn genau ein Objekt ben\u00f6tigt wird, um Aktionen im System zu koordinieren.\" (\u00dcbersetztes englisches Zitat aus Wikipedia .)","title":"Singleton"},{"location":"terms/term-software-architecture/","text":"{lang=en} Software Architecture \u00b6 There exist several (!) valid and plausible definitions of the term Software Architecture . The following definition has been proposed by the IEEE 1471 standard: A>Software Architecture: the fundamental organization of a system A>embodied in its components, their relationships to each A>other and to the environment and the principles guiding A>its design and evolution. The new standard ISO/IEC/IEEE 42010:2011 has adopted and revised the definition as follows: A>Architecture: (system) fundamental concepts or properties of a system A>in its environment embodied in its elements, relationships, and in A>the principles of its design and evolution. The key terms in this definition require some explanation: Components: Subsystems, modules, classes, functions or the more general term building blocks : structural elements of software: Components are usually implemented in a programming language, but can also be other artifacts that (together) make up the system . Relationships: Interfaces, dependencies, associations - different names for the same feature: Components need to interact with other components to enable separation of concerns . Environment: Every system has some relationships to its environment: data, control flow or events are transferred to and from maybe different kinds of neighbours. Principles: Rules or conventions that hold for a system or several parts of it. Decision or definition, usually valid for several elements of the system. Often called concepts or even solution patterns . Principles (concepts) are the foundation for conceptual integrity . The Software Engineering Institute maintains a collection of further definitions Although the term often refers to the software architecture of an IT system , it is also used to refer to software architecture as an engineering science . Category: ISO-IEC-IEEE-42010 {lang=de} Softwarearchitektur: \u00b6 Es gibt mehrere (!) g\u00fcltige und plausible Definitionen des Begriffs Softwarearchitektur . Die IEEE 1471 Norm schl\u00e4gt folgende Definition vor: In der neuen Norm ISO/IEC/IEEE 42010:2011 wurden die Definitionen folgenderma\u00dfen \u00fcbernommen und \u00fcberarbeitet: Die Schl\u00fcsselbegriffe dieser Definition bed\u00fcrfen einer Erl\u00e4uterung: Komponenten: Teilsysteme, Module, Klassen, Funktionen oder allgemeiner gesagt Bausteine : Strukturelemente von Software: Komponenten werden \u00fcblicherweise in einer Programmiersprache implementiert, k\u00f6nnen aber auch andere Artefakte sein, die (zusammen) das System bilden . Beziehungen: Schnittstellen, Abh\u00e4ngigkeiten, Assoziationen -- verschiedene Bezeichnungen f\u00fcr dieselbe Funktion: Komponenten m\u00fcssen mit anderen Komponenten interagieren, um separation of concerns zu erm\u00f6glichen. Umgebung: Jedes System hat Beziehungen zu seiner Umgebung: Daten, Kontrollfl\u00fcsse oder Ereignisse werden an m\u00f6glicherweise unterschiedliche Arten von Nachbar und von diesen \u00fcbertragen. Prinzipien: Regeln oder Konventionen, die f\u00fcr ein System oder mehrere Teile eines Systems gelten. Entscheidung oder Definition, die in der Regel f\u00fcr mehrere Elemente des Systems g\u00fcltig ist. H\u00e4ufig Konzepte oder sogar L\u00f6sungsmuster genannt. Prinzipien (Konzepte) bilden die Grundlage f\u00fcr konzeptionelle Integrit\u00e4t . Das Software Engineering Institute f\u00fchrt eine Sammlung weiterer Definitionen Auch wenn der Begriff sich oft auf die Softwarearchitektur eines IT-Systems bezieht, wird er auch benutzt, um sich auf Softwarearchitektur als Ingenieursdisziplin zu beziehen. Kategorie: ISO-IEC-IEEE-42010","title":"Term software architecture"},{"location":"terms/term-software-architecture/#software-architecture","text":"There exist several (!) valid and plausible definitions of the term Software Architecture . The following definition has been proposed by the IEEE 1471 standard: A>Software Architecture: the fundamental organization of a system A>embodied in its components, their relationships to each A>other and to the environment and the principles guiding A>its design and evolution. The new standard ISO/IEC/IEEE 42010:2011 has adopted and revised the definition as follows: A>Architecture: (system) fundamental concepts or properties of a system A>in its environment embodied in its elements, relationships, and in A>the principles of its design and evolution. The key terms in this definition require some explanation: Components: Subsystems, modules, classes, functions or the more general term building blocks : structural elements of software: Components are usually implemented in a programming language, but can also be other artifacts that (together) make up the system . Relationships: Interfaces, dependencies, associations - different names for the same feature: Components need to interact with other components to enable separation of concerns . Environment: Every system has some relationships to its environment: data, control flow or events are transferred to and from maybe different kinds of neighbours. Principles: Rules or conventions that hold for a system or several parts of it. Decision or definition, usually valid for several elements of the system. Often called concepts or even solution patterns . Principles (concepts) are the foundation for conceptual integrity . The Software Engineering Institute maintains a collection of further definitions Although the term often refers to the software architecture of an IT system , it is also used to refer to software architecture as an engineering science . Category: ISO-IEC-IEEE-42010 {lang=de}","title":"Software Architecture"},{"location":"terms/term-software-architecture/#softwarearchitektur","text":"Es gibt mehrere (!) g\u00fcltige und plausible Definitionen des Begriffs Softwarearchitektur . Die IEEE 1471 Norm schl\u00e4gt folgende Definition vor: In der neuen Norm ISO/IEC/IEEE 42010:2011 wurden die Definitionen folgenderma\u00dfen \u00fcbernommen und \u00fcberarbeitet: Die Schl\u00fcsselbegriffe dieser Definition bed\u00fcrfen einer Erl\u00e4uterung: Komponenten: Teilsysteme, Module, Klassen, Funktionen oder allgemeiner gesagt Bausteine : Strukturelemente von Software: Komponenten werden \u00fcblicherweise in einer Programmiersprache implementiert, k\u00f6nnen aber auch andere Artefakte sein, die (zusammen) das System bilden . Beziehungen: Schnittstellen, Abh\u00e4ngigkeiten, Assoziationen -- verschiedene Bezeichnungen f\u00fcr dieselbe Funktion: Komponenten m\u00fcssen mit anderen Komponenten interagieren, um separation of concerns zu erm\u00f6glichen. Umgebung: Jedes System hat Beziehungen zu seiner Umgebung: Daten, Kontrollfl\u00fcsse oder Ereignisse werden an m\u00f6glicherweise unterschiedliche Arten von Nachbar und von diesen \u00fcbertragen. Prinzipien: Regeln oder Konventionen, die f\u00fcr ein System oder mehrere Teile eines Systems gelten. Entscheidung oder Definition, die in der Regel f\u00fcr mehrere Elemente des Systems g\u00fcltig ist. H\u00e4ufig Konzepte oder sogar L\u00f6sungsmuster genannt. Prinzipien (Konzepte) bilden die Grundlage f\u00fcr konzeptionelle Integrit\u00e4t . Das Software Engineering Institute f\u00fchrt eine Sammlung weiterer Definitionen Auch wenn der Begriff sich oft auf die Softwarearchitektur eines IT-Systems bezieht, wird er auch benutzt, um sich auf Softwarearchitektur als Ingenieursdisziplin zu beziehen. Kategorie: ISO-IEC-IEEE-42010","title":"Softwarearchitektur:"},{"location":"terms/term-software-quality/","text":"{lang=en} Software Quality \u00b6 (from IEEE Standard 1061): Software quality is the degree to which software possesses a desired combination of attributes. This desired combination of attributes need to be clearly defined; otherwise, assessment of quality is left to intuition. (from ISO/IEC Standard 25010): The quality of a system is the degree to which the system satisfies the stated and implied needs of its various stakeholders, and thus provides value. These stated and implied needs are represented in the ISO 25000 quality models that categorize product quality into characteristics, which in some cases are further subdivided into subcharacteristics. {lang=de} Softwarequalit\u00e4t \u00b6 (Aus der IEEE-Norm 1061): Die Softwarequalit\u00e4t ist das Ma\u00df, in dem eine Software eine gew\u00fcnschte Kombination von Merkmalen besitzt. Die gew\u00fcnschte Kombination von Eigenschaften muss klar definiert sein; ansonsten bleibt die Beurteilung der Qualit\u00e4t der Intuition \u00fcberlassen. (Aus der ISO/IEC-Norm 25010): Die Qualit\u00e4t eines Systems ist das Ma\u00df, in dem das System die festgelegten und vorausgesetzten Anforderungen seiner verschiedenen Stakeholder erf\u00fcllt und somit Wert bietet. Diese festgelegten und vorausgesetzten Anforderungen sind in den ISO 25000 Qualit\u00e4tsmodellen dargestellt, die Produktqualit\u00e4t in Eigenschaften, welche in manchen F\u00e4llen weiter in Untereigenschaften unterteilt werden, einteilt.","title":"Term software quality"},{"location":"terms/term-software-quality/#software-quality","text":"(from IEEE Standard 1061): Software quality is the degree to which software possesses a desired combination of attributes. This desired combination of attributes need to be clearly defined; otherwise, assessment of quality is left to intuition. (from ISO/IEC Standard 25010): The quality of a system is the degree to which the system satisfies the stated and implied needs of its various stakeholders, and thus provides value. These stated and implied needs are represented in the ISO 25000 quality models that categorize product quality into characteristics, which in some cases are further subdivided into subcharacteristics. {lang=de}","title":"Software Quality"},{"location":"terms/term-software-quality/#softwarequalitat","text":"(Aus der IEEE-Norm 1061): Die Softwarequalit\u00e4t ist das Ma\u00df, in dem eine Software eine gew\u00fcnschte Kombination von Merkmalen besitzt. Die gew\u00fcnschte Kombination von Eigenschaften muss klar definiert sein; ansonsten bleibt die Beurteilung der Qualit\u00e4t der Intuition \u00fcberlassen. (Aus der ISO/IEC-Norm 25010): Die Qualit\u00e4t eines Systems ist das Ma\u00df, in dem das System die festgelegten und vorausgesetzten Anforderungen seiner verschiedenen Stakeholder erf\u00fcllt und somit Wert bietet. Diese festgelegten und vorausgesetzten Anforderungen sind in den ISO 25000 Qualit\u00e4tsmodellen dargestellt, die Produktqualit\u00e4t in Eigenschaften, welche in manchen F\u00e4llen weiter in Untereigenschaften unterteilt werden, einteilt.","title":"Softwarequalit\u00e4t"},{"location":"terms/term-solid-principles/","text":"{lang=en} S.O.L.I.D. principles \u00b6 SOLID (single responsibility, open-closed, Liskov substitution, interface segregation and dependency inversion) is an acronym for some principles (named by Robert C. Martin ) to improve object-oriented programming and design. The principles make it more likely that a developer will write code that is easy to maintain and extend over time. For some additional sources, see Martin-SOLID . {lang=de} S.O.L.I.D.-Prinzipien \u00b6 SOLID (Single-Responsibility, Open-Closed, Liskovsche Substitution, Interface-Segregation und Dependency-Inversion) ist ein (von Robert C. Martin ) gepr\u00e4gtes Akronym f\u00fcr einige Prinzipien zur Verbesserung der objektorientierten Programmierung und des objektorientierten Entwurfs. Diese Prinzipien erh\u00f6hen die Wahrscheinlichkeit, dass ein Entwickler leicht zu wartenden und im Laufe der Zeit erweiterbaren Code schreibt. Weitere Quellen: siehe Martin-SOLID .","title":"Term solid principles"},{"location":"terms/term-solid-principles/#solid-principles","text":"SOLID (single responsibility, open-closed, Liskov substitution, interface segregation and dependency inversion) is an acronym for some principles (named by Robert C. Martin ) to improve object-oriented programming and design. The principles make it more likely that a developer will write code that is easy to maintain and extend over time. For some additional sources, see Martin-SOLID . {lang=de}","title":"S.O.L.I.D. principles"},{"location":"terms/term-solid-principles/#solid-prinzipien","text":"SOLID (Single-Responsibility, Open-Closed, Liskovsche Substitution, Interface-Segregation und Dependency-Inversion) ist ein (von Robert C. Martin ) gepr\u00e4gtes Akronym f\u00fcr einige Prinzipien zur Verbesserung der objektorientierten Programmierung und des objektorientierten Entwurfs. Diese Prinzipien erh\u00f6hen die Wahrscheinlichkeit, dass ein Entwickler leicht zu wartenden und im Laufe der Zeit erweiterbaren Code schreibt. Weitere Quellen: siehe Martin-SOLID .","title":"S.O.L.I.D.-Prinzipien"},{"location":"terms/term-stable-abstractions-principle/","text":"{lang=en} Stable Abstractions Principle \u00b6 A fundamental principle for designing the structure of software systems (also see Package Principles ). It demands that the abstractness of components is proportional to their stability. The closely related SDP also explains the notion of stability in this context. We want components that represent abstract concepts and responsibilities to require little or no modification because many conceptually more specific (concrete) components depend on them. And we want components that should or could not easily change to be at least abstract enough so we can extend them. This relates to the OCP . The SAP can sound like a circular argument until the underlying idea shines through: Concrete things and concepts are naturally more volatile, specific, arbitrary and numerous than abstract ones. The component structure of a system simply should reflect that. General logic, the system's physical artifacts as well as its functional and technical concepts should all be in congruence. The SAP is closely related to the SDP . Their combination amounts to a more general and arguably more profound version of the DIP : Specific concepts naturally depend on more abstract ones because they are composed or derived from more general-purpose building blocks. And dependent concepts are naturally more specific because they are defined by more information than their dependencies (assuming there are no dependence cycles ). Category: Design-Principle {lang=de} Stable-Abstractions-Prinzip \u00b6 Ein Grundsatz f\u00fcr die Gestaltung der Struktur von Softwaresystemen (siehe auch Packaging-Prinzipien ). Er fordert, dass die Abstraktheit von Komponenten proportional zu ihrer Stabilit\u00e4t ist. Das eng damit verbundene SDP erkl\u00e4rt auch den Begriff Stabilit\u00e4t in diesem Zusammenhang. Wir wollen, dass Komponenten, die abstrakte Konzepte und Verantwortlichkeiten repr\u00e4sentieren, wenig oder keine \u00c4nderungen ben\u00f6tigen, weil zahlreiche konzeptionell spezifischere (konkrete) Komponenten von ihnen abh\u00e4ngen. Und wir wollen, dass Komponenten, die nicht einfach ge\u00e4ndert werden k\u00f6nnen oder sollten, mindestens so abstrakt sind, dass wir sie erweitern k\u00f6nnen. Dies steht mit dem OCP in Zusammenhang. Das SAP kann wie ein Zirkelargument klingen, bis die zugrunde liegende Idee zu Tage tritt: Konkrete Dinge und Konzepte sind nat\u00fcrlich volatiler, spezifischer, willk\u00fcrlicher und zahlreicher als abstrakte . Die Komponentenstruktur eines Systems sollte dies einfach widerspiegeln. Die allgemeine Logik, die physischen Artefakte des Systems sowie seine funktionalen und technischen Konzepte sollten alle Deckungsgleich sein. Das SAP ist eng mit dem SDP verbunden. Ihre Kombination ergibt eine allgemeinere und wohl tiefergehende Version des DIP : Spezifische Konzepte h\u00e4ngen nat\u00fcrlich von abstrakteren ab, da sie aus universaleren Bausteinen bestehen oder davon abgeleitet sind. Und abh\u00e4ngige Konzepte sind nat\u00fcrlich spezifischer , weil sie durch mehr Informationen als ihre Abh\u00e4ngigkeiten definiert sind (vorausgesetzt es gibt keine Abh\u00e4ngigkeitszyklen ). Kategorie: Entwurfsprinzip","title":"Term stable abstractions principle"},{"location":"terms/term-stable-abstractions-principle/#stable-abstractions-principle","text":"A fundamental principle for designing the structure of software systems (also see Package Principles ). It demands that the abstractness of components is proportional to their stability. The closely related SDP also explains the notion of stability in this context. We want components that represent abstract concepts and responsibilities to require little or no modification because many conceptually more specific (concrete) components depend on them. And we want components that should or could not easily change to be at least abstract enough so we can extend them. This relates to the OCP . The SAP can sound like a circular argument until the underlying idea shines through: Concrete things and concepts are naturally more volatile, specific, arbitrary and numerous than abstract ones. The component structure of a system simply should reflect that. General logic, the system's physical artifacts as well as its functional and technical concepts should all be in congruence. The SAP is closely related to the SDP . Their combination amounts to a more general and arguably more profound version of the DIP : Specific concepts naturally depend on more abstract ones because they are composed or derived from more general-purpose building blocks. And dependent concepts are naturally more specific because they are defined by more information than their dependencies (assuming there are no dependence cycles ). Category: Design-Principle {lang=de}","title":"Stable Abstractions Principle"},{"location":"terms/term-stable-abstractions-principle/#stable-abstractions-prinzip","text":"Ein Grundsatz f\u00fcr die Gestaltung der Struktur von Softwaresystemen (siehe auch Packaging-Prinzipien ). Er fordert, dass die Abstraktheit von Komponenten proportional zu ihrer Stabilit\u00e4t ist. Das eng damit verbundene SDP erkl\u00e4rt auch den Begriff Stabilit\u00e4t in diesem Zusammenhang. Wir wollen, dass Komponenten, die abstrakte Konzepte und Verantwortlichkeiten repr\u00e4sentieren, wenig oder keine \u00c4nderungen ben\u00f6tigen, weil zahlreiche konzeptionell spezifischere (konkrete) Komponenten von ihnen abh\u00e4ngen. Und wir wollen, dass Komponenten, die nicht einfach ge\u00e4ndert werden k\u00f6nnen oder sollten, mindestens so abstrakt sind, dass wir sie erweitern k\u00f6nnen. Dies steht mit dem OCP in Zusammenhang. Das SAP kann wie ein Zirkelargument klingen, bis die zugrunde liegende Idee zu Tage tritt: Konkrete Dinge und Konzepte sind nat\u00fcrlich volatiler, spezifischer, willk\u00fcrlicher und zahlreicher als abstrakte . Die Komponentenstruktur eines Systems sollte dies einfach widerspiegeln. Die allgemeine Logik, die physischen Artefakte des Systems sowie seine funktionalen und technischen Konzepte sollten alle Deckungsgleich sein. Das SAP ist eng mit dem SDP verbunden. Ihre Kombination ergibt eine allgemeinere und wohl tiefergehende Version des DIP : Spezifische Konzepte h\u00e4ngen nat\u00fcrlich von abstrakteren ab, da sie aus universaleren Bausteinen bestehen oder davon abgeleitet sind. Und abh\u00e4ngige Konzepte sind nat\u00fcrlich spezifischer , weil sie durch mehr Informationen als ihre Abh\u00e4ngigkeiten definiert sind (vorausgesetzt es gibt keine Abh\u00e4ngigkeitszyklen ). Kategorie: Entwurfsprinzip","title":"Stable-Abstractions-Prinzip"},{"location":"terms/term-stable-dependencies-principle/","text":"{lang=en} Stable Dependencies Principle \u00b6 A fundamental principle for designing the structure of software systems (also see Package Principles ). It demands that frequently changing components depend on more stable ones. Part of the volatility of a component is expected and naturally implied by its particular responsibility. But stability in this context is also a function of incoming and outgoing dependencies. A component that is heavily depended on by others is harder to change and condsidered to be more stable. A component that heavily depends on others has more reasons to change and is considered to be less stable. So in regards to dependence, a component with many clients should not depend on one with many dependencies. A single component with both of these properties is also a red flag. Such a component has many reasons to change but is at the same time hard to change. Original definitions of the SDP (like Martin-2003 ) involve a metric I of instability . Unfortunately, that metric doesn't capture intended/inherent volatility, transitive dependence or cases like the red flag mentioned above. But we value the idea of the SDP regardless of how it can be measured. The SDP is closely related to the SAP . Their combination amounts to a version of the DIP (more on this under SAP ). Category: Design-Principle {lang=de} Stable-Dependencies-Prinzip \u00b6 Ein Grundsatz f\u00fcr die Gestaltung der Struktur von Softwaresystemen (siehe auch Packaging-Prinzipien ). Er fordert, dass sich h\u00e4ufig \u00e4ndernde Komponenten von stabileren abh\u00e4ngen. Ein Teil der Volatilit\u00e4t einer Komponente wird erwartet und von ihrer speziellen Verantwortlichkeit logischerweise impliziert. Aber in diesem Kontext h\u00e4ngt Stabilit\u00e4t auch von ein- und ausgehenden Abh\u00e4ngigkeiten ab. Eine Komponente, von der andere stark abh\u00e4ngen, ist schwieriger zu \u00e4ndern und gilt als stabiler. Eine Komponente, die stark von anderen abh\u00e4ngt, hat mehr \u00c4nderungsgr\u00fcnde und gilt als weniger stabil. In Bezug auf Abh\u00e4ngigkeit sollte also eine Komponente mit vielen Clients nicht von einer Komponente mit vielen Abh\u00e4ngigkeiten abh\u00e4ngen. Eine einzelne Komponente, die diese beiden Eigenschaften auf sich vereint, ist ebenfalls eine Red Flag. Eine solche Komponente hat viele Gr\u00fcnde f\u00fcr eine \u00c4nderung, ist aber gleichzeitig schwer zu \u00e4ndern. Urspr\u00fcngliche Definitionen des SDP (wie Martin-2003 ) beinhalten eine Kennzahl I der Instabilit\u00e4t . Leider erfasst diese Kennzahl beabsichtigte/inh\u00e4rente Volatilit\u00e4t, transitive Abh\u00e4ngigkeit oder F\u00e4lle, wie die oben genannte Red Flag, nicht. Aber wir wissen das Konzept des SDP zu sch\u00e4tzen, unabh\u00e4ngig davon, wie es sich messen l\u00e4sst. Das SDP ist eng mit dem SAP verbunden. Ihre Kombination ergibt eine allgemeinere Version des DIP (mehr dazu unter SAP ). Kategorie: Entwurfsprinzip","title":"Term stable dependencies principle"},{"location":"terms/term-stable-dependencies-principle/#stable-dependencies-principle","text":"A fundamental principle for designing the structure of software systems (also see Package Principles ). It demands that frequently changing components depend on more stable ones. Part of the volatility of a component is expected and naturally implied by its particular responsibility. But stability in this context is also a function of incoming and outgoing dependencies. A component that is heavily depended on by others is harder to change and condsidered to be more stable. A component that heavily depends on others has more reasons to change and is considered to be less stable. So in regards to dependence, a component with many clients should not depend on one with many dependencies. A single component with both of these properties is also a red flag. Such a component has many reasons to change but is at the same time hard to change. Original definitions of the SDP (like Martin-2003 ) involve a metric I of instability . Unfortunately, that metric doesn't capture intended/inherent volatility, transitive dependence or cases like the red flag mentioned above. But we value the idea of the SDP regardless of how it can be measured. The SDP is closely related to the SAP . Their combination amounts to a version of the DIP (more on this under SAP ). Category: Design-Principle {lang=de}","title":"Stable Dependencies Principle"},{"location":"terms/term-stable-dependencies-principle/#stable-dependencies-prinzip","text":"Ein Grundsatz f\u00fcr die Gestaltung der Struktur von Softwaresystemen (siehe auch Packaging-Prinzipien ). Er fordert, dass sich h\u00e4ufig \u00e4ndernde Komponenten von stabileren abh\u00e4ngen. Ein Teil der Volatilit\u00e4t einer Komponente wird erwartet und von ihrer speziellen Verantwortlichkeit logischerweise impliziert. Aber in diesem Kontext h\u00e4ngt Stabilit\u00e4t auch von ein- und ausgehenden Abh\u00e4ngigkeiten ab. Eine Komponente, von der andere stark abh\u00e4ngen, ist schwieriger zu \u00e4ndern und gilt als stabiler. Eine Komponente, die stark von anderen abh\u00e4ngt, hat mehr \u00c4nderungsgr\u00fcnde und gilt als weniger stabil. In Bezug auf Abh\u00e4ngigkeit sollte also eine Komponente mit vielen Clients nicht von einer Komponente mit vielen Abh\u00e4ngigkeiten abh\u00e4ngen. Eine einzelne Komponente, die diese beiden Eigenschaften auf sich vereint, ist ebenfalls eine Red Flag. Eine solche Komponente hat viele Gr\u00fcnde f\u00fcr eine \u00c4nderung, ist aber gleichzeitig schwer zu \u00e4ndern. Urspr\u00fcngliche Definitionen des SDP (wie Martin-2003 ) beinhalten eine Kennzahl I der Instabilit\u00e4t . Leider erfasst diese Kennzahl beabsichtigte/inh\u00e4rente Volatilit\u00e4t, transitive Abh\u00e4ngigkeit oder F\u00e4lle, wie die oben genannte Red Flag, nicht. Aber wir wissen das Konzept des SDP zu sch\u00e4tzen, unabh\u00e4ngig davon, wie es sich messen l\u00e4sst. Das SDP ist eng mit dem SAP verbunden. Ihre Kombination ergibt eine allgemeinere Version des DIP (mehr dazu unter SAP ). Kategorie: Entwurfsprinzip","title":"Stable-Dependencies-Prinzip"},{"location":"terms/term-stakeholder/","text":"{lang=en} Stakeholder \u00b6 Person or organization that can be affected by or have in interest ( stake ) in a system, its development or execution. Examples include users, employees, owners, administrators, developers, designers, project- or product-managers, product-owner, project manager, requirements engineers, business-analysts, government agencies, enterprise architects etc. Following ISO/IEC/IEEE 42010 a stakeholder is a (system) individual, team, organization, or classes thereof, having an interest in a system (as defined in ISO/IEC/IEEE 42010). Such interest can be positive (e.g. stakeholder wants to benefit from the system), neutral (stakeholder has to test or verify the system) or negative (stakeholder is competing with the system or wants it to fail). Category: ISO-IEC-IEEE-42010 {lang=de} Stakeholder \u00b6 Person oder Organisation, die von einem System, seiner Entwicklung oder Ausf\u00fchrung betroffen sein kann oder ein Interesse ( stake ) daran hat. Beispiele sind Benutzer, Besch\u00e4ftigte, Eigner, Administratoren, Entwickler, Entwerfer, Manager, Product Owner, Projektmanager. Gem\u00e4\u00df ISO/IEC/IEEE 42010 sind Stakeholder (System) eine Einzelperson, ein Team, eine Organisation oder Klassen davon, die ein Interesse an einem System haben (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Kategorie: ISO-IEC-IEEE-42010","title":"Term stakeholder"},{"location":"terms/term-stakeholder/#stakeholder","text":"Person or organization that can be affected by or have in interest ( stake ) in a system, its development or execution. Examples include users, employees, owners, administrators, developers, designers, project- or product-managers, product-owner, project manager, requirements engineers, business-analysts, government agencies, enterprise architects etc. Following ISO/IEC/IEEE 42010 a stakeholder is a (system) individual, team, organization, or classes thereof, having an interest in a system (as defined in ISO/IEC/IEEE 42010). Such interest can be positive (e.g. stakeholder wants to benefit from the system), neutral (stakeholder has to test or verify the system) or negative (stakeholder is competing with the system or wants it to fail). Category: ISO-IEC-IEEE-42010 {lang=de}","title":"Stakeholder"},{"location":"terms/term-stakeholder/#stakeholder_1","text":"Person oder Organisation, die von einem System, seiner Entwicklung oder Ausf\u00fchrung betroffen sein kann oder ein Interesse ( stake ) daran hat. Beispiele sind Benutzer, Besch\u00e4ftigte, Eigner, Administratoren, Entwickler, Entwerfer, Manager, Product Owner, Projektmanager. Gem\u00e4\u00df ISO/IEC/IEEE 42010 sind Stakeholder (System) eine Einzelperson, ein Team, eine Organisation oder Klassen davon, die ein Interesse an einem System haben (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Kategorie: ISO-IEC-IEEE-42010","title":"Stakeholder"},{"location":"terms/term-structural-element/","text":"{lang=en} Structural Element \u00b6 see [Building Block(#term-building-block) or Component {lang=de} Strukturelement \u00b6 Siehe Baustein oder Komponente","title":"Term structural element"},{"location":"terms/term-structural-element/#structural-element","text":"see [Building Block(#term-building-block) or Component {lang=de}","title":"Structural Element"},{"location":"terms/term-structural-element/#strukturelement","text":"Siehe Baustein oder Komponente","title":"Strukturelement"},{"location":"terms/term-structure/","text":"{lang=en} Structure \u00b6 An arrangement, order or organization of interrelated elements in a system. Structures consist of building blocks (structural elements) and their relationships (dependencies). Structures in software architecture are often used in architecture views , e.g. the building block view . A documentation template (e.g. arc42 ) is a kind of structure too. {lang=de} Struktur \u00b6 Anordnung, Ordnung oder Organisation von zusammenh\u00e4ngenden Elementen in einem System. Strukturen bestehen aus Bausteinen (Strukturelementen) und ihren Beziehungen (Abh\u00e4ngigkeiten). In der Softwarearchitektur werden Strukturen h\u00e4ufig in Architektursichten , z.B. der Bausteinsicht verwendet. Ein Dokumentationstemplate (z.B. arc42 ) ist auch eine Art Struktur.","title":"Term structure"},{"location":"terms/term-structure/#structure","text":"An arrangement, order or organization of interrelated elements in a system. Structures consist of building blocks (structural elements) and their relationships (dependencies). Structures in software architecture are often used in architecture views , e.g. the building block view . A documentation template (e.g. arc42 ) is a kind of structure too. {lang=de}","title":"Structure"},{"location":"terms/term-structure/#struktur","text":"Anordnung, Ordnung oder Organisation von zusammenh\u00e4ngenden Elementen in einem System. Strukturen bestehen aus Bausteinen (Strukturelementen) und ihren Beziehungen (Abh\u00e4ngigkeiten). In der Softwarearchitektur werden Strukturen h\u00e4ufig in Architektursichten , z.B. der Bausteinsicht verwendet. Ein Dokumentationstemplate (z.B. arc42 ) ist auch eine Art Struktur.","title":"Struktur"},{"location":"terms/term-symmetric-cryptography/","text":"{lang=en} Symmetric Cryptography \u00b6 Symmetric cryptography is based on an identical key for encryption and decryption of data. Sender and receiver have to agree on a key for communication. See Schneier, Symmetric Algorithms, page 17 . Category: Security {lang=de} Symmetrische Kryptographie \u00b6 Symmetrische Kryptographie basiert auf einem identischen Schl\u00fcssel f\u00fcr die Verschl\u00fcsselung und Entschl\u00fcsselung von Daten. Sender und Empf\u00e4nger vereinbaren einen Schl\u00fcssel f\u00fcr die Kommunikation. Siehe Schneier, Symmetric Algorithms, Seite 17 . Kategorie: Sicherheit","title":"Term symmetric cryptography"},{"location":"terms/term-symmetric-cryptography/#symmetric-cryptography","text":"Symmetric cryptography is based on an identical key for encryption and decryption of data. Sender and receiver have to agree on a key for communication. See Schneier, Symmetric Algorithms, page 17 . Category: Security {lang=de}","title":"Symmetric Cryptography"},{"location":"terms/term-symmetric-cryptography/#symmetrische-kryptographie","text":"Symmetrische Kryptographie basiert auf einem identischen Schl\u00fcssel f\u00fcr die Verschl\u00fcsselung und Entschl\u00fcsselung von Daten. Sender und Empf\u00e4nger vereinbaren einen Schl\u00fcssel f\u00fcr die Kommunikation. Siehe Schneier, Symmetric Algorithms, Seite 17 . Kategorie: Sicherheit","title":"Symmetrische Kryptographie"},{"location":"terms/term-system-of-interest/","text":"{lang=en} System-of-Interest \u00b6 System-of-Interest (or simply, system) refers to the system whose architecture is under consideration in the preparation of an architecture description (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 {lang=de} Betrachtetes System \u00b6 Betrachtetes System (oder einfach System) bezieht sich auf das System, dessen Architektur bei der Erstellung der Architekturbeschreibung betrachtet wird (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Kategorie: ISO-IEC-IEEE-42010","title":"Term system of interest"},{"location":"terms/term-system-of-interest/#system-of-interest","text":"System-of-Interest (or simply, system) refers to the system whose architecture is under consideration in the preparation of an architecture description (as defined in ISO/IEC/IEEE 42010). Category: ISO-IEC-IEEE-42010 {lang=de}","title":"System-of-Interest"},{"location":"terms/term-system-of-interest/#betrachtetes-system","text":"Betrachtetes System (oder einfach System) bezieht sich auf das System, dessen Architektur bei der Erstellung der Architekturbeschreibung betrachtet wird (gem\u00e4\u00df Definition in ISO/IEC/IEEE 42010). Kategorie: ISO-IEC-IEEE-42010","title":"Betrachtetes System"},{"location":"terms/term-system/","text":"{lang=en} System \u00b6 Collection of elements (building blocks, components etc) organized for a common purpose. In ISO/IEC/IEEE Standards a couple of system definitions are available: systems as described in [ISO/IEC 15288]: \u201csystems that are man-made and may be configured with one or more of the following: hardware, software, data, humans, processes (e.g., processes for providing service to users), procedures (e.g. operator instructions), facilities, materials and naturally occurring entities\u201d. software products and services as described in [ISO/IEC 12207]. software-intensive systems as described in [IEEE Std 1471:2000]: \u201cany system where software contributes essential influences to the design, construction, deployment, and evolution of the system as a whole\u201d to encompass \u201cindividual applications, systems in the traditional sense, subsystems, systems of systems, product lines, product families, whole enterprises, and other aggregations of interest\u201d. Category: ISO-IEC-IEEE-42010 {lang=de} System \u00b6 Sammlung von Elementen (Bausteinen, Komponenten usw.), die zu einem gemeinsamen Zweck organisiert sind. In den ISO/IEC/IEEE-Normen gibt es eine Reihe von Systemdefinitionen: Systeme gem\u00e4\u00df Beschreibung in [ISO/IEC 15288]: Systeme, die vom Menschen geschaffen wurden und mit einem oder mehreren der folgenden Aspekte konfiguriert werden k\u00f6nnen: Hardware, Software, Daten, Menschen, Prozesse (z.B. Prozesse zur Bereitstellung eines Dienstes f\u00fcr Benutzer), Verfahren (z.B. Bedieneranweisungen), Anlagen, Material und nat\u00fcrlich vorkommende Entit\u00e4ten. Softwareprodukte und Dienste gem\u00e4\u00df Beschreibung in [ISO/IEC 12207]. Softwareintensive Systeme gem\u00e4\u00df Beschreibung in [IEEE Std 1471:2000]: jegliche Systeme, in denen Software wesentliche Einfl\u00fcsse zum Entwurf, zur Entwicklung, Verbreitung und Weiterentwicklung des Systems als Ganzes beisteuert, um individuelle Anwendungen, Systeme im herk\u00f6mmlichen Sinne, Teilsysteme, Systemverb\u00fcnde, Produktlinien, Produktfamilien, ganze Unternehmen und sonstige Interessensvereinigungen zu umspannen. Kategorie: ISO-IEC-IEEE-42010","title":"Term system"},{"location":"terms/term-system/#system","text":"Collection of elements (building blocks, components etc) organized for a common purpose. In ISO/IEC/IEEE Standards a couple of system definitions are available: systems as described in [ISO/IEC 15288]: \u201csystems that are man-made and may be configured with one or more of the following: hardware, software, data, humans, processes (e.g., processes for providing service to users), procedures (e.g. operator instructions), facilities, materials and naturally occurring entities\u201d. software products and services as described in [ISO/IEC 12207]. software-intensive systems as described in [IEEE Std 1471:2000]: \u201cany system where software contributes essential influences to the design, construction, deployment, and evolution of the system as a whole\u201d to encompass \u201cindividual applications, systems in the traditional sense, subsystems, systems of systems, product lines, product families, whole enterprises, and other aggregations of interest\u201d. Category: ISO-IEC-IEEE-42010 {lang=de}","title":"System"},{"location":"terms/term-system/#system_1","text":"Sammlung von Elementen (Bausteinen, Komponenten usw.), die zu einem gemeinsamen Zweck organisiert sind. In den ISO/IEC/IEEE-Normen gibt es eine Reihe von Systemdefinitionen: Systeme gem\u00e4\u00df Beschreibung in [ISO/IEC 15288]: Systeme, die vom Menschen geschaffen wurden und mit einem oder mehreren der folgenden Aspekte konfiguriert werden k\u00f6nnen: Hardware, Software, Daten, Menschen, Prozesse (z.B. Prozesse zur Bereitstellung eines Dienstes f\u00fcr Benutzer), Verfahren (z.B. Bedieneranweisungen), Anlagen, Material und nat\u00fcrlich vorkommende Entit\u00e4ten. Softwareprodukte und Dienste gem\u00e4\u00df Beschreibung in [ISO/IEC 12207]. Softwareintensive Systeme gem\u00e4\u00df Beschreibung in [IEEE Std 1471:2000]: jegliche Systeme, in denen Software wesentliche Einfl\u00fcsse zum Entwurf, zur Entwicklung, Verbreitung und Weiterentwicklung des Systems als Ganzes beisteuert, um individuelle Anwendungen, Systeme im herk\u00f6mmlichen Sinne, Teilsysteme, Systemverb\u00fcnde, Produktlinien, Produktfamilien, ganze Unternehmen und sonstige Interessensvereinigungen zu umspannen. Kategorie: ISO-IEC-IEEE-42010","title":"System"},{"location":"terms/term-template/","text":"{lang=en} Template (for Documentation) \u00b6 Standardized order of artifacts used in software development. It can help base other files, especially documents in a predefines structure without prescribing the content of these single files. A well known example of such templates is arc42 {lang=de} Template (zur Dokumentation) \u00b6 Standardisierte Zusammenstellung von Artefakten, die in der Softwareentwicklung verwendet werden. Templates k\u00f6nnen dabei helfen, andere Dateien, insbesondere Dokumente, in eine vordefinierte Struktur einzubetten, ohne den Inhalt dieser einzelnen Dateien vorzugeben. Ein sehr bekanntes Template ist arc42","title":"Term template"},{"location":"terms/term-template/#template-for-documentation","text":"Standardized order of artifacts used in software development. It can help base other files, especially documents in a predefines structure without prescribing the content of these single files. A well known example of such templates is arc42 {lang=de}","title":"Template (for Documentation)"},{"location":"terms/term-template/#template-zur-dokumentation","text":"Standardisierte Zusammenstellung von Artefakten, die in der Softwareentwicklung verwendet werden. Templates k\u00f6nnen dabei helfen, andere Dateien, insbesondere Dokumente, in eine vordefinierte Struktur einzubetten, ohne den Inhalt dieser einzelnen Dateien vorzugeben. Ein sehr bekanntes Template ist arc42","title":"Template (zur Dokumentation)"},{"location":"terms/term-temporal-coupling/","text":"{lang=en} Temporal Coupling \u00b6 Different interpretations exist from various sources. Temporal coupling: means that processes that are communicating will both have to be up and running. See Tanenbaum+2016 . when you often commit ( modify ) different components at the same time. See Tornhill-2015 . when there's an implicit relationship between two, or more, members of a class requiring clients to invoke one member before the other. Mark Seemann, see https://blog.ploeh.dk/2011/05/24/DesignSmellTemporalCoupling/ means that one system needs to wait for the response of another system before it can continue processing. See https://www.beeworks.be/blog/2017/rest-antipattern.html","title":"Term temporal coupling"},{"location":"terms/term-temporal-coupling/#temporal-coupling","text":"Different interpretations exist from various sources. Temporal coupling: means that processes that are communicating will both have to be up and running. See Tanenbaum+2016 . when you often commit ( modify ) different components at the same time. See Tornhill-2015 . when there's an implicit relationship between two, or more, members of a class requiring clients to invoke one member before the other. Mark Seemann, see https://blog.ploeh.dk/2011/05/24/DesignSmellTemporalCoupling/ means that one system needs to wait for the response of another system before it can continue processing. See https://www.beeworks.be/blog/2017/rest-antipattern.html","title":"Temporal Coupling"},{"location":"terms/term-testability-quality-attribute/","text":"{lang=en} Testability Quality Attribute \u00b6 Degree of effectiveness and efficiency with which test criteria can be established for a system, product or component and tests can be performed to determine whether those criteria have been met. Is a sub-characteristic of: maintainability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Testbarkeit \u00b6 Ma\u00df an Effektivit\u00e4t und Effizienz mit dem Testkriterien f\u00fcr ein System, ein Produkt oder eine Komponente festgelegt und Tests durchgef\u00fchrt werden k\u00f6nnen, um zu ermitteln, ob diese Kriterien erf\u00fcllt sind. Teilmerkmal von: Wartbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term testability quality attribute"},{"location":"terms/term-testability-quality-attribute/#testability-quality-attribute","text":"Degree of effectiveness and efficiency with which test criteria can be established for a system, product or component and tests can be performed to determine whether those criteria have been met. Is a sub-characteristic of: maintainability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Testability Quality Attribute"},{"location":"terms/term-testability-quality-attribute/#qualitatsmerkmal-testbarkeit","text":"Ma\u00df an Effektivit\u00e4t und Effizienz mit dem Testkriterien f\u00fcr ein System, ein Produkt oder eine Komponente festgelegt und Tests durchgef\u00fchrt werden k\u00f6nnen, um zu ermitteln, ob diese Kriterien erf\u00fcllt sind. Teilmerkmal von: Wartbarkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Testbarkeit"},{"location":"terms/term-time-behaviour-quality-attribute/","text":"{lang=en} Time Behaviour Quality Attribute \u00b6 Degree to which the response and processing times and throughput rates of a product or system, when performing its functions, meet requirements. Is a sub-characteristic of: performance efficiency . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Zeitverhalten \u00b6 Ma\u00df, in dem die Antwort- und Verarbeitungszeiten und Durchsatzgeschwindigkeiten eines Produkts oder System bei der Erf\u00fcllung seiner Funktionen den Anforderungen entsprechen. Teilmerkmal von: Leistungseffizienz . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term time behaviour quality attribute"},{"location":"terms/term-time-behaviour-quality-attribute/#time-behaviour-quality-attribute","text":"Degree to which the response and processing times and throughput rates of a product or system, when performing its functions, meet requirements. Is a sub-characteristic of: performance efficiency . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Time Behaviour Quality Attribute"},{"location":"terms/term-time-behaviour-quality-attribute/#qualitatsmerkmal-zeitverhalten","text":"Ma\u00df, in dem die Antwort- und Verarbeitungszeiten und Durchsatzgeschwindigkeiten eines Produkts oder System bei der Erf\u00fcllung seiner Funktionen den Anforderungen entsprechen. Teilmerkmal von: Leistungseffizienz . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Zeitverhalten"},{"location":"terms/term-tls/","text":"{lang=en} TLS \u00b6 T ransport- L ayer- S ecurity is a set of protocols to cryptographically secure the communication of two partys by the means of the CIA-triad . It is widely used for secure communication on the internet and the foundation for HTTPS. TLS started as an update to its predecessor SSL (Secure Socket Layer) Version 3.0 and should be used now instead of SSL see RFC7568 \"Deprecating Secure Sockets Layer Version 3.0\" . Category: Security {lang=de} TLS \u00b6 Transport-Layer-Security (Transportschichtsicherheit) bezeichnet eine Reihe von Protokollen zum kryptographischen Schutz der Kommunikation von zwei Parteien mit den Mitteln der CIA-Triade . Es wird sehr h\u00e4ufig zur sicheren Kommunikation im Internet genutzt und bildet die Grundlage f\u00fcr HTTPS. TLS begann als Update seines Vorg\u00e4ngers SSL (Secure Socket Layer) Version 3.0 und sollte nun statt SSL verwendet werden siehe RFC7568 \u201eDeprecating Secure Sockets Layer Version 3.0\" . Kategorie: Sicherheit","title":"Term tls"},{"location":"terms/term-tls/#tls","text":"T ransport- L ayer- S ecurity is a set of protocols to cryptographically secure the communication of two partys by the means of the CIA-triad . It is widely used for secure communication on the internet and the foundation for HTTPS. TLS started as an update to its predecessor SSL (Secure Socket Layer) Version 3.0 and should be used now instead of SSL see RFC7568 \"Deprecating Secure Sockets Layer Version 3.0\" . Category: Security {lang=de}","title":"TLS"},{"location":"terms/term-tls/#tls_1","text":"Transport-Layer-Security (Transportschichtsicherheit) bezeichnet eine Reihe von Protokollen zum kryptographischen Schutz der Kommunikation von zwei Parteien mit den Mitteln der CIA-Triade . Es wird sehr h\u00e4ufig zur sicheren Kommunikation im Internet genutzt und bildet die Grundlage f\u00fcr HTTPS. TLS begann als Update seines Vorg\u00e4ngers SSL (Secure Socket Layer) Version 3.0 und sollte nun statt SSL verwendet werden siehe RFC7568 \u201eDeprecating Secure Sockets Layer Version 3.0\" . Kategorie: Sicherheit","title":"TLS"},{"location":"terms/term-togaf/","text":"{lang=en} TOGAF \u00b6 The Open Group Architecture Framework is a conceptual framework for planning and maintenance of enterprise IT architectures. {lang=de} TOGAF \u00b6 The Open Group Architecture Framework . Konzeptioneller Rahmen f\u00fcr die Planung und Wartung von Unternehmens-IT-Architekturen.","title":"Term togaf"},{"location":"terms/term-togaf/#togaf","text":"The Open Group Architecture Framework is a conceptual framework for planning and maintenance of enterprise IT architectures. {lang=de}","title":"TOGAF"},{"location":"terms/term-togaf/#togaf_1","text":"The Open Group Architecture Framework . Konzeptioneller Rahmen f\u00fcr die Planung und Wartung von Unternehmens-IT-Architekturen.","title":"TOGAF"},{"location":"terms/term-tools-and-material-approach/","text":"{lang=en} Tools-and-material-approach \u00b6 t.b.d. {lang=de} Werkzeug- und Materialansatz \u00b6 zu erledigen","title":"Term tools and material approach"},{"location":"terms/term-tools-and-material-approach/#tools-and-material-approach","text":"t.b.d. {lang=de}","title":"Tools-and-material-approach"},{"location":"terms/term-tools-and-material-approach/#werkzeug-und-materialansatz","text":"zu erledigen","title":"Werkzeug- und Materialansatz"},{"location":"terms/term-top-down/","text":"{lang=en} Top-Down \u00b6 \"Direction of work\" or \"order of communication\": Starting from an abstract or general construct working towards more concrete, special or detailed representation. {lang=de} Top-Down \u00b6 \u201eArbeitsrichtung\" oder \u201eKommunikationsabfolge\": Ausgehend von einem abstrakten oder allgemeinen Konstrukt hin zu einer konkreteren, spezielleren oder detaillierteren Darstellung.","title":"Term top down"},{"location":"terms/term-top-down/#top-down","text":"\"Direction of work\" or \"order of communication\": Starting from an abstract or general construct working towards more concrete, special or detailed representation. {lang=de}","title":"Top-Down"},{"location":"terms/term-top-down/#top-down_1","text":"\u201eArbeitsrichtung\" oder \u201eKommunikationsabfolge\": Ausgehend von einem abstrakten oder allgemeinen Konstrukt hin zu einer konkreteren, spezielleren oder detaillierteren Darstellung.","title":"Top-Down"},{"location":"terms/term-traceability/","text":"{lang=en} Traceability \u00b6 (more precisely: requirements traceability): Document that all requirements are addressed by elements of the system (forward traceability) and all elements of the system are justified by at least one requirement (backward traceability) My personal opinion: If you can, you should avoid traceabiltiy, as it creates a lot of documentation overhead. {lang=de} Verfolgbarkeit \u00b6 (Genauer gesagt: Anforderungs verfolgbarkeit): Dokumentation, dass alle Anforderungen durch Elemente des Systems abgedeckt sind (Vorw\u00e4rtsverfolgbarkeit) und alle Elemente des Systems durch mindestens eine Anforderung begr\u00fcndet sind (R\u00fcckverfolgbarkeit) Meine pers\u00f6nliche Meinung: Verfolgbarkeit sollte nach M\u00f6glichkeit vermieden werden, da sie einen erheblichen Dokumentationsaufwand verursacht.","title":"Term traceability"},{"location":"terms/term-traceability/#traceability","text":"(more precisely: requirements traceability): Document that all requirements are addressed by elements of the system (forward traceability) and all elements of the system are justified by at least one requirement (backward traceability) My personal opinion: If you can, you should avoid traceabiltiy, as it creates a lot of documentation overhead. {lang=de}","title":"Traceability"},{"location":"terms/term-traceability/#verfolgbarkeit","text":"(Genauer gesagt: Anforderungs verfolgbarkeit): Dokumentation, dass alle Anforderungen durch Elemente des Systems abgedeckt sind (Vorw\u00e4rtsverfolgbarkeit) und alle Elemente des Systems durch mindestens eine Anforderung begr\u00fcndet sind (R\u00fcckverfolgbarkeit) Meine pers\u00f6nliche Meinung: Verfolgbarkeit sollte nach M\u00f6glichkeit vermieden werden, da sie einen erheblichen Dokumentationsaufwand verursacht.","title":"Verfolgbarkeit"},{"location":"terms/term-tradeoff/","text":"{lang=en} Trade-Off \u00b6 (syn: compromise). A balance achieved or negotiated between two desired or required but usually incompatible or contradicting features. For example, software development usually has to tradeoff memory consumption and runtime speed. More colloquially, if one thing increases, some other thing must decrease. Even more colloquially: There is no free lunch. Every quality attribute has a price among other quality attributes. {lang=de} Abw\u00e4gung \u00b6 (Syn.: Kompromiss). Erreichte oder ausgehandelte Balance zwischen zwei gew\u00fcnschten oder vorgegebenen, aber \u00fcblicherweise unvereinbaren oder widerspr\u00fcchlichen Eigenschaften. Beispielsweise muss in der Softwareentwicklung in der Regel ein Kompromiss zwischen Speicherbedarf und Laufzeitgeschwindigkeit gefunden werden. Umgangssprachlicher gesagt, wenn etwas zunimmt, muss etwas anderes abnehmen. Und noch umgangssprachlicher: Es gibt nichts umsonst. F\u00fcr jedes Qualit\u00e4tsmerkmal ist bei anderen Qualit\u00e4tsmerkmalen ein Preis zu zahlen.","title":"Term tradeoff"},{"location":"terms/term-tradeoff/#trade-off","text":"(syn: compromise). A balance achieved or negotiated between two desired or required but usually incompatible or contradicting features. For example, software development usually has to tradeoff memory consumption and runtime speed. More colloquially, if one thing increases, some other thing must decrease. Even more colloquially: There is no free lunch. Every quality attribute has a price among other quality attributes. {lang=de}","title":"Trade-Off"},{"location":"terms/term-tradeoff/#abwagung","text":"(Syn.: Kompromiss). Erreichte oder ausgehandelte Balance zwischen zwei gew\u00fcnschten oder vorgegebenen, aber \u00fcblicherweise unvereinbaren oder widerspr\u00fcchlichen Eigenschaften. Beispielsweise muss in der Softwareentwicklung in der Regel ein Kompromiss zwischen Speicherbedarf und Laufzeitgeschwindigkeit gefunden werden. Umgangssprachlicher gesagt, wenn etwas zunimmt, muss etwas anderes abnehmen. Und noch umgangssprachlicher: Es gibt nichts umsonst. F\u00fcr jedes Qualit\u00e4tsmerkmal ist bei anderen Qualit\u00e4tsmerkmalen ein Preis zu zahlen.","title":"Abw\u00e4gung"},{"location":"terms/term-trainer/","text":"{lang=en} Trainer \u00b6 A trainer is a person who conducts a training course himself, provided that this is carried out within the framework of a accreditation granted to an accredited training provider . Accordingly, accredited training providers may only organise and conduct CPSA training courses with accredited trainers. Only accredited training providers can apply for trainer accreditations . {lang=de} Schulungsleiter \u00b6 Ein Trainer ist eine Person, die eine Schulung selbst leitet, mit der Ma\u00dfgabe, dass diese im Rahmen einer einem akkreditierten Schulungsanbieter gew\u00e4hrten Akkreditierung durchgef\u00fchrt wird. Entsprechend d\u00fcrfen akkreditierte Schulungsanbieter nur CPSA-Schulungen mit akkreditierten Schulungsleitern organisieren und durchf\u00fchren. Nur akkreditierte Schulungsanbieter k\u00f6nnen Akkreditierungen von Schulungsleitern beantragen.","title":"Term trainer"},{"location":"terms/term-trainer/#trainer","text":"A trainer is a person who conducts a training course himself, provided that this is carried out within the framework of a accreditation granted to an accredited training provider . Accordingly, accredited training providers may only organise and conduct CPSA training courses with accredited trainers. Only accredited training providers can apply for trainer accreditations . {lang=de}","title":"Trainer"},{"location":"terms/term-trainer/#schulungsleiter","text":"Ein Trainer ist eine Person, die eine Schulung selbst leitet, mit der Ma\u00dfgabe, dass diese im Rahmen einer einem akkreditierten Schulungsanbieter gew\u00e4hrten Akkreditierung durchgef\u00fchrt wird. Entsprechend d\u00fcrfen akkreditierte Schulungsanbieter nur CPSA-Schulungen mit akkreditierten Schulungsleitern organisieren und durchf\u00fchren. Nur akkreditierte Schulungsanbieter k\u00f6nnen Akkreditierungen von Schulungsleitern beantragen.","title":"Schulungsleiter"},{"location":"terms/term-training-level/","text":"{lang=en} Training Level \u00b6 The iSAQB\u00ae CPSA education programme is divided into (currently) two Training Levels: Foundation Level and Advanced Level . The Training Levels should contain knowledge that builds upon one another. The exact relationships between each other and the contents of the Training Level are defined in the respective curricula ( syllabi ). {lang=de} Schulungslevel \u00b6 Das iSAQB\u00ae CPSA Schulungsprogramm ist (derzeit) in zwei Schulungslevel gegliedert: Foundation Level und Advanced Level . Die Schulungslevel sollten aufeinander aufbauendes Wissen enthalten. Die genauen Beziehungen untereinander und die Inhalte dieser Schulungslevel sind in den jeweiligen Lehrpl\u00e4nen festgelegt.","title":"Term training level"},{"location":"terms/term-training-level/#training-level","text":"The iSAQB\u00ae CPSA education programme is divided into (currently) two Training Levels: Foundation Level and Advanced Level . The Training Levels should contain knowledge that builds upon one another. The exact relationships between each other and the contents of the Training Level are defined in the respective curricula ( syllabi ). {lang=de}","title":"Training Level"},{"location":"terms/term-training-level/#schulungslevel","text":"Das iSAQB\u00ae CPSA Schulungsprogramm ist (derzeit) in zwei Schulungslevel gegliedert: Foundation Level und Advanced Level . Die Schulungslevel sollten aufeinander aufbauendes Wissen enthalten. Die genauen Beziehungen untereinander und die Inhalte dieser Schulungslevel sind in den jeweiligen Lehrpl\u00e4nen festgelegt.","title":"Schulungslevel"},{"location":"terms/term-training-provider/","text":"{lang=en} Training Provider \u00b6 An organisation or person who holds the rights of use to accredited training materials or who has purchased accreditation for training materials, provides trainers and infrastructure and conducts training courses. {lang=de} Schulungsanbieter \u00b6 Eine Organisation oder Person, die \u00fcber die Rechte zur Nutzung von akkreditierten Schulungsunterlagen verf\u00fcgt oder die eine Akkreditierung f\u00fcr Schulungsunterlagen erworben hat, Schulungsleiter und Infrastruktur zur Verf\u00fcgung stellt und Schulungen durchf\u00fchrt.","title":"Term training provider"},{"location":"terms/term-training-provider/#training-provider","text":"An organisation or person who holds the rights of use to accredited training materials or who has purchased accreditation for training materials, provides trainers and infrastructure and conducts training courses. {lang=de}","title":"Training Provider"},{"location":"terms/term-training-provider/#schulungsanbieter","text":"Eine Organisation oder Person, die \u00fcber die Rechte zur Nutzung von akkreditierten Schulungsunterlagen verf\u00fcgt oder die eine Akkreditierung f\u00fcr Schulungsunterlagen erworben hat, Schulungsleiter und Infrastruktur zur Verf\u00fcgung stellt und Schulungen durchf\u00fchrt.","title":"Schulungsanbieter"},{"location":"terms/term-ubiquitous-language/","text":"{lang=en} Ubiquitous Language \u00b6 A concept of Domain-Driven Design : The ubiquitous language is a language that is structured around the domain model . It is used by all team members to connect all the activities of the team with the software. The ubiquitous language is a living thing that is evolving during a project and will be changed during the whole live cycle of the software. {lang=de} Allgegenw\u00e4rtige Sprache \u00b6 Ein Konzept von Domain-Driven Design : Eine allgegenw\u00e4rtige Sprache ist eine Sprache, die um das Dom\u00e4nenmodell strukturiert ist. Sie wird von allen Teammitgliedern zur Verbindung aller Aktivit\u00e4ten des Teams mit der Software genutzt. Die allgegenw\u00e4rtige Sprache ist lebendig, entwickelt sich w\u00e4hrend eines Projekts weiter und ver\u00e4ndert sich w\u00e4hrend des gesamten Lebenszyklus der Software.","title":"Term ubiquitous language"},{"location":"terms/term-ubiquitous-language/#ubiquitous-language","text":"A concept of Domain-Driven Design : The ubiquitous language is a language that is structured around the domain model . It is used by all team members to connect all the activities of the team with the software. The ubiquitous language is a living thing that is evolving during a project and will be changed during the whole live cycle of the software. {lang=de}","title":"Ubiquitous Language"},{"location":"terms/term-ubiquitous-language/#allgegenwartige-sprache","text":"Ein Konzept von Domain-Driven Design : Eine allgegenw\u00e4rtige Sprache ist eine Sprache, die um das Dom\u00e4nenmodell strukturiert ist. Sie wird von allen Teammitgliedern zur Verbindung aller Aktivit\u00e4ten des Teams mit der Software genutzt. Die allgegenw\u00e4rtige Sprache ist lebendig, entwickelt sich w\u00e4hrend eines Projekts weiter und ver\u00e4ndert sich w\u00e4hrend des gesamten Lebenszyklus der Software.","title":"Allgegenw\u00e4rtige Sprache"},{"location":"terms/term-uml/","text":"{lang=en} Unified Modeling Language (UML) \u00b6 (UML) is a graphical language for visualizing, specifying and documenting the artifacts and structures of a software system. For building block views or the context view, use component diagrams, with either components, packages or classes to denote building blocks. For runtime views, use sequence- or activity diagrams (with swimlanes). Object diagrams can theoretically be used, but are practically not adviced, as they become cluttered even for small scenarios. For Deployment views, use deployment diagrams with node symbols. {lang=de} Unified Modeling Language / Vereinheitlichte Modellierungssprache (UML) \u00b6 Graphische Sprache zur Visualisierung, Spezifizierung und Dokumentation der Artefakte und Strukturen eines Softwaresystems. Verwenden Sie f\u00fcr Bausteinsichten oder die Kontextabgrenzung Komponentendiagramme mit Komponenten, Paketen oder Klassen zur Bezeichnung von Bausteinen. F\u00fcr Laufzeitsichten verwenden Sie Sequenz- oder Aktivit\u00e4tsdiagramme (mit Schwimmbahnen). Objektdiagramme k\u00f6nnen theoretisch verwendet werden, sind aber praktisch nicht zu empfehlen, da sie auch bei kleinen Szenarien \u00fcberh\u00e4uft erscheinen. Verwenden Sie f\u00fcr Verteilungssichten Verteilungsdiagramme mit Knotensymbolen.","title":"Term uml"},{"location":"terms/term-uml/#unified-modeling-language-uml","text":"(UML) is a graphical language for visualizing, specifying and documenting the artifacts and structures of a software system. For building block views or the context view, use component diagrams, with either components, packages or classes to denote building blocks. For runtime views, use sequence- or activity diagrams (with swimlanes). Object diagrams can theoretically be used, but are practically not adviced, as they become cluttered even for small scenarios. For Deployment views, use deployment diagrams with node symbols. {lang=de}","title":"Unified Modeling Language (UML)"},{"location":"terms/term-uml/#unified-modeling-language-vereinheitlichte-modellierungssprache-uml","text":"Graphische Sprache zur Visualisierung, Spezifizierung und Dokumentation der Artefakte und Strukturen eines Softwaresystems. Verwenden Sie f\u00fcr Bausteinsichten oder die Kontextabgrenzung Komponentendiagramme mit Komponenten, Paketen oder Klassen zur Bezeichnung von Bausteinen. F\u00fcr Laufzeitsichten verwenden Sie Sequenz- oder Aktivit\u00e4tsdiagramme (mit Schwimmbahnen). Objektdiagramme k\u00f6nnen theoretisch verwendet werden, sind aber praktisch nicht zu empfehlen, da sie auch bei kleinen Szenarien \u00fcberh\u00e4uft erscheinen. Verwenden Sie f\u00fcr Verteilungssichten Verteilungsdiagramme mit Knotensymbolen.","title":"Unified Modeling Language / Vereinheitlichte Modellierungssprache (UML)"},{"location":"terms/term-unit-test/","text":"{lang=en} Unit Test \u00b6 Test of the smallest testable parts of system to determine whether they are fit for use. Depending on implementation technology, a unit might be a method, function, interface or similar element.","title":"Term unit test"},{"location":"terms/term-unit-test/#unit-test","text":"Test of the smallest testable parts of system to determine whether they are fit for use. Depending on implementation technology, a unit might be a method, function, interface or similar element.","title":"Unit Test"},{"location":"terms/term-usability-quality-attribute/","text":"{lang=en} Usability Quality Attribute \u00b6 Degree to which a product or system can be used by specified users to achieve specified goals with effectiveness, efficiency and satisfaction in a specified context of use. Is composed of the following sub-characteristics: appropriateness recognizability , learnability , operability , user error protection , user interface aesthetics , accessibility . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Benutzerfreundlichkeit \u00b6 Ma\u00df, in dem ein Produkt oder System von spezifizierten Benutzern effektiv, effizient, und zufriedenstellend zur Erreichung von spezifizierten Zielen in einem spezifizierten Nutzungskontext genutzt werden kann. Es besteht aus folgenden Teilmerkmalen: Erkennbarkeit der Brauchbarkeit , Erlernbarkeit , Bedienbarkeit , Schutz vor Fehlbedienung , \u00c4sthetik der Benutzeroberfl\u00e4che , Zug\u00e4nglichkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term usability quality attribute"},{"location":"terms/term-usability-quality-attribute/#usability-quality-attribute","text":"Degree to which a product or system can be used by specified users to achieve specified goals with effectiveness, efficiency and satisfaction in a specified context of use. Is composed of the following sub-characteristics: appropriateness recognizability , learnability , operability , user error protection , user interface aesthetics , accessibility . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"Usability Quality Attribute"},{"location":"terms/term-usability-quality-attribute/#qualitatsmerkmal-benutzerfreundlichkeit","text":"Ma\u00df, in dem ein Produkt oder System von spezifizierten Benutzern effektiv, effizient, und zufriedenstellend zur Erreichung von spezifizierten Zielen in einem spezifizierten Nutzungskontext genutzt werden kann. Es besteht aus folgenden Teilmerkmalen: Erkennbarkeit der Brauchbarkeit , Erlernbarkeit , Bedienbarkeit , Schutz vor Fehlbedienung , \u00c4sthetik der Benutzeroberfl\u00e4che , Zug\u00e4nglichkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Benutzerfreundlichkeit"},{"location":"terms/term-user-error-protection-quality-attribute/","text":"{lang=en} User Error Protection Quality Attribute \u00b6 Degree to which a system protects users against making errors. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal Schutz vor Fehlbedienung \u00b6 Ma\u00df, in dem ein System Benutzer davor sch\u00fctzt, Fehler zu machen. Teilmerkmal von: Benutzerfreundlichkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term user error protection quality attribute"},{"location":"terms/term-user-error-protection-quality-attribute/#user-error-protection-quality-attribute","text":"Degree to which a system protects users against making errors. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"User Error Protection Quality Attribute"},{"location":"terms/term-user-error-protection-quality-attribute/#qualitatsmerkmal-schutz-vor-fehlbedienung","text":"Ma\u00df, in dem ein System Benutzer davor sch\u00fctzt, Fehler zu machen. Teilmerkmal von: Benutzerfreundlichkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal Schutz vor Fehlbedienung"},{"location":"terms/term-user-interface-aesthetics-quality-attribute/","text":"{lang=en} User Interface Aesthetics Quality Attribute \u00b6 Degree to which a user interface enables pleasing and satisfying interaction for the user. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de} Qualit\u00e4tsmerkmal \u00c4sthetik der Benutzeroberfl\u00e4che \u00b6 Ma\u00df, in dem eine Benutzeroberfl\u00e4che dem Benutzer eine angenehme und zufriedenstellende Interaktion erm\u00f6glicht. Teilmerkmal von: Benutzerfreundlichkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Term user interface aesthetics quality attribute"},{"location":"terms/term-user-interface-aesthetics-quality-attribute/#user-interface-aesthetics-quality-attribute","text":"Degree to which a user interface enables pleasing and satisfying interaction for the user. Is a sub-characteristic of: usability . Refer to ISO 25010 website. Category: Quality, ISO 25010 {lang=de}","title":"User Interface Aesthetics Quality Attribute"},{"location":"terms/term-user-interface-aesthetics-quality-attribute/#qualitatsmerkmal-asthetik-der-benutzeroberflache","text":"Ma\u00df, in dem eine Benutzeroberfl\u00e4che dem Benutzer eine angenehme und zufriedenstellende Interaktion erm\u00f6glicht. Teilmerkmal von: Benutzerfreundlichkeit . Vgl. Website von ISO 25010 . Kategorie: Qualit\u00e4t, ISO 25010","title":"Qualit\u00e4tsmerkmal \u00c4sthetik der Benutzeroberfl\u00e4che"},{"location":"terms/term-uses-relationship/","text":"{lang=en} Uses Relationship \u00b6 Dependency that exists between two building blocks. If A uses B than execution of A depends on the presence of a correct implementation of B. {lang=de} Nutzungsbeziehung \u00b6 Abh\u00e4ngigkeit zwischen zwei Bausteinen. Wenn A B nutzt, dann h\u00e4ngt die Ausf\u00fchrung von A von der Anwesenheit einer korrekten Implementierung von B ab.","title":"Term uses relationship"},{"location":"terms/term-uses-relationship/#uses-relationship","text":"Dependency that exists between two building blocks. If A uses B than execution of A depends on the presence of a correct implementation of B. {lang=de}","title":"Uses Relationship"},{"location":"terms/term-uses-relationship/#nutzungsbeziehung","text":"Abh\u00e4ngigkeit zwischen zwei Bausteinen. Wenn A B nutzt, dann h\u00e4ngt die Ausf\u00fchrung von A von der Anwesenheit einer korrekten Implementierung von B ab.","title":"Nutzungsbeziehung"},{"location":"terms/term-value-object/","text":"{lang=en} Value Object \u00b6 Value Object is a building block of Domain-Driven Design . ValueObjects do not have a conceptual identity of their own and should be treated as immutable. They are used to describe the state of entities and may be composed of other value objects but never of entities . {lang=de} Wertobjekt \u00b6 Ein Wertobjekt ist ein Baustein des Domain-Driven Designs . Wertobjekte haben keine eigene konzeptionelle Identit\u00e4t und sollten als unver\u00e4nderlich behandelt werden. Sie werden zur Beschreibung des Zustands von Entit\u00e4ten genutzt und k\u00f6nnen aus anderen Wertobjekten, aber niemals aus Entit\u00e4ten bestehen.","title":"Term value object"},{"location":"terms/term-value-object/#value-object","text":"Value Object is a building block of Domain-Driven Design . ValueObjects do not have a conceptual identity of their own and should be treated as immutable. They are used to describe the state of entities and may be composed of other value objects but never of entities . {lang=de}","title":"Value Object"},{"location":"terms/term-value-object/#wertobjekt","text":"Ein Wertobjekt ist ein Baustein des Domain-Driven Designs . Wertobjekte haben keine eigene konzeptionelle Identit\u00e4t und sollten als unver\u00e4nderlich behandelt werden. Sie werden zur Beschreibung des Zustands von Entit\u00e4ten genutzt und k\u00f6nnen aus anderen Wertobjekten, aber niemals aus Entit\u00e4ten bestehen.","title":"Wertobjekt"},{"location":"terms/term-view/","text":"{lang=en} View \u00b6 see: architecture view {lang=de} Sicht \u00b6 Siehe: Architektursicht.","title":"Term view"},{"location":"terms/term-view/#view","text":"see: architecture view {lang=de}","title":"View"},{"location":"terms/term-view/#sicht","text":"Siehe: Architektursicht.","title":"Sicht"},{"location":"terms/term-waterfall-development/","text":"{lang=en} Waterfall Development \u00b6 Development approach \"where you gather all the requirements up front, do all necessary design, down to a detailed level, then hand the specs to the coders, who write the code; then you do testing (possibly with a side trip to IntegrationHell) and deliver the whole thing in one big end-all release. Everything is big including the risk of failure.\" (quoted from the C2 wiki ) Contrast to iterative development . {lang=de} Wasserfall-Entwicklung \u00b6 Entwicklungsansatz, \u201ebei dem man alle Anforderungen vorab zusammentr\u00e4gt, den gesamten erforderlichen Entwurf bis runter auf Detailebene macht und dann die Spezifikationen an die Coder, die den Code schreiben, weitergibt; dann werden Tests durchgef\u00fchrt (eventuell mit einem Abstecher in die Integrationsh\u00f6lle) und schlie\u00dflich wird das Ganze mit einem gro\u00dfen abschlie\u00dfenden Release geliefert. Alles ist gro\u00df, auch die Gefahr des Scheiterns.\" (\u00dcbersetztes englisches Zitat aus C2 wiki . Gegensatz zur [ iterativen Entwicklung ](#term-iterative-development]","title":"Term waterfall development"},{"location":"terms/term-waterfall-development/#waterfall-development","text":"Development approach \"where you gather all the requirements up front, do all necessary design, down to a detailed level, then hand the specs to the coders, who write the code; then you do testing (possibly with a side trip to IntegrationHell) and deliver the whole thing in one big end-all release. Everything is big including the risk of failure.\" (quoted from the C2 wiki ) Contrast to iterative development . {lang=de}","title":"Waterfall Development"},{"location":"terms/term-waterfall-development/#wasserfall-entwicklung","text":"Entwicklungsansatz, \u201ebei dem man alle Anforderungen vorab zusammentr\u00e4gt, den gesamten erforderlichen Entwurf bis runter auf Detailebene macht und dann die Spezifikationen an die Coder, die den Code schreiben, weitergibt; dann werden Tests durchgef\u00fchrt (eventuell mit einem Abstecher in die Integrationsh\u00f6lle) und schlie\u00dflich wird das Ganze mit einem gro\u00dfen abschlie\u00dfenden Release geliefert. Alles ist gro\u00df, auch die Gefahr des Scheiterns.\" (\u00dcbersetztes englisches Zitat aus C2 wiki . Gegensatz zur [ iterativen Entwicklung ](#term-iterative-development]","title":"Wasserfall-Entwicklung"},{"location":"terms/term-web-of-trust/","text":"{lang=en} Web of Trust \u00b6 Since a single CA could be an easy target for an attacker the web of trust delegates the establishment of trust to the user. Each user decides which other users proof of identity he trusts, usually by verifying a fingerprint of a given key. This trust is expressed by signing the key of the other user who can then publish it with the additional signature. A third user can then verify this signature and decide to trust the identity or not. The email encryption PGP is an example for a PKI based on a web of trust. Category: Security {lang=de} Netz des Vertrauens / Web of Trust \u00b6 Da eine einzelne CA ein leichtes Ziel f\u00fcr einen Angreifer sein k\u00f6nnte, delegiert ein Netz des Vertrauens die Begr\u00fcndung des Vertrauens an den Benutzer. Jeder Benutzer entscheidet, in der Regel durch \u00dcberpr\u00fcfung eines Fingerprints eines Schl\u00fcssels, welchem Identit\u00e4tsnachweis anderer Nutzer er vertraut. Dieses Vertrauen wird durch die Signatur des Schl\u00fcssels des anderen Benutzers, der ihn dann mit der zus\u00e4tzlichen Signatur ver\u00f6ffentlichen kann, ausgedr\u00fcckt. Ein dritter Benutzer kann dann diese Signatur \u00fcberpr\u00fcfen und entscheiden, ob er der Identit\u00e4t vertraut oder nicht. Die E-Mail-Verschl\u00fcsselung PGP ist ein Beispiel f\u00fcr eine auf einem Netz des Vertrauens basierende PKI . Kategorie: Sicherheit","title":"Term web of trust"},{"location":"terms/term-web-of-trust/#web-of-trust","text":"Since a single CA could be an easy target for an attacker the web of trust delegates the establishment of trust to the user. Each user decides which other users proof of identity he trusts, usually by verifying a fingerprint of a given key. This trust is expressed by signing the key of the other user who can then publish it with the additional signature. A third user can then verify this signature and decide to trust the identity or not. The email encryption PGP is an example for a PKI based on a web of trust. Category: Security {lang=de}","title":"Web of Trust"},{"location":"terms/term-web-of-trust/#netz-des-vertrauens-web-of-trust","text":"Da eine einzelne CA ein leichtes Ziel f\u00fcr einen Angreifer sein k\u00f6nnte, delegiert ein Netz des Vertrauens die Begr\u00fcndung des Vertrauens an den Benutzer. Jeder Benutzer entscheidet, in der Regel durch \u00dcberpr\u00fcfung eines Fingerprints eines Schl\u00fcssels, welchem Identit\u00e4tsnachweis anderer Nutzer er vertraut. Dieses Vertrauen wird durch die Signatur des Schl\u00fcssels des anderen Benutzers, der ihn dann mit der zus\u00e4tzlichen Signatur ver\u00f6ffentlichen kann, ausgedr\u00fcckt. Ein dritter Benutzer kann dann diese Signatur \u00fcberpr\u00fcfen und entscheiden, ob er der Identit\u00e4t vertraut oder nicht. Die E-Mail-Verschl\u00fcsselung PGP ist ein Beispiel f\u00fcr eine auf einem Netz des Vertrauens basierende PKI . Kategorie: Sicherheit","title":"Netz des Vertrauens / Web of Trust"},{"location":"terms/term-whitebox/","text":"{lang=en} White Box \u00b6 Shows the internal structure of a system or building block, made up from blackboxes and the internal/external relationships and interfaces. See also Black Box . {lang=de} Whitebox \u00b6 Zeigt die interne Struktur eines aus Blackboxes bestehenden Systems oder Bausteins und die internen/externen Beziehungen/Schnittstellen.","title":"Term whitebox"},{"location":"terms/term-whitebox/#white-box","text":"Shows the internal structure of a system or building block, made up from blackboxes and the internal/external relationships and interfaces. See also Black Box . {lang=de}","title":"White Box"},{"location":"terms/term-whitebox/#whitebox","text":"Zeigt die interne Struktur eines aus Blackboxes bestehenden Systems oder Bausteins und die internen/externen Beziehungen/Schnittstellen.","title":"Whitebox"},{"location":"terms/term-workflow-management-system/","text":"{lang=en} Workflow Management System (WFMS) \u00b6 Provides an infrastructure for the set-up, performance and monitoring of a defined sequence of tasks, arranged as a workflow. (quoted from Wikipedia) {lang=de} Workflow-Management-System (WFMS) \u00b6 \u201eBietet eine Infrastruktur f\u00fcr die Einrichtung, Durchf\u00fchrung und \u00dcberwachung einer festgelegten Abfolge von Aufgaben in Form eines Workflows.\" (\u00dcbersetztes englisches Zitat aus Wikipedia)","title":"Term workflow management system"},{"location":"terms/term-workflow-management-system/#workflow-management-system-wfms","text":"Provides an infrastructure for the set-up, performance and monitoring of a defined sequence of tasks, arranged as a workflow. (quoted from Wikipedia) {lang=de}","title":"Workflow Management System (WFMS)"},{"location":"terms/term-workflow-management-system/#workflow-management-system-wfms_1","text":"\u201eBietet eine Infrastruktur f\u00fcr die Einrichtung, Durchf\u00fchrung und \u00dcberwachung einer festgelegten Abfolge von Aufgaben in Form eines Workflows.\" (\u00dcbersetztes englisches Zitat aus Wikipedia)","title":"Workflow-Management-System (WFMS)"},{"location":"terms/term-wrapper/","text":"{lang=en} Wrapper \u00b6 (syn: Decorator, Adapter, Gateway) Patterns to abstract away the concrete interface or implementation of a component. Attach additional responsibilities to an object dynamically. Depending on the sources, the semantics of the term wrapper may vary. D> ###### Comment (Gernot Starke) D> The tiny differences found in literature regarding this term often don't matter in real-life. Wrapping a component or building-block shall have a clear semantics within a single software system. {lang=de} Wrapper \u00b6 (Syn.: Decorator, Adapter, Gateway) Muster zum Wegabstrahieren der konkreten Schnittstelle oder Implementierung oder Komponente. F\u00fcgen zus\u00e4tzliche Verantwortlichkeiten dynamisch zu einem Objekt hinzu. D> ###### Anmerkung (Gernot Starke) D> Die winzigen Unterschiede, die sich in der Literatur zu diesem Begriff D> finden, spielen im realen Leben h\u00e4ufig keine Rolle. Das Wrapping D> einer Komponente oder eines Bausteins muss in einem einzelnen D> Softwaresystem eine klare Bedeutung haben.","title":"Term wrapper"},{"location":"terms/term-wrapper/#wrapper","text":"(syn: Decorator, Adapter, Gateway) Patterns to abstract away the concrete interface or implementation of a component. Attach additional responsibilities to an object dynamically. Depending on the sources, the semantics of the term wrapper may vary. D> ###### Comment (Gernot Starke) D> The tiny differences found in literature regarding this term often don't matter in real-life. Wrapping a component or building-block shall have a clear semantics within a single software system. {lang=de}","title":"Wrapper"},{"location":"terms/term-wrapper/#wrapper_1","text":"(Syn.: Decorator, Adapter, Gateway) Muster zum Wegabstrahieren der konkreten Schnittstelle oder Implementierung oder Komponente. F\u00fcgen zus\u00e4tzliche Verantwortlichkeiten dynamisch zu einem Objekt hinzu. D> ###### Anmerkung (Gernot Starke) D> Die winzigen Unterschiede, die sich in der Literatur zu diesem Begriff D> finden, spielen im realen Leben h\u00e4ufig keine Rolle. Das Wrapping D> einer Komponente oder eines Bausteins muss in einem einzelnen D> Softwaresystem eine klare Bedeutung haben.","title":"Wrapper"}]}